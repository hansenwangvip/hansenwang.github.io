{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/next-boot.js","path":"js/src/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/2017-01-27 JavaScript Events 笔记.md","hash":"c8b742fc8e14c06862f7d56911a806a2f9b96ffb","modified":1550669542927},{"_id":"source/_posts/2017-03-06 JavaScript精髓(1).md","hash":"9a33f01077a6e2503851f363e2115d4b1f69d34a","modified":1550669542927},{"_id":"source/_posts/2017-03-07 JavaScript精髓(2).md","hash":"60a5298bcb91649b361cbc8a17dde3f6f4c7a1d4","modified":1550669542927},{"_id":"source/_posts/2017-05-07 JavaScript对象数组排序.md","hash":"13aeb116c7073720dd206ebf3be5e742fb35422d","modified":1550669542928},{"_id":"source/_posts/2017-05-07 JavaScript观察者模式的通用实现.md","hash":"d3c3cb8e16b573a0eb153e35526fbf1eb6b519e4","modified":1550669542928},{"_id":"source/_posts/2017-06-06 前端网络原理和优化.md","hash":"a7e6a66b3f7f3d94e4387b276a3d0e627579020c","modified":1550669542929},{"_id":"source/_posts/2017-05-23 深入研究CSRF.md","hash":"15bd6b5ddff11105cd334985ce6dfaebf8b8f4b9","modified":1550669542929},{"_id":"source/_posts/2017-07-08 React项目中的高频ES6语法.md","hash":"7620d84792f0ac7faa3d5adff84630036756b5a5","modified":1550669542930},{"_id":"source/_posts/2017-10-23 更好用的border-box.md","hash":"d77009236a228c0dcc9720b652fbbdd661a2390d","modified":1550669542931},{"_id":"source/_posts/2017-06-07 Mac安装Sass万能方法.md","hash":"a740b6bf1b9b837d1c024039b4a8aa60cabdee35","modified":1550669542930},{"_id":"source/_posts/2017-12-03 随笔.md","hash":"57b95d37cda3ab911725fbeae59db23ccf7dd0b6","modified":1551790717473},{"_id":"source/_posts/2017-09-05 第一次翻译MDN文档.md","hash":"926807e1471e10a307cb0bd125fac10d1f1d8189","modified":1550718476282},{"_id":"source/_posts/2018-01-28 Array.prototype.sort的高级用法.md","hash":"6d82e94408974003e04ab1c3c03c66f003031be5","modified":1551790717473},{"_id":"source/_posts/2019-01-24 Git Commit Message规范参考.md","hash":"0449ee26d00c870fef5a1f7a3026a56dc4d66958","modified":1550669542932},{"_id":"public/2018/01/28/2018-01-28 Array.prototype.sort的高级用法/index.html","hash":"a83743e465c54a341d8c8f123fd838705287d2d6","modified":1551707604877},{"_id":"public/2019/01/24/2019-01-24 Git Commit Message规范参考/index.html","hash":"0eb925352271964d4b51efb839f9fe84e45b6c1c","modified":1551707604877},{"_id":"public/2017/10/23/2017-10-23 更好用的border-box/index.html","hash":"834c4f4f11a9549f970e6ee8dc2c15d425a353bb","modified":1551707604877},{"_id":"public/2017/09/05/2017-09-05 第一次翻译MDN文档/index.html","hash":"787f6495214b7682064c2dd103c350ca0a14295b","modified":1551707604877},{"_id":"public/2017/07/08/2017-07-08 React项目中的高频ES6语法/index.html","hash":"c2d09e9c35cc65a88227d1f03d77dbe80f3d4808","modified":1551707604877},{"_id":"public/2017/06/07/2017-06-07 Mac安装Sass万能方法/index.html","hash":"0cf0e95160dbe034ee9c2fcb5f54eab100558045","modified":1551707604877},{"_id":"public/2017/07/22/2017-12-03 随笔/index.html","hash":"6e40f772d4d4040392309ea7bd39a97e85fae446","modified":1551707604875},{"_id":"public/2017/06/06/2017-06-06 前端网络原理和优化/index.html","hash":"c380ba29a08737adde7b70bb4c83dfba15ecdfca","modified":1551707604877},{"_id":"public/2017/05/07/2017-05-07 JavaScript观察者模式的通用实现/index.html","hash":"f3e9282b936e6eee847b4b6bff36912e6b02de84","modified":1551707604877},{"_id":"public/2017/05/23/2017-05-23 深入研究CSRF/index.html","hash":"245fbe33a1594f4dbc7b41b381e3ca8a89ebe385","modified":1551707604877},{"_id":"public/2017/05/07/2017-05-07 JavaScript对象数组排序/index.html","hash":"ab1edbc2820cb1f7697cd4714986bffc572c254c","modified":1551707604878},{"_id":"public/2017/03/07/2017-03-07 JavaScript精髓(2)/index.html","hash":"7959cfef4d8714c41a3007bdbd764dee1e485361","modified":1551707604878},{"_id":"public/archives/index.html","hash":"afb5b2697b51886724dffc092e12aa2ca1556857","modified":1551707604878},{"_id":"public/2017/03/06/2017-03-06 JavaScript精髓(1)/index.html","hash":"5f9eace8266ba28a18479f87e6b9377d4b6f6c6c","modified":1551707604878},{"_id":"public/2017/01/27/2017-01-27 JavaScript Events 笔记/index.html","hash":"14f75317dc3f394398ed004e44c37db2656818f6","modified":1551707604878},{"_id":"public/archives/2017/index.html","hash":"54cfac73b2d275b89502244260d73ea8d7a3f899","modified":1551707604878},{"_id":"public/archives/2017/page/2/index.html","hash":"fb6fdfb643b6c5a134347b55cb89922f18a7899b","modified":1551707604875},{"_id":"public/archives/page/2/index.html","hash":"e2d4ed90b9e0bd836f8132d5758b122fc1e82266","modified":1551707604875},{"_id":"public/archives/2017/01/index.html","hash":"935f1d297dc6fbce8b7cc56386c6f62582cfe7ad","modified":1551707604875},{"_id":"public/archives/2017/03/index.html","hash":"2923c338bce02eb6e458fb4aede37928cbc90da6","modified":1551707604875},{"_id":"public/archives/2017/05/index.html","hash":"96d5b41ffb7225760ac7f6f37577a654fd98eae6","modified":1551707604875},{"_id":"public/archives/2017/06/index.html","hash":"a3b890207c7192f2c854028f88224d561962b986","modified":1551707604875},{"_id":"public/archives/2017/07/index.html","hash":"492a4c76b281febda9c17a696de99420c8742a4b","modified":1551707604875},{"_id":"public/archives/2017/09/index.html","hash":"941592a5e977fbfd049cf95701439fdabb5d9773","modified":1551707604875},{"_id":"public/archives/2017/10/index.html","hash":"cf4f7d6ae9e3f53089c74dad57e4c9a5f6b253e8","modified":1551707604875},{"_id":"public/archives/2018/01/index.html","hash":"5cee175d80b053f8c1e14f9dc8693d0b98dcf11f","modified":1551707604876},{"_id":"public/archives/2019/index.html","hash":"0bba2679dceae24aebef47c7096debd5ba1407c4","modified":1551707604876},{"_id":"public/archives/2018/index.html","hash":"bc5b102a35f9b8aed30a5850d6a51f5b9932043a","modified":1551707604875},{"_id":"public/archives/2019/01/index.html","hash":"c2d764f45d1de6b569c2b3f53386081815c5118c","modified":1551707604876},{"_id":"public/page/2/index.html","hash":"180b7386f4aea19e2032d76ccfef1c8d2aed0372","modified":1551707604878},{"_id":"public/categories/技术/index.html","hash":"ea407fb742aec08883563ac9e9834dcc01f76808","modified":1551707604876},{"_id":"public/categories/笔记/index.html","hash":"79856a5a1fc4779571c44a8ec75de6c2bea0896c","modified":1551707604876},{"_id":"public/index.html","hash":"e3de509ade536aba24e7863a34117a6c6d4294a8","modified":1551707604878},{"_id":"public/categories/日志/index.html","hash":"dbbc724613ae0ca0f0f8652c251e809313e46001","modified":1551707604876},{"_id":"public/categories/随笔/index.html","hash":"b7a301b7676d106217aad039920e60c2726b948d","modified":1551707604876},{"_id":"public/categories/软件工程/index.html","hash":"cc96800b632f22e18817d9c34e4845d2d19ced61","modified":1551707604876},{"_id":"public/tags/前端/index.html","hash":"3e9af502284506afa27b6b85ef42629aeb63ed53","modified":1551707604876},{"_id":"public/tags/JavaScript/index.html","hash":"c498509fbeab55f7fbabeb2bfd754455766921a3","modified":1551707604876},{"_id":"public/tags/算法/index.html","hash":"a9ae405de861ea0145f9f75b22291eb62a731712","modified":1551707604876},{"_id":"public/tags/学习笔记/index.html","hash":"1db8787ce518df8a78130261e7ac23f5f3b0c689","modified":1551707604876},{"_id":"public/tags/安全/index.html","hash":"2691200f0f93e9dd74d9724011cbe0142b08fd26","modified":1551707604876},{"_id":"public/tags/CSS/index.html","hash":"8d0c4e028c2b0726865080c7d3f006a5411e4241","modified":1551707604876},{"_id":"public/tags/指南-笔记-Mac/index.html","hash":"176a07d889377243f2f88b996279b1200e499028","modified":1551707604877},{"_id":"public/tags/日志/index.html","hash":"4b8459dc2ba771e526a134f692db3069fa95da88","modified":1551707604876},{"_id":"public/tags/随笔/index.html","hash":"a571bd02e176d7d974c984b01f4f1c179ad6347c","modified":1551707604877},{"_id":"public/tags/规范/index.html","hash":"2e013d03f38576df3fe08885763c354e0d8f477f","modified":1551707604877},{"_id":"public/tags/Git/index.html","hash":"92838abfe7f437599b256d8af75c83e8db6824dd","modified":1551707604877},{"_id":"public/tags/软件工程/index.html","hash":"b80debf34b0d0e8ed38b4ec00bd8687c2e4b8988","modified":1551707604877},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1523731104000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1523731104000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1523731104000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1551680619000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1523731104000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1523731104000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1523731104000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1523731104000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1523731104000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1551680619000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1523731104000},{"_id":"themes/next/README.md","hash":"d6845a3f479ed133cf741b1c0fec9a4e6e90be71","modified":1551680619000},{"_id":"themes/next/bower.json","hash":"a5ffaa8d88f0f66d15158917b3798e5e38363262","modified":1551680619000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1551680619000},{"_id":"themes/next/_config.yml","hash":"88f5977c7ce3a80c3013bd928749cb1f32b09d30","modified":1551792994040},{"_id":"themes/next/package.json","hash":"f3b4ef65214cec9c37acd10ef080526fb1ea14bb","modified":1551680619000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5c302a07fb24a28a6a3326dc9af3487b90421b1b","modified":1551680619000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1551680619000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1551680619000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1523731104000},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1551680619000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1523731104000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1551680619000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1551680619000},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1551680619000},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1551680619000},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1551680619000},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1551680619000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1523731104000},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1551680619000},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1551680619000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1551680619000},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1551680619000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1523731104000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1523731104000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1523731104000},{"_id":"themes/next/layout/_layout.swig","hash":"cf9ab383dbe0e61e2dd10808b995d7dbd2d07b08","modified":1551680619000},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1551680619000},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1551680619000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1551680619000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1551680619000},{"_id":"themes/next/layout/page.swig","hash":"4325671c489828274efae0df68895383ad81cecb","modified":1551680619000},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1551680619000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1523731104000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1551680619000},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1551680619000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1523731104000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1523731104000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1523731104000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523731104000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1523731104000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1523731104000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1523731104000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1551680619000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1523731104000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1523731104000},{"_id":"themes/next/layout/_macro/post.swig","hash":"3b7f8695f3dec8396a3e9943fc752b11b0a84963","modified":1551680619000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"07340f3a4c8d8a9dd491d1eba18d985ecc0855a2","modified":1551680619000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9628254698ee154d6e3c8d5822aff9cef20d3dc2","modified":1551680619000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1551680619000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1523731104000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1523731104000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1551680619000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1523731104000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1523731104000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1523731104000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1551680619000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c4c58ea2bd4cf10372a5e46dbec1b9a2e0e69f0f","modified":1551680619000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1523731104000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1551680619000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1523731104000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1551680619000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1551680619000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1551680619000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1551680619000},{"_id":"themes/next/scripts/tags/button.js","hash":"279a04037fce9b5e3cc55aef0581cd34172aea98","modified":1551680619000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1551680619000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1551680619000},{"_id":"themes/next/scripts/tags/label.js","hash":"64e6f95e2ccde49413bb5a8d2926f6df2f9a670a","modified":1551680619000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"4775fffa526f1f7b40aa1f1c0a171dbcf5963df7","modified":1551680619000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"6dc82ae9df2341d9c7bd05eacb5cf90208c2a44c","modified":1551680619000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1523731104000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1551680619000},{"_id":"themes/next/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1551680619000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523731104000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523731104000},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1551680619000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1523731104000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1523731104000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1523731104000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1523731104000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1523731104000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523731104000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523731104000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523731104000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1523731104000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1523731104000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523731104000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1523731104000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523731104000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1523731104000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1523731104000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1523731104000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1551680619000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"be24f204a515d5211bf3ba98a030e3bf61d4cc16","modified":1551680619000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523731104000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523731104000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523731104000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523731104000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1523731104000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1523731104000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1551680619000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1551680619000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1523731104000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1551680619000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1523731104000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1551680619000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1551680619000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1523731104000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1523731104000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1551680619000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"c9172b9498bac4a4551dc0191855abee3bb192fc","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1523731104000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"a4ab8095bf60def5823bf6b7b91a92a356a4c098","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"dbe94dd94678ee8e4002b06bb1e9ead2e59e44bf","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1523731104000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"210f0c152bc4a9375ed364398ce309f09ebafd10","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1523731104000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1551680619000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1551680619000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1523731104000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1523731104000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1523731104000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1523731104000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1551680619000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1551680619000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1523731104000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1551680619000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1551680619000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1551680619000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523731104000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1551680619000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1551680619000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523731104000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523731104000},{"_id":"themes/next/source/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1551680619000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1551680619000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1551680619000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1551680619000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1551680619000},{"_id":"themes/next/source/js/src/utils.js","hash":"da28f07763faa35b1f84f22e5c7f0c02a7d5a575","modified":1551680619000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523731104000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523731104000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1523731104000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1523731104000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1523731104000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1523731104000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1523731104000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1523731104000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1544837706000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523731104000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1544837706000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523731104000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1523731104000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1523731104000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523731104000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523731104000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523731104000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523731104000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523731104000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523731104000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523731104000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1523731104000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523731104000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523731104000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1523731104000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523731104000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523731104000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1523731104000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"837ff3718cb5a63eb01a451e35989fd1dfe4218c","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1551680619000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8c68d36d1c74628be58cb61e66948868a8c7588d","modified":1551680619000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1523731104000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"e3ad313825d7ad03e24bb76d036deeb50587022b","modified":1551680619000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"4fd38490b01af4f977b53aefc433cd2f981cde14","modified":1551680619000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1523731104000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"6f1a0fe6b45eb8849114b8b60ba600767d08b6df","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1523731104000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"fe03041c387347e0bcf8efd1b4cf205ece66c339","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2dd866817d0bc7d179e81855f8fbcbb5d3c883fc","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1523731104000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a5e3c6da76f6d5bed70c38fdf5796faa759d473","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9b076c92abdadcf9acee75da64592ff3badd69b8","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1523731104000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"fd54eb599d5003bbb1aabc08596bc24a3fa3294f","modified":1551680619000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1551680619000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523731104000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523731104000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1523731104000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523731104000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523731104000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"61af2f656f6e916f9920277bd048c5d58ff32a60","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"f9837075189e37c100675211076b5053788e7ba5","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c59dbc1a6f2b4f15d8ae499f7aa227d9b0e3058","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"cee0e70d1a6ea963bfd707bf9cedb8a4637f64c2","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"b05d7e8c387ba60c2abf16121b97cfb2548dcb85","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"671a7f8aa138259172e7c6268d82d7a62a1e036a","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"e7e064bfe8ff9b9f172a9662662380b4c6699d6e","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"9ab4e05e7b78af755ebdcbb71731fd723ed2d7f5","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"01820d3ffd007eb46a9cbe2ddb251aaa7f70b73e","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"2bbdf4b59117b54482dda6ea82a5286c8a3fe267","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"42a0769311856a7ea3ede1c8656fb5646994a238","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b5e5aa7074a965e396229c5bd263fb406770ce5f","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"070251836b57027c8240c51e41cb8e8c999c4525","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"0e760758221d4919902bda7c4d3bb96c94a678db","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"c415729e0f0d2439e63b93cec7ae32df54db87b4","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"190ad18f45b8a69cef13b2fdd2254893d06ec2c3","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1523731104000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1523731104000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1523731104000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1523731104000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523731104000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523731104000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523731104000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523731104000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523731104000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1523731104000},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551680385386},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551680385386},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551680385386},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551680385386},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551680385386},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551680385386},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551680385386},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551680385386},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551680385386},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551680385386},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551680385386},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551680385387},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551680385387},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551680385387},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551680385387},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551680385387},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551680385387},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551680385387},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1551680385387},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551680385387},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1551680385942},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1551680385946},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1551680385947},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1551680385947},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1551680385947},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1551680385947},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551680385947},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1551680385947},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1551680385947},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1551680385947},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1551680385948},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1551680385948},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1551680385948},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1551680385956},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1551680385956},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1551680385964},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1551680385964},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1551680385964},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551680385964},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1551680385964},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1551680385964},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1551680385964},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1551680385964},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1551680385964},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1551680385964},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1551680385964},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1551680385964},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1551680385964},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1551680385964},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1551680385965},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1551680385965},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1551680385965},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1551680385965},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1551680385965},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1551680385965},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1551680385965},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1551680385965},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1551680385965},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1551680385965},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1551680385966},{"_id":"public/css/main.css","hash":"baceccb4e988e883611e0a8e3c0285b9286813c2","modified":1551680385966},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551680385966},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551680385966},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1551680385980},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1551680385981},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1551680385981},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1551680385981},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551680385981},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1551680385981},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1551680385981},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1551680385981},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1551680385981},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551680385981},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551680385981},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1551680385981},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1551680385981},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1551680385982},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1551680385982},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1551680385982},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1551680385982},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1551680385982},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1551680385982},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1551680385982},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551680385982},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1551680385982},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551680385982},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1551680385982},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551680385982},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1551680385982},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1551680385983},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1551680385983},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1551680385983},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1551680385983},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551680385983},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551680385983},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1551680385983},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551680385983},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1551680385983},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1551680385983},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1551680385984},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551680385984},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1551680385984},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1551680386022},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.all-contributorsrc","hash":"addc24e08548d72c28eec5ce9dc03a834ee7f384","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/README.md","hash":"d6845a3f479ed133cf741b1c0fec9a4e6e90be71","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/bower.json","hash":"a5ffaa8d88f0f66d15158917b3798e5e38363262","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/_config.yml","hash":"f89a8ced3b56029bca3fbdcc85746b07eb0284e0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/package.json","hash":"f3b4ef65214cec9c37acd10ef080526fb1ea14bb","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/CONTRIBUTING.md","hash":"5c302a07fb24a28a6a3326dc9af3487b90421b1b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/stale.yml","hash":"dbdbc897d0d959b1508c14211240bbfcdd1b7edc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/fr.yml","hash":"d37a5d82b499a2f082fe9bbf3ad9f11b36b6b837","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_layout.swig","hash":"cf9ab383dbe0e61e2dd10808b995d7dbd2d07b08","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/page.swig","hash":"4325671c489828274efae0df68895383ad81cecb","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/CONTRIBUTING.md","hash":"b619c87911e112801d899f80fe4ae060bb9cf6a5","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/docs/ru/README.md","hash":"583539908025827813a9dc098d2e1a87e6891498","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/comments.swig","hash":"07340f3a4c8d8a9dd491d1eba18d985ecc0855a2","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/github-banner.swig","hash":"818deb840c91f7ebe8ff558840ca3c1612a3f1fe","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/next-boot.swig","hash":"82032af75320f496ae40fce5d0781e05eb96453c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_macro/post.swig","hash":"3b7f8695f3dec8396a3e9943fc752b11b0a84963","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_macro/sidebar.swig","hash":"9628254698ee154d6e3c8d5822aff9cef20d3dc2","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/vendors.swig","hash":"c4c58ea2bd4cf10372a5e46dbec1b9a2e0e69f0f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/copy-code.swig","hash":"7c306e3296d90c3765fb681d24c6fe4cb5e274a0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/pdf.swig","hash":"5453d76e00bfcd1d732fc5f41828a90eb681f645","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/button.js","hash":"279a04037fce9b5e3cc55aef0581cd34172aea98","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/full-image.js","hash":"6dc82ae9df2341d9c7bd05eacb5cf90208c2a44c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/group-pictures.js","hash":"4775fffa526f1f7b40aa1f1c0a171dbcf5963df7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/label.js","hash":"64e6f95e2ccde49413bb5a8d2926f6df2f9a670a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/head/head.swig","hash":"6a825ce9412339ec4a128d9714804994cb85522c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/post/reward.swig","hash":"c33691d9b4ff3a69603ad04c9ab264eb68ea43a9","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/schemes/muse.swig","hash":"be24f204a515d5211bf3ba98a030e3bf61d4cc16","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/google-analytics.swig","hash":"c9172b9498bac4a4551dc0191855abee3bb192fc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/gitment.swig","hash":"dbe94dd94678ee8e4002b06bb1e9ead2e59e44bf","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/gitalk.swig","hash":"197207078ff0f4d46417b4413493e02cda0b85f4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/index.swig","hash":"a4ab8095bf60def5823bf6b7b91a92a356a4c098","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/comments/valine.swig","hash":"210f0c152bc4a9375ed364398ce309f09ebafd10","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/math/mathjax.swig","hash":"c6ebf54c78cdfb68841cda28d7544211d9bd0f69","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/quicklink/quicklink.swig","hash":"49d7c3e642eb15124bbcad866ccf0d500ea88475","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/quicklink/index.swig","hash":"65001a74fa29dc33f677e09e8ead957ccb7eed2a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/search/algolia-search.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/next-boot.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/utils.js","hash":"da28f07763faa35b1f84f22e5c7f0c02a7d5a575","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/back-to-top-sidebar.styl","hash":"837ff3718cb5a63eb01a451e35989fd1dfe4218c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/scaffolding/helpers.styl","hash":"e3ad313825d7ad03e24bb76d036deeb50587022b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/scaffolding/base.styl","hash":"8c68d36d1c74628be58cb61e66948868a8c7588d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/scaffolding/mobile.styl","hash":"4fd38490b01af4f977b53aefc433cd2f981cde14","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/scaffolding/tables.styl","hash":"6f1a0fe6b45eb8849114b8b60ba600767d08b6df","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Gemini/index.styl","hash":"9a5e3c6da76f6d5bed70c38fdf5796faa759d473","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/_header.styl","hash":"fe03041c387347e0bcf8efd1b4cf205ece66c339","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/index.styl","hash":"2dd866817d0bc7d179e81855f8fbcbb5d3c883fc","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/_layout.styl","hash":"9b076c92abdadcf9acee75da64592ff3badd69b8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/_sidebar.styl","hash":"fd54eb599d5003bbb1aabc08596bc24a3fa3294f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/highlight/highlight.styl","hash":"9c59dbc1a6f2b4f15d8ae499f7aa227d9b0e3058","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/header/github-banner.styl","hash":"9e0f215868df17cb27a4a522fd31156c66428c2d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/pages/schedule.styl","hash":"61af2f656f6e916f9920277bd048c5d58ff32a60","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-meta.styl","hash":"42a0769311856a7ea3ede1c8656fb5646994a238","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-expand.styl","hash":"2bbdf4b59117b54482dda6ea82a5286c8a3fe267","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-reward.styl","hash":"b5e5aa7074a965e396229c5bd263fb406770ce5f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-author.styl","hash":"cee0e70d1a6ea963bfd707bf9cedb8a4637f64c2","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"f9837075189e37c100675211076b5053788e7ba5","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"671a7f8aa138259172e7c6268d82d7a62a1e036a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"b05d7e8c387ba60c2abf16121b97cfb2548dcb85","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"9ab4e05e7b78af755ebdcbb71731fd723ed2d7f5","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/sidebar.styl","hash":"e7e064bfe8ff9b9f172a9662662380b4c6699d6e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/sidebar/site-state.styl","hash":"01820d3ffd007eb46a9cbe2ddb251aaa7f70b73e","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/note.styl","hash":"0e760758221d4919902bda7c4d3bb96c94a678db","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/note-modern.styl","hash":"070251836b57027c8240c51e41cb8e8c999c4525","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/gitment.styl","hash":"c415729e0f0d2439e63b93cec7ae32df54db87b4","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_common/components/third-party/third-party.styl","hash":"190ad18f45b8a69cef13b2fdd2254893d06ec2c3","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1551680619000},{"_id":"themes/hexo-theme-next/hexo-theme-next-master/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551680619000},{"_id":"themes/next/.all-contributorsrc","hash":"addc24e08548d72c28eec5ce9dc03a834ee7f384","modified":1551680619000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1551680619000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1551680619000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1551680619000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1551680619000},{"_id":"themes/next/.github/stale.yml","hash":"dbdbc897d0d959b1508c14211240bbfcdd1b7edc","modified":1551680619000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1551680619000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1551680619000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1551680619000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1551680619000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1551680619000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1551680619000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1551680619000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1551680619000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1551680619000},{"_id":"themes/next/languages/fr.yml","hash":"d37a5d82b499a2f082fe9bbf3ad9f11b36b6b837","modified":1551680619000},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1551680619000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1551680619000},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1551680619000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1551680619000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1551680619000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1551680619000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1551680619000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1551680619000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1551680619000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1551680619000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1551680619000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1551680619000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1551680619000},{"_id":"themes/next/docs/ru/README.md","hash":"583539908025827813a9dc098d2e1a87e6891498","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"b619c87911e112801d899f80fe4ae060bb9cf6a5","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1551680619000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1551680619000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1551680619000},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"82032af75320f496ae40fce5d0781e05eb96453c","modified":1551680619000},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"818deb840c91f7ebe8ff558840ca3c1612a3f1fe","modified":1551680619000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1551680619000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1551680619000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1551680619000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"7c306e3296d90c3765fb681d24c6fe4cb5e274a0","modified":1551680619000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"5453d76e00bfcd1d732fc5f41828a90eb681f645","modified":1551680619000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1551680619000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1551680619000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1551680619000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1551680619000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1551680619000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1551680619000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1551680619000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6a825ce9412339ec4a128d9714804994cb85522c","modified":1551680619000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1551680619000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1551680619000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1551680619000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1551680619000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1551680619000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1551680619000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1551680619000},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"c33691d9b4ff3a69603ad04c9ab264eb68ea43a9","modified":1551680619000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1551680619000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1551680619000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1551680619000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1551680619000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1551680619000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1551680619000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"197207078ff0f4d46417b4413493e02cda0b85f4","modified":1551680619000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1551680619000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1551680619000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c6ebf54c78cdfb68841cda28d7544211d9bd0f69","modified":1551680619000},{"_id":"themes/next/layout/_third-party/quicklink/quicklink.swig","hash":"49d7c3e642eb15124bbcad866ccf0d500ea88475","modified":1551680619000},{"_id":"themes/next/layout/_third-party/quicklink/index.swig","hash":"65001a74fa29dc33f677e09e8ead957ccb7eed2a","modified":1551680619000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1551680619000},{"_id":"themes/next/source/js/src/next-boot.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1551680619000},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1551680619000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"9e0f215868df17cb27a4a522fd31156c66428c2d","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1551680619000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1551680619000},{"_id":"themes/theme-next/.all-contributorsrc","hash":"6e5abe56bd8bbc5e926db941d5c9a79b42cc5049","modified":1551702962811},{"_id":"themes/theme-next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1551702962816},{"_id":"themes/theme-next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1551702962817},{"_id":"themes/theme-next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1551702962814},{"_id":"themes/theme-next/.git","hash":"50122366db8c9538c5cc1e9fd8742d9430f93195","modified":1551702962643},{"_id":"themes/theme-next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1551702962820},{"_id":"themes/theme-next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1551702962843},{"_id":"themes/theme-next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1551702962846},{"_id":"themes/theme-next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1551702962850},{"_id":"themes/theme-next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1551702962848},{"_id":"themes/theme-next/README.md","hash":"0deb7690e3eef2016a6f8163306abe62e084bd70","modified":1551702962852},{"_id":"themes/theme-next/_config.yml","hash":"bf1be8a79ea58e175f5209c4cd0c03eca573a891","modified":1551702962855},{"_id":"themes/theme-next/bower.json","hash":"237d0a2bf89418dee4a4e9cdfef0d66dd7a1d18c","modified":1551702962857},{"_id":"themes/theme-next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1551702962859},{"_id":"themes/theme-next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1551702962914},{"_id":"themes/theme-next/package.json","hash":"5912233efcabf8c6d7dcd2c2036c77b6631b5677","modified":1551702963179},{"_id":"themes/theme-next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1551702962823},{"_id":"themes/theme-next/.github/CONTRIBUTING.md","hash":"acbcd9e004f6db93841c774e17cfc7304253ac74","modified":1551702962826},{"_id":"themes/theme-next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1551702962828},{"_id":"themes/theme-next/.github/stale.yml","hash":"ff822ab5556453ee3242ba524790b877a32540ce","modified":1551702962841},{"_id":"themes/theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1551702962839},{"_id":"themes/theme-next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1551702962866},{"_id":"themes/theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1551702962862},{"_id":"themes/theme-next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1551702962870},{"_id":"themes/theme-next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1551702962873},{"_id":"themes/theme-next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1551702962868},{"_id":"themes/theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1551702962875},{"_id":"themes/theme-next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1551702962877},{"_id":"themes/theme-next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1551702962879},{"_id":"themes/theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1551702962881},{"_id":"themes/theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1551702962919},{"_id":"themes/theme-next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1551702962917},{"_id":"themes/theme-next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1551702962921},{"_id":"themes/theme-next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1551702962925},{"_id":"themes/theme-next/languages/fr.yml","hash":"0393558717065293bdf732866471cebb0c884f6a","modified":1551702962923},{"_id":"themes/theme-next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1551702962927},{"_id":"themes/theme-next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1551702962930},{"_id":"themes/theme-next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1551702962932},{"_id":"themes/theme-next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1551702962934},{"_id":"themes/theme-next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1551702962936},{"_id":"themes/theme-next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1551702962940},{"_id":"themes/theme-next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1551702962944},{"_id":"themes/theme-next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1551702962942},{"_id":"themes/theme-next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1551702962946},{"_id":"themes/theme-next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1551702962948},{"_id":"themes/theme-next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1551702962950},{"_id":"themes/theme-next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1551702962952},{"_id":"themes/theme-next/layout/_layout.swig","hash":"88c5567cdde8123ef202a7af469df0a2c82a9d55","modified":1551702962964},{"_id":"themes/theme-next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1551702962938},{"_id":"themes/theme-next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1551702963162},{"_id":"themes/theme-next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1551702963167},{"_id":"themes/theme-next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1551702963164},{"_id":"themes/theme-next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1551702963172},{"_id":"themes/theme-next/layout/page.swig","hash":"948616c82d80246a3476cd7681aede249dcfc5cc","modified":1551702963169},{"_id":"themes/theme-next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1551702963174},{"_id":"themes/theme-next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1551702963177},{"_id":"themes/theme-next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1551702963192},{"_id":"themes/theme-next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1551702963194},{"_id":"themes/theme-next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1551702963659},{"_id":"themes/theme-next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1551702963662},{"_id":"themes/theme-next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1551702963664},{"_id":"themes/theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551702963525},{"_id":"themes/theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1551702962832},{"_id":"themes/theme-next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1551702962834},{"_id":"themes/theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1551702962894},{"_id":"themes/theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1551702962837},{"_id":"themes/theme-next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1551702962884},{"_id":"themes/theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1551702962891},{"_id":"themes/theme-next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1551702962886},{"_id":"themes/theme-next/docs/ru/README.md","hash":"8bdccb3d4f63f7f612b974eca38c7578a3e95043","modified":1551702962888},{"_id":"themes/theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1551702962896},{"_id":"themes/theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"415aa36be2d985c6ebb1a30a446aaffa1b9e471b","modified":1551702962899},{"_id":"themes/theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1551702962905},{"_id":"themes/theme-next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1551702962901},{"_id":"themes/theme-next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1551702962903},{"_id":"themes/theme-next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1551702962908},{"_id":"themes/theme-next/docs/zh-CN/README.md","hash":"0e6652be1b6bca87479f2601ff89105def200b4c","modified":1551702962909},{"_id":"themes/theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1551702962911},{"_id":"themes/theme-next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1551702962957},{"_id":"themes/theme-next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1551702962960},{"_id":"themes/theme-next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1551702962973},{"_id":"themes/theme-next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1551702962962},{"_id":"themes/theme-next/layout/_macro/sidebar.swig","hash":"b9054a508190ce85560b0dc0578b26f84f6112fc","modified":1551702962977},{"_id":"themes/theme-next/layout/_macro/post.swig","hash":"e4123aa3e79012cc4e615e9de55de7612d01e8d5","modified":1551702962975},{"_id":"themes/theme-next/layout/_partials/comments.swig","hash":"54afb7b78509ed8fac5d23daecc147b0fe615d1d","modified":1551702962981},{"_id":"themes/theme-next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1551702962983},{"_id":"themes/theme-next/layout/_partials/github-banner.swig","hash":"94c5d55df7121d73ee0340beac85b9c7c103a3e2","modified":1551702962985},{"_id":"themes/theme-next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1551702963013},{"_id":"themes/theme-next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1551702963015},{"_id":"themes/theme-next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1551702963045},{"_id":"themes/theme-next/layout/_scripts/next-boot.swig","hash":"28b1cd4c065fcd214a1d6dd06f54bb62c3519aad","modified":1551702963048},{"_id":"themes/theme-next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1551702963050},{"_id":"themes/theme-next/layout/_scripts/vendors.swig","hash":"68ad21aef6481d014e7ec0b674e469f2f82ea231","modified":1551702963066},{"_id":"themes/theme-next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1551702963102},{"_id":"themes/theme-next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1551702963105},{"_id":"themes/theme-next/layout/_third-party/copy-code.swig","hash":"6b1bd41f6654b5d6577b60859156544a3ca1c037","modified":1551702963124},{"_id":"themes/theme-next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1551702963126},{"_id":"themes/theme-next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1551702963136},{"_id":"themes/theme-next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1551702963138},{"_id":"themes/theme-next/layout/_third-party/pdf.swig","hash":"d66dec72ea7ad5026260914e3545551645e0ab37","modified":1551702963140},{"_id":"themes/theme-next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1551702963150},{"_id":"themes/theme-next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1551702963148},{"_id":"themes/theme-next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1551702963185},{"_id":"themes/theme-next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1551702963190},{"_id":"themes/theme-next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1551702963152},{"_id":"themes/theme-next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1551702963188},{"_id":"themes/theme-next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1551702963201},{"_id":"themes/theme-next/scripts/tags/button.js","hash":"6ef342a0c4b58000ba11148b4c9b2b599edd86b5","modified":1551702963198},{"_id":"themes/theme-next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1551702963203},{"_id":"themes/theme-next/scripts/tags/group-pictures.js","hash":"03575b534303f42c81ba6187ec601a5578913a39","modified":1551702963214},{"_id":"themes/theme-next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1551702963216},{"_id":"themes/theme-next/scripts/tags/full-image.js","hash":"755b0d518352ec27354124105b48e302ac84d66f","modified":1551702963205},{"_id":"themes/theme-next/scripts/tags/note.js","hash":"f1b560d6e63d1b06fd80e12bbac32660125c223c","modified":1551702963221},{"_id":"themes/theme-next/scripts/tags/label.js","hash":"4cee94f53fdecc7f9c2d91c06ab9e7a433b5ec5a","modified":1551702963219},{"_id":"themes/theme-next/scripts/tags/tabs.js","hash":"ca885c8fa46a76a7b8977730575551622497410b","modified":1551702963223},{"_id":"themes/theme-next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1551702963522},{"_id":"themes/theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1551702963531},{"_id":"themes/theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1551702963529},{"_id":"themes/theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1551702963538},{"_id":"themes/theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1551702963533},{"_id":"themes/theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1551702963540},{"_id":"themes/theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1551702963536},{"_id":"themes/theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1551702963544},{"_id":"themes/theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1551702963546},{"_id":"themes/theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1551702963542},{"_id":"themes/theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551702963555},{"_id":"themes/theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1551702963551},{"_id":"themes/theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1551702963553},{"_id":"themes/theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1551702963549},{"_id":"themes/theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1551702963558},{"_id":"themes/theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1551702963560},{"_id":"themes/theme-next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1551702963563},{"_id":"themes/theme-next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1551702963565},{"_id":"themes/theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1551702963567},{"_id":"themes/theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551702963431},{"_id":"themes/theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551702963433},{"_id":"themes/theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551702963439},{"_id":"themes/theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551702963513},{"_id":"themes/theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1551702963519},{"_id":"themes/theme-next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1551702962969},{"_id":"themes/theme-next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1551702962971},{"_id":"themes/theme-next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1551702962998},{"_id":"themes/theme-next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1551702962988},{"_id":"themes/theme-next/layout/_partials/head/head-unique.swig","hash":"4b53a0659a7e800871d8e9a4bd20f7b892a8e29b","modified":1551702962991},{"_id":"themes/theme-next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1551702963000},{"_id":"themes/theme-next/layout/_partials/head/head.swig","hash":"187316a1d565f98eac138b5ce2180b52a190028c","modified":1551702962994},{"_id":"themes/theme-next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1551702963004},{"_id":"themes/theme-next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1551702963011},{"_id":"themes/theme-next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1551702963008},{"_id":"themes/theme-next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1551702963002},{"_id":"themes/theme-next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1551702963018},{"_id":"themes/theme-next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1551702963021},{"_id":"themes/theme-next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1551702963029},{"_id":"themes/theme-next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1551702963026},{"_id":"themes/theme-next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1551702963032},{"_id":"themes/theme-next/layout/_partials/post/reward.swig","hash":"fc69f1f3950d9b81b0d474735e512053be169e8e","modified":1551702963023},{"_id":"themes/theme-next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1551702963034},{"_id":"themes/theme-next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1551702963036},{"_id":"themes/theme-next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1551702963042},{"_id":"themes/theme-next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1551702963040},{"_id":"themes/theme-next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1551702963053},{"_id":"themes/theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1551702963072},{"_id":"themes/theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1551702963076},{"_id":"themes/theme-next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1551702963074},{"_id":"themes/theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1551702963078},{"_id":"themes/theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1551702963081},{"_id":"themes/theme-next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1551702963085},{"_id":"themes/theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1551702963083},{"_id":"themes/theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"453df3add0e0531950b5ae5b0e09c6b890daf9ee","modified":1551702963087},{"_id":"themes/theme-next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1551702963089},{"_id":"themes/theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1551702963093},{"_id":"themes/theme-next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1551702963091},{"_id":"themes/theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1551702963095},{"_id":"themes/theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1551702963097},{"_id":"themes/theme-next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1551702963057},{"_id":"themes/theme-next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1551702963060},{"_id":"themes/theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1551702963099},{"_id":"themes/theme-next/layout/_scripts/schemes/muse.swig","hash":"84018384d00e4a584d613589adae6674a3060a36","modified":1551702963062},{"_id":"themes/theme-next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1551702963064},{"_id":"themes/theme-next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1551702963108},{"_id":"themes/theme-next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1551702963111},{"_id":"themes/theme-next/layout/_third-party/comments/gitalk.swig","hash":"8bcc3430241e267a06abfbb4e9ca125838bc5a71","modified":1551702963113},{"_id":"themes/theme-next/layout/_third-party/comments/gitment.swig","hash":"0149e803ed7d30163df3b3ba3f578e5584a2e4af","modified":1551702963115},{"_id":"themes/theme-next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1551702963119},{"_id":"themes/theme-next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1551702963129},{"_id":"themes/theme-next/layout/_third-party/comments/valine.swig","hash":"bd6d763c1233cd89512c323ce0992daf7f9fd0e5","modified":1551702963122},{"_id":"themes/theme-next/layout/_third-party/math/mathjax.swig","hash":"2cbc7a4df451b52da9552aafc0745de17c24c9a4","modified":1551702963134},{"_id":"themes/theme-next/layout/_third-party/comments/index.swig","hash":"bd529bf26f28745eb8ded3be7652d33d55fec8d4","modified":1551702963117},{"_id":"themes/theme-next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1551702963132},{"_id":"themes/theme-next/layout/_third-party/quicklink/quicklink.swig","hash":"58e1abe7b9a4c0260a9a3535540a8f4d0d4ff46f","modified":1551702963145},{"_id":"themes/theme-next/layout/_third-party/search/algolia-search.swig","hash":"89e41d4c298d8d70b4d1c833c7e599d089f2b3d4","modified":1551702963155},{"_id":"themes/theme-next/layout/_third-party/quicklink/index.swig","hash":"9297195791600394b1c16234b04498f50a3ad985","modified":1551702963143},{"_id":"themes/theme-next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1551702963158},{"_id":"themes/theme-next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1551702963160},{"_id":"themes/theme-next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1551702963429},{"_id":"themes/theme-next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1551702963436},{"_id":"themes/theme-next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1551702963438},{"_id":"themes/theme-next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1551702963426},{"_id":"themes/theme-next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1551702963508},{"_id":"themes/theme-next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1551702963511},{"_id":"themes/theme-next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1551702963516},{"_id":"themes/theme-next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1551702963518},{"_id":"themes/theme-next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1551702963607},{"_id":"themes/theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1551702963611},{"_id":"themes/theme-next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1551702963605},{"_id":"themes/theme-next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1551702963609},{"_id":"themes/theme-next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1551702963572},{"_id":"themes/theme-next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1551702963613},{"_id":"themes/theme-next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1551702963579},{"_id":"themes/theme-next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1551702963574},{"_id":"themes/theme-next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1551702963577},{"_id":"themes/theme-next/source/js/src/motion.js","hash":"e70f961d24e4e61a2df5bf640ab51acee8f1ffbd","modified":1551702963581},{"_id":"themes/theme-next/source/js/src/next-boot.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1551702963583},{"_id":"themes/theme-next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1551702963596},{"_id":"themes/theme-next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1551702963594},{"_id":"themes/theme-next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1551702963585},{"_id":"themes/theme-next/source/js/src/utils.js","hash":"a6efa988f4f3e16fb55e2f5a2e8e9e7612b3da3b","modified":1551702963598},{"_id":"themes/theme-next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1551702963654},{"_id":"themes/theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1551702963652},{"_id":"themes/theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1551702963656},{"_id":"themes/theme-next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1551702963637},{"_id":"themes/theme-next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1551702963449},{"_id":"themes/theme-next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1551702963454},{"_id":"themes/theme-next/source/css/_schemes/Gemini/index.styl","hash":"5f1e5d7b9d44ef3e6ad442e083753fee76d3b112","modified":1551702963445},{"_id":"themes/theme-next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1551702963455},{"_id":"themes/theme-next/source/css/_schemes/Mist/_header.styl","hash":"eecb2081ee1eef1e2152c7fea9310366e33b1eac","modified":1551702963451},{"_id":"themes/theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1551702963458},{"_id":"themes/theme-next/source/css/_schemes/Mist/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1551702963461},{"_id":"themes/theme-next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1551702963474},{"_id":"themes/theme-next/source/css/_schemes/Mist/index.styl","hash":"15254414a52f05618c54a2ac7f4635f99077ec30","modified":1551702963463},{"_id":"themes/theme-next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1551702963476},{"_id":"themes/theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1551702963479},{"_id":"themes/theme-next/source/css/_schemes/Muse/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1551702963481},{"_id":"themes/theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1551702963491},{"_id":"themes/theme-next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1551702963484},{"_id":"themes/theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"28f0444ccdc85a34ada651d8ee52479e16311167","modified":1551702963494},{"_id":"themes/theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1551702963496},{"_id":"themes/theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1551702963499},{"_id":"themes/theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a5395766dfdda81285d0cd3ddebe8e8bc924fa2a","modified":1551702963501},{"_id":"themes/theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1551702963503},{"_id":"themes/theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"bbb788b453236e5b4af7c81df8efcfc6bde08903","modified":1551702963233},{"_id":"themes/theme-next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1551702963505},{"_id":"themes/theme-next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1551702963235},{"_id":"themes/theme-next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1551702963237},{"_id":"themes/theme-next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1551702963242},{"_id":"themes/theme-next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1551702963240},{"_id":"themes/theme-next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1551702963292},{"_id":"themes/theme-next/source/css/_common/components/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1551702963362},{"_id":"themes/theme-next/source/css/_common/scaffolding/base.styl","hash":"c0e8647244e1ef106e94c3c8ac4a64bca2677159","modified":1551702963411},{"_id":"themes/theme-next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1551702963407},{"_id":"themes/theme-next/source/css/_common/scaffolding/helpers.styl","hash":"cb2c0beb69bfc56c0ed86e609bc1c35edb799b99","modified":1551702963413},{"_id":"themes/theme-next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1551702963418},{"_id":"themes/theme-next/source/css/_common/scaffolding/mobile.styl","hash":"33a74fcd6c38cea356f6d2994a19f46dcfd5d8a4","modified":1551702963416},{"_id":"themes/theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1551702963420},{"_id":"themes/theme-next/source/css/_common/scaffolding/tables.styl","hash":"c4bfce1fca9ea5d0fd991d98e08b8e771d33d731","modified":1551702963422},{"_id":"themes/theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1551702963617},{"_id":"themes/theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1551702963620},{"_id":"themes/theme-next/source/js/src/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1551702963590},{"_id":"themes/theme-next/source/js/src/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1551702963592},{"_id":"themes/theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1551702963622},{"_id":"themes/theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1551702963645},{"_id":"themes/theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1551702963642},{"_id":"themes/theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1551702963630},{"_id":"themes/theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1551702963633},{"_id":"themes/theme-next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1551702963649},{"_id":"themes/theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1551702963466},{"_id":"themes/theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1551702963470},{"_id":"themes/theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1551702963487},{"_id":"themes/theme-next/source/css/_common/components/highlight/highlight.styl","hash":"32bbf059c57677e754a918c927ac63e2d843108f","modified":1551702963269},{"_id":"themes/theme-next/source/css/_common/components/header/github-banner.styl","hash":"48bb741f6bda73b322a25a8fbe37fd3d5e0ff601","modified":1551702963250},{"_id":"themes/theme-next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1551702963266},{"_id":"themes/theme-next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1551702963273},{"_id":"themes/theme-next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1551702963253},{"_id":"themes/theme-next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1551702963255},{"_id":"themes/theme-next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1551702963258},{"_id":"themes/theme-next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1551702963262},{"_id":"themes/theme-next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1551702963260},{"_id":"themes/theme-next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1551702963246},{"_id":"themes/theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1551702963280},{"_id":"themes/theme-next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1551702963277},{"_id":"themes/theme-next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1551702963282},{"_id":"themes/theme-next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1551702963285},{"_id":"themes/theme-next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1551702963287},{"_id":"themes/theme-next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1551702963296},{"_id":"themes/theme-next/source/css/_common/components/pages/schedule.styl","hash":"db1df0186a4572844d69d0d7bb974bd120cb64d5","modified":1551702963290},{"_id":"themes/theme-next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1551702963300},{"_id":"themes/theme-next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1551702963303},{"_id":"themes/theme-next/source/css/_common/components/post/post-eof.styl","hash":"77da38898bdd99cf8fd3e0ae8cc4d2ac943bcb60","modified":1551702963305},{"_id":"themes/theme-next/source/css/_common/components/post/post-expand.styl","hash":"8703ff5ebfc76420565b92b1b873e03fb9d9cf15","modified":1551702963308},{"_id":"themes/theme-next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1551702963311},{"_id":"themes/theme-next/source/css/_common/components/post/post-meta.styl","hash":"a0e84b21ecc1f69d8d42c83630c1004d3419e3fd","modified":1551702963313},{"_id":"themes/theme-next/source/css/_common/components/post/post-reward.styl","hash":"989b7d718914b5242506947aa5767b3f2480d8f9","modified":1551702963319},{"_id":"themes/theme-next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1551702963315},{"_id":"themes/theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"2ea91d7b75966d471bf857a9f3fbf87fd01aea90","modified":1551702963317},{"_id":"themes/theme-next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1551702963325},{"_id":"themes/theme-next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1551702963322},{"_id":"themes/theme-next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1551702963328},{"_id":"themes/theme-next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1551702963332},{"_id":"themes/theme-next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1551702963335},{"_id":"themes/theme-next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1551702963330},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1551702963338},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2e26e4429c2457b8ca12555426659c2fc65a5cea","modified":1551702963341},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1551702963344},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"2994c15172bcc916c64f484ca34c0c45951e95ca","modified":1551702963346},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"7af14846bb8623ef1379575dd6f36c65589e69b4","modified":1551702963348},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"dd5f7057680faefc9306fab3172106f762c1a517","modified":1551702963353},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1551702963350},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b9a19654b6a2685b5426afac8b09cdbd80fae00c","modified":1551702963355},{"_id":"themes/theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"9da1cd122cd61896760b6f5edaed0be06c17fd6c","modified":1551702963358},{"_id":"themes/theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"64148d1d53f4a4a13dfe148fcf698486fc5c72ca","modified":1551702963360},{"_id":"themes/theme-next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1551702963368},{"_id":"themes/theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1551702963366},{"_id":"themes/theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1551702963371},{"_id":"themes/theme-next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1551702963373},{"_id":"themes/theme-next/source/css/_common/components/tags/note-modern.styl","hash":"72cabf6edfd64697e37950cc3e66fbea6ba47b66","modified":1551702963375},{"_id":"themes/theme-next/source/css/_common/components/tags/note.styl","hash":"2937e566ad0f3d9adc0865b269fdca62b7576fdd","modified":1551702963378},{"_id":"themes/theme-next/source/css/_common/components/tags/tabs.styl","hash":"30ccc107061dc23943198f087759079161ee24e9","modified":1551702963380},{"_id":"themes/theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"f26c32a0c3045e5ae826b983abc3a3c139456663","modified":1551702963386},{"_id":"themes/theme-next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1551702963383},{"_id":"themes/theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1551702963389},{"_id":"themes/theme-next/source/css/_common/components/third-party/gitment.styl","hash":"49913bb2b702d52d77528cd9378126aa67c0082c","modified":1551702963391},{"_id":"themes/theme-next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1551702963394},{"_id":"themes/theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1551702963396},{"_id":"themes/theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1551702963398},{"_id":"themes/theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"74412b0bf4ec0d28aedd2e60b27affd4d5cd1452","modified":1551702963401},{"_id":"themes/theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1551702963628},{"_id":"themes/theme-next/source/css/_common/components/third-party/third-party.styl","hash":"3529aae283864fa0f09925ee8217905632e9a930","modified":1551702963403},{"_id":"public/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1551707604898},{"_id":"public/js/src/next-boot.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1551707604898},{"_id":"source/.DS_Store","hash":"bd69b6549d79c2d080b1545192a00ef704f7508b","modified":1550733033345},{"_id":"themes/next/source/lib/theme-next-needmoreshare2-master/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1544837706000},{"_id":"themes/next/source/lib/theme-next-needmoreshare2-master/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1544837706000},{"_id":"themes/next/source/lib/theme-next-needmoreshare2-master/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1544837706000},{"_id":"themes/next/source/lib/theme-next-needmoreshare2-master/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1544837706000},{"_id":"themes/next/source/lib/theme-next-needmoreshare2-master/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1544837706000},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1544837706000},{"_id":"themes/next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1544837706000},{"_id":"themes/next/source/lib/needsharebutton/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1544837706000},{"_id":"themes/next/.DS_Store","hash":"80337706226a06b0ad0576a69addbc7db99119f9","modified":1551793206728},{"_id":"themes/next/source/.DS_Store","hash":"c852e79c7585582de6315e04d29051fd28e5d2a0","modified":1551793206725}],"Category":[{"name":"技术","_id":"cjstph3wx000288zb0gopxrjf"},{"name":"笔记","_id":"cjstph3xn000r88zb6v8zxr4u"},{"name":"日志","_id":"cjstph3y1001188zbfyy5cjuh"},{"name":"随笔","_id":"cjstph3y7001b88zbk6k6akg8"},{"name":"软件工程","_id":"cjstph3yd001o88zb4sbnv5p5"}],"Data":[],"Page":[],"Post":[{"title":"笔记：JavaScript事件处理","date":"2017-01-26T16:00:00.000Z","update":8,"_content":"\n\n## JavaScript --- 事件处理：\n\n### 笔记摘要\n> 参考书籍：\n> 《Modern JavaScript》(Larry Ullman 著);\n> 《JavaScript高级程序设计》 (Nicholas C Zakas著).\n\n\n\n---\n\n### 一、 事件处理：\n#### 1.嵌入式事件处理器（强烈不建议）:\n```\n\t\t/*比如*/\n        <form action= \"#\" method = \"post\" onsubmit = \"validataForm();\">\n        /*或者*/\n     \t<a href = \"somepage.html\" onclick = \"doSomething();\">Some link</a> \n   \n```\n\n#### 2.传统事件处理方法(不建议)： \n``` JavaScript\n\t\t/* 以下传统方法不建议使用 */\n\t\twindow.onload = init; //易用，可靠，属性名必须全小写。\n\t\t/* 或者 */\n\t\twindow.onload = function(){ //匿名函数方法\n\t\t//Do whatever.\n\t\t}\n```\n> 原因：\n\t\t1. 一次只能指定一个时间处理器；\n\t\t2. 较后的函数会覆盖较前的；\n\t\t\n\t \n``` javascript\ndocument.getElementById('theForm').onsubmit = progress;\ndocument.getElementById('theForm').onsubmit = calculate; // 呃!有问题.\n```\n\n\t\n``` javascript\n\t//缓解方法\n\tdocument.getElementById('theForm').onsubmit = function(){\n\t\tprogress();  //当然你也可以这样解决，但是这样的代码很丑陋。\n\t\tcalculate();\n\t}\n```\n\t \n\n#### 3.W3C事件处理(建议)\n1. 接受三个参数：事件类型，事件发生时调用的函数，表示事件阶段的布尔值。\n``` \n\taddEventListener('load', init , false);  //可以为相同元素添加多个事件监听器；`\n\tremoveEventListener()('load', process , false);\n```\t\n\n2. IE<9的事件处理(事件名称前缀多了\"on\")\n\n\t\t1. attachEvent('onload' , init);\n\t\t2. detachEvent('onload' , init);\n3. 创建一个事件分配器\n\t\n\t``` javascript\n\tfunction addEvent( obj , type , fn){\n\t     if(obj && objEventListener){          //W3c\n\t          obj.addEventListener(type, fn , false);\n\t     }else if(obj && obj.attachEvent){     //IE<9\n\t          obj.attachEvent(\"on\" + type, fn);\n\t     }\n\t} \n\t```\n\t\n#### 4. **范例：创建一个实用程序库**\n\n``` javascript\n    //所有函数都定义在全局对象U中，避免多个新函数污染全局命名空间。\n    \n    //新对象U （Utility的缩写）\n    var U = {\n          //定义$()方法\n          $: function(id){\n               'use strict';\n               if (typeof id == 'string'){\n                    return document.getElementById(id);\n               }\n          },\n\t\t  //定义setText 方法，两个参数：要更新的元素id和消息本身\n          setText: function(id, message){\n          \t'use strict';\n          \tif( (typeof id == 'string') && (typeof message == 'string')){\n          \t\tvar output = this.$(id);\n          \t\tif (!output) {return false};\t//获取id的元素失败\n          \t\tif(output.textContext !== undefined){\n          \t\t\toutput.textContext = message;\n          \t\t}else{\n          \t\t\toutput.innerText = message;\n          \t\t}\n          \t\treturn true;\n          \t}\t//End of main IF.\n          }, \t//End of setText() function.\n          \n          //封装一个‘添加事件监听器’ 函数\n          addEvent: function( obj , type , fn){\n          \t\t'use strict';\n                if(obj && obj.removeEventListener){\n                \tobj.addEventListener(type, fn, false);\n                }else if (obj && obj.detachEvent){\n                \tobj.attachEvent('on' + type , fn);\n                }\n          },   \t//End of addEvent() function\n          \n          //封装一个‘移除事件监听器’函数\n          removeEvent: function( obj , type , fn){\n          \t\t'use strict';\n                if(obj && obj.removeEventListener){\n                \tobj.removeEventListener(type, fn, false);\n                }else if (obj && obj.detachEvent){\n                \tobj.detachEvent('on' + type , fn);\n                }\n          }   \t//End of removeEvent() function\n     };\t//End of U declaration.\n```\n---\n### 二、事件类型\n        \n**事件类型分为4类：**\n - **输入设备**\n - **键盘**\n - **浏览器**\n - **表单** \n\n\n#### 1.输入设备事件\n##### 1. 输入按钮事件：\n\t\t1. click 事件；\n\t\t2. dblclick 事件；\n\t\t3. contextmenu 事件(罕见)；\n##### 2. 输入移动事件：\n\t\t1.  mouseout 鼠标移出;\n\t\t2.  mouseover 鼠标移过;\n\t\t3.  mousemove 鼠标移动（持续监视鼠标，消耗性能）;\n##### 3. 键盘事件：\n\t\t1.   keydown (按下);\n\t\t2.   keyup (释放); \n\t\t3.   keypress (按键，前二者组合);\n##### 4. 浏览器事件：\n\t\t1. load (加载完成);\n\t\t2. unload (卸载);\n\t\t3. resize (改变浏览器窗口大小);\n\t\t4. scroll (滚动事件);\n\t\t5. copy;\n\t\t6. cut;\n\t\t7. paste;  \n##### 5. 表单事件：\n   -- **reset**：表单重置(点击重置html按钮)时触发，用户很少有重置表单的需要；若要使用此事件，可以添加监视：\t \n\t\t\n\t\t\t\t\n\t\t\t```\n\t\t\taddEvent(document.getElementById('theForm'), 'reset' , function(){\n\t\t\t\treturn confirm(\"您确定想要重置表单吗？\");\t\t\n\t\t\t});\n\t\t\t         \n\t\t\t```\n![重置表单提醒](http://img.blog.csdn.net/20161210172136724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\t\t  \n-- **select**: 文本输入域和文本区域的文本内容被选中时；\n\n-- **change**: 元素值变化时；\n\n-- **focus**: 单击或Tab键到文本输入域时；\n\n-- **blur**: 光标或选择项的移动时；\n\n---\n\n### 三、事件可访问性(Accessibility)\n\n#### 1. 配对事件(Pairing events):\n> 使用同一个函数处理相同元素的类似事件。\n\n#### 2. 可访问性(Accessibility):\n在移动设备和其他非标准浏览器上，对于不使用输入设备的浏览器，mouseover和mouseout事件毫无意义，因为它们永远不会发生。\n例如：\n``` html5\n\t <a href = \"somepage.html\" id = \"link\" > Some Text </a>\n\t <script>\n\t\taddEvent(document.getElementById('link'), 'mouseover',handleLinkMouseOver);\n\t </script>\n```\n> 上述代码中，事件只能通过鼠标触发。\n> 但是还是有缓解方法。\n> 如果浏览器仅由键盘控制，那么它是可以监视**focus**事件的(Tab键)。\n> 因此，**增强可访问性**的事件处理方法是创建两个事件监听器：\n``` html5\n\t <a href = \"somepage.html\" id = \"link\">some Text</a>\n\t <script>\n\t //配对事件\n\t addEvent(document.getElementById('link'), 'mouseover', doSomething);\n\t addEvent(document.getElementById('link'), 'focus', doSomething);\n\t </script>\n```\n\n#### 3.事件和渐进增强\n\n - 渐进增强的真正原则： \n\t > 使用JavaScript( 和CSS )改进**基本功能**，使得用户不管使用何种设备，都不会被抛弃(忽略)。\n\t\n\t- 只有在开发者有意识的**忽略**一些用户时，JavaScript才是有必要的。\n\t- 但是在很多情况下，**JavaScript是没有必要的**：比如表单的提交应该在有无JavaScript的情况下都能进行(在服务端都能验证)。\n\t- 将**渐进增强的思想**应用到事件处理中，向已经有默认事件行为的元素添加事件时必须小心。例如：表单提交时，表单的数据发送给服务器端脚本。为表单添加提交事件，为其添加其他功能，在逻辑上是毫无意义的。\n\n---\n\n### 四、高级事件处理\n\n - 引用事件\n - 事件属性\n - 检查按键\n - 阻止默认事件行为\n - 事件的两个阶段：捕捉和冒泡\n - 委派事件处理 \n\n#### 1.引用事件\n> 当事件处理程序用于多个元素上的相同事件（或者相同元素上的不同事件）时，事件处理程序就必须考虑其灵活性。\n\n``` javascript\n\tfunction someEventHandler(e){  //e就是引用事件，代表发生的事件\n\t\tif(typeof e == \"undefined\"){\n\t\t\te = window.event;      //考虑IE8及更早\n\t\t}\n\t};\n```\n\n#### 2.事件属性\n> 事件对象通过各种属性提供信息，但是不同浏览器支持的属性有所差异。(这里不深究，后续补充。)\n\n#### 3.检查按键\n> 当键盘事件触发时，可以通过事件对象确定按下的具体键。这个问题有点复杂，在这里稍微带过。\n\n示例代码：以一致的方式获得字符：\n\t\n\n```\nvar charCode = e.which || e.keyCode;\t//IE中不支持which\n// 或者更准确的\nvar charCode = (typeof e.which == 'number')?e.which : e.keyCode;\n\n//获得与字符代码相对应的实际字符:\nString.fromCharCode(charcode);\n```\n\n#### 4.阻止事件默认行为\n> 一些与基本浏览器相关的JS事件： 单击链接、提交表单等。在事件处理器存在时，事件发生会调用对应的函数，**在函数运行之后，浏览器仍然继续进行它通常应该进行的事件处理。**\n> 例如：提交表单时，提交事件处理器可能执行客户端验证。**如果发生了错误，应该阻止表单提交到服务器端脚本，让客户有机会改正错误。**\n> 方法：**从事件处理器中返回false**。\n\n```\n// 仅在传统方法注册事件处理器时可靠工作，不建议。\nfunction handleForm(){\n\t//Do whatever.\n\tif(errors){\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}\n\n//以下是跨浏览器的兼容方法，调用事件对象的preventDefault();\nif(typeof e == 'undefined') {e = window.event;}\nif(e.preventDefault){\n\te.preventDefault();\n}else {\n\te.returnValue = false;\n}\nreturn false;\t//额外的预防措施。\n\n```\n\n> 使用PreventDefault()或设置returnValue的另一个好处就是：**可以在函数开始时执行，使后续的函数代码仍然运行。**\n#### 5.事件的两个阶段：捕捉和冒泡\n\n##### **示例**：\n\t\n\n``` html5\n\t<div>\n\t\t<h1>This is a title</h1>\n\t\t<p>This is a paragraph.\n\t\t\t<a href = \"#\" id = \"link\">This is a link.</a>\n\t\t</p>\n\t</div>\n\t<script>\n\t\t// U.$()方法与jquery获取DOM节点方法一致，只是在前文定义了一个新对象U.\n\t\taddEvent(U.$('link'), 'mouseover' , doSomething);\n\t</script>\n\t\n```\n\n**在上述代码中，包含关系：a< p< div< html< Document< window。当鼠标悬停在链接之上，mouseover事件实际上经历了几个步骤，在两个不同的阶段到达和离开目标（链接）。\n\n![这里写图片描述](http://img.blog.csdn.net/20161211094137004?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n> 注意，事件传播一共有**三个阶段**：1.捕获阶段； 2.调用事件处理程序； 3.冒泡阶段。\n\n1.捕捉阶段：\n\t\n> 当你使用事件捕获时，由外向内，父级元素先触发，子级元素后触发；即div先触发，p后触发。\n\n2.事件处理：\n\n> 调用查找到的事件处理程序；\n\n3.冒泡阶段：\n\n> 事件冒泡\n当你使用事件冒泡时，由内向外，子级元素先触发，父级元素后触发；即p先触发，div后触发。\n\n - W3C模型\n\n> 在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。然后，再从事件源往上进行事件冒泡，直到到达document。\n\n程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函数，它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。\n\n```\nele.addEventListener('click',doSomething2,true)\n```\n\n> true=捕获 false=冒泡\n\n - 传统绑定事件方式\n\n> 在一个支持W3C DOM的浏览器中，像这样一般的绑定事件方式，是采用的事件冒泡方式。\n\n```\nele.onclick = doSomething2\n```\n\n - IE浏览器\n\n> 如上面所说，IE只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。\n\n```\nele.attachEvent(\"onclick\", doSomething2);\n```\n\n附：事件冒泡（的过程）：事件从发生的目标（event.srcElement||event.target）开始，沿着文档逐层向上冒泡，到document为止。\n\n - 事件的传播是可以阻止的：\n• 在W3C中，使用stopPropagation（）方法\n• 在IE下设置cancelBubble = true；\n\n> 在捕获的过程中`stopPropagation（）;`后，后面的冒泡过程也不会发生了\n\n - 阻止事件的默认行为\n\t - 例如click后的跳转:\n• 在W3C中，使用preventDefault（）方法；\n• 在IE下设置window.event.returnValue = false;\n\n终于写完了，花了一天时间总结了\"事件处理\"，文末部分参考了网友的经验。\n\n九月份看的《JS高级程序设计》，当时云里雾里，后来敲了很多代码半懂不懂，现在写完这篇博客才算明白过来。\n\n在写的时候翻阅《JS权威指南》，里面有更深入的细节，有一部分事件类型已经被HTML5标准化。\n\n后续再补充。^_^","source":"_posts/2017-01-27 JavaScript Events 笔记.md","raw":"---\ntitle: 笔记：JavaScript事件处理\ncategories: 技术\ndate: 2017-01-27\nupdate: 8\ntags: [JavaScript,前端]\n---\n\n\n## JavaScript --- 事件处理：\n\n### 笔记摘要\n> 参考书籍：\n> 《Modern JavaScript》(Larry Ullman 著);\n> 《JavaScript高级程序设计》 (Nicholas C Zakas著).\n\n\n\n---\n\n### 一、 事件处理：\n#### 1.嵌入式事件处理器（强烈不建议）:\n```\n\t\t/*比如*/\n        <form action= \"#\" method = \"post\" onsubmit = \"validataForm();\">\n        /*或者*/\n     \t<a href = \"somepage.html\" onclick = \"doSomething();\">Some link</a> \n   \n```\n\n#### 2.传统事件处理方法(不建议)： \n``` JavaScript\n\t\t/* 以下传统方法不建议使用 */\n\t\twindow.onload = init; //易用，可靠，属性名必须全小写。\n\t\t/* 或者 */\n\t\twindow.onload = function(){ //匿名函数方法\n\t\t//Do whatever.\n\t\t}\n```\n> 原因：\n\t\t1. 一次只能指定一个时间处理器；\n\t\t2. 较后的函数会覆盖较前的；\n\t\t\n\t \n``` javascript\ndocument.getElementById('theForm').onsubmit = progress;\ndocument.getElementById('theForm').onsubmit = calculate; // 呃!有问题.\n```\n\n\t\n``` javascript\n\t//缓解方法\n\tdocument.getElementById('theForm').onsubmit = function(){\n\t\tprogress();  //当然你也可以这样解决，但是这样的代码很丑陋。\n\t\tcalculate();\n\t}\n```\n\t \n\n#### 3.W3C事件处理(建议)\n1. 接受三个参数：事件类型，事件发生时调用的函数，表示事件阶段的布尔值。\n``` \n\taddEventListener('load', init , false);  //可以为相同元素添加多个事件监听器；`\n\tremoveEventListener()('load', process , false);\n```\t\n\n2. IE<9的事件处理(事件名称前缀多了\"on\")\n\n\t\t1. attachEvent('onload' , init);\n\t\t2. detachEvent('onload' , init);\n3. 创建一个事件分配器\n\t\n\t``` javascript\n\tfunction addEvent( obj , type , fn){\n\t     if(obj && objEventListener){          //W3c\n\t          obj.addEventListener(type, fn , false);\n\t     }else if(obj && obj.attachEvent){     //IE<9\n\t          obj.attachEvent(\"on\" + type, fn);\n\t     }\n\t} \n\t```\n\t\n#### 4. **范例：创建一个实用程序库**\n\n``` javascript\n    //所有函数都定义在全局对象U中，避免多个新函数污染全局命名空间。\n    \n    //新对象U （Utility的缩写）\n    var U = {\n          //定义$()方法\n          $: function(id){\n               'use strict';\n               if (typeof id == 'string'){\n                    return document.getElementById(id);\n               }\n          },\n\t\t  //定义setText 方法，两个参数：要更新的元素id和消息本身\n          setText: function(id, message){\n          \t'use strict';\n          \tif( (typeof id == 'string') && (typeof message == 'string')){\n          \t\tvar output = this.$(id);\n          \t\tif (!output) {return false};\t//获取id的元素失败\n          \t\tif(output.textContext !== undefined){\n          \t\t\toutput.textContext = message;\n          \t\t}else{\n          \t\t\toutput.innerText = message;\n          \t\t}\n          \t\treturn true;\n          \t}\t//End of main IF.\n          }, \t//End of setText() function.\n          \n          //封装一个‘添加事件监听器’ 函数\n          addEvent: function( obj , type , fn){\n          \t\t'use strict';\n                if(obj && obj.removeEventListener){\n                \tobj.addEventListener(type, fn, false);\n                }else if (obj && obj.detachEvent){\n                \tobj.attachEvent('on' + type , fn);\n                }\n          },   \t//End of addEvent() function\n          \n          //封装一个‘移除事件监听器’函数\n          removeEvent: function( obj , type , fn){\n          \t\t'use strict';\n                if(obj && obj.removeEventListener){\n                \tobj.removeEventListener(type, fn, false);\n                }else if (obj && obj.detachEvent){\n                \tobj.detachEvent('on' + type , fn);\n                }\n          }   \t//End of removeEvent() function\n     };\t//End of U declaration.\n```\n---\n### 二、事件类型\n        \n**事件类型分为4类：**\n - **输入设备**\n - **键盘**\n - **浏览器**\n - **表单** \n\n\n#### 1.输入设备事件\n##### 1. 输入按钮事件：\n\t\t1. click 事件；\n\t\t2. dblclick 事件；\n\t\t3. contextmenu 事件(罕见)；\n##### 2. 输入移动事件：\n\t\t1.  mouseout 鼠标移出;\n\t\t2.  mouseover 鼠标移过;\n\t\t3.  mousemove 鼠标移动（持续监视鼠标，消耗性能）;\n##### 3. 键盘事件：\n\t\t1.   keydown (按下);\n\t\t2.   keyup (释放); \n\t\t3.   keypress (按键，前二者组合);\n##### 4. 浏览器事件：\n\t\t1. load (加载完成);\n\t\t2. unload (卸载);\n\t\t3. resize (改变浏览器窗口大小);\n\t\t4. scroll (滚动事件);\n\t\t5. copy;\n\t\t6. cut;\n\t\t7. paste;  \n##### 5. 表单事件：\n   -- **reset**：表单重置(点击重置html按钮)时触发，用户很少有重置表单的需要；若要使用此事件，可以添加监视：\t \n\t\t\n\t\t\t\t\n\t\t\t```\n\t\t\taddEvent(document.getElementById('theForm'), 'reset' , function(){\n\t\t\t\treturn confirm(\"您确定想要重置表单吗？\");\t\t\n\t\t\t});\n\t\t\t         \n\t\t\t```\n![重置表单提醒](http://img.blog.csdn.net/20161210172136724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\t\t  \n-- **select**: 文本输入域和文本区域的文本内容被选中时；\n\n-- **change**: 元素值变化时；\n\n-- **focus**: 单击或Tab键到文本输入域时；\n\n-- **blur**: 光标或选择项的移动时；\n\n---\n\n### 三、事件可访问性(Accessibility)\n\n#### 1. 配对事件(Pairing events):\n> 使用同一个函数处理相同元素的类似事件。\n\n#### 2. 可访问性(Accessibility):\n在移动设备和其他非标准浏览器上，对于不使用输入设备的浏览器，mouseover和mouseout事件毫无意义，因为它们永远不会发生。\n例如：\n``` html5\n\t <a href = \"somepage.html\" id = \"link\" > Some Text </a>\n\t <script>\n\t\taddEvent(document.getElementById('link'), 'mouseover',handleLinkMouseOver);\n\t </script>\n```\n> 上述代码中，事件只能通过鼠标触发。\n> 但是还是有缓解方法。\n> 如果浏览器仅由键盘控制，那么它是可以监视**focus**事件的(Tab键)。\n> 因此，**增强可访问性**的事件处理方法是创建两个事件监听器：\n``` html5\n\t <a href = \"somepage.html\" id = \"link\">some Text</a>\n\t <script>\n\t //配对事件\n\t addEvent(document.getElementById('link'), 'mouseover', doSomething);\n\t addEvent(document.getElementById('link'), 'focus', doSomething);\n\t </script>\n```\n\n#### 3.事件和渐进增强\n\n - 渐进增强的真正原则： \n\t > 使用JavaScript( 和CSS )改进**基本功能**，使得用户不管使用何种设备，都不会被抛弃(忽略)。\n\t\n\t- 只有在开发者有意识的**忽略**一些用户时，JavaScript才是有必要的。\n\t- 但是在很多情况下，**JavaScript是没有必要的**：比如表单的提交应该在有无JavaScript的情况下都能进行(在服务端都能验证)。\n\t- 将**渐进增强的思想**应用到事件处理中，向已经有默认事件行为的元素添加事件时必须小心。例如：表单提交时，表单的数据发送给服务器端脚本。为表单添加提交事件，为其添加其他功能，在逻辑上是毫无意义的。\n\n---\n\n### 四、高级事件处理\n\n - 引用事件\n - 事件属性\n - 检查按键\n - 阻止默认事件行为\n - 事件的两个阶段：捕捉和冒泡\n - 委派事件处理 \n\n#### 1.引用事件\n> 当事件处理程序用于多个元素上的相同事件（或者相同元素上的不同事件）时，事件处理程序就必须考虑其灵活性。\n\n``` javascript\n\tfunction someEventHandler(e){  //e就是引用事件，代表发生的事件\n\t\tif(typeof e == \"undefined\"){\n\t\t\te = window.event;      //考虑IE8及更早\n\t\t}\n\t};\n```\n\n#### 2.事件属性\n> 事件对象通过各种属性提供信息，但是不同浏览器支持的属性有所差异。(这里不深究，后续补充。)\n\n#### 3.检查按键\n> 当键盘事件触发时，可以通过事件对象确定按下的具体键。这个问题有点复杂，在这里稍微带过。\n\n示例代码：以一致的方式获得字符：\n\t\n\n```\nvar charCode = e.which || e.keyCode;\t//IE中不支持which\n// 或者更准确的\nvar charCode = (typeof e.which == 'number')?e.which : e.keyCode;\n\n//获得与字符代码相对应的实际字符:\nString.fromCharCode(charcode);\n```\n\n#### 4.阻止事件默认行为\n> 一些与基本浏览器相关的JS事件： 单击链接、提交表单等。在事件处理器存在时，事件发生会调用对应的函数，**在函数运行之后，浏览器仍然继续进行它通常应该进行的事件处理。**\n> 例如：提交表单时，提交事件处理器可能执行客户端验证。**如果发生了错误，应该阻止表单提交到服务器端脚本，让客户有机会改正错误。**\n> 方法：**从事件处理器中返回false**。\n\n```\n// 仅在传统方法注册事件处理器时可靠工作，不建议。\nfunction handleForm(){\n\t//Do whatever.\n\tif(errors){\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}\n\n//以下是跨浏览器的兼容方法，调用事件对象的preventDefault();\nif(typeof e == 'undefined') {e = window.event;}\nif(e.preventDefault){\n\te.preventDefault();\n}else {\n\te.returnValue = false;\n}\nreturn false;\t//额外的预防措施。\n\n```\n\n> 使用PreventDefault()或设置returnValue的另一个好处就是：**可以在函数开始时执行，使后续的函数代码仍然运行。**\n#### 5.事件的两个阶段：捕捉和冒泡\n\n##### **示例**：\n\t\n\n``` html5\n\t<div>\n\t\t<h1>This is a title</h1>\n\t\t<p>This is a paragraph.\n\t\t\t<a href = \"#\" id = \"link\">This is a link.</a>\n\t\t</p>\n\t</div>\n\t<script>\n\t\t// U.$()方法与jquery获取DOM节点方法一致，只是在前文定义了一个新对象U.\n\t\taddEvent(U.$('link'), 'mouseover' , doSomething);\n\t</script>\n\t\n```\n\n**在上述代码中，包含关系：a< p< div< html< Document< window。当鼠标悬停在链接之上，mouseover事件实际上经历了几个步骤，在两个不同的阶段到达和离开目标（链接）。\n\n![这里写图片描述](http://img.blog.csdn.net/20161211094137004?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n> 注意，事件传播一共有**三个阶段**：1.捕获阶段； 2.调用事件处理程序； 3.冒泡阶段。\n\n1.捕捉阶段：\n\t\n> 当你使用事件捕获时，由外向内，父级元素先触发，子级元素后触发；即div先触发，p后触发。\n\n2.事件处理：\n\n> 调用查找到的事件处理程序；\n\n3.冒泡阶段：\n\n> 事件冒泡\n当你使用事件冒泡时，由内向外，子级元素先触发，父级元素后触发；即p先触发，div后触发。\n\n - W3C模型\n\n> 在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。然后，再从事件源往上进行事件冒泡，直到到达document。\n\n程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函数，它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。\n\n```\nele.addEventListener('click',doSomething2,true)\n```\n\n> true=捕获 false=冒泡\n\n - 传统绑定事件方式\n\n> 在一个支持W3C DOM的浏览器中，像这样一般的绑定事件方式，是采用的事件冒泡方式。\n\n```\nele.onclick = doSomething2\n```\n\n - IE浏览器\n\n> 如上面所说，IE只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。\n\n```\nele.attachEvent(\"onclick\", doSomething2);\n```\n\n附：事件冒泡（的过程）：事件从发生的目标（event.srcElement||event.target）开始，沿着文档逐层向上冒泡，到document为止。\n\n - 事件的传播是可以阻止的：\n• 在W3C中，使用stopPropagation（）方法\n• 在IE下设置cancelBubble = true；\n\n> 在捕获的过程中`stopPropagation（）;`后，后面的冒泡过程也不会发生了\n\n - 阻止事件的默认行为\n\t - 例如click后的跳转:\n• 在W3C中，使用preventDefault（）方法；\n• 在IE下设置window.event.returnValue = false;\n\n终于写完了，花了一天时间总结了\"事件处理\"，文末部分参考了网友的经验。\n\n九月份看的《JS高级程序设计》，当时云里雾里，后来敲了很多代码半懂不懂，现在写完这篇博客才算明白过来。\n\n在写的时候翻阅《JS权威指南》，里面有更深入的细节，有一部分事件类型已经被HTML5标准化。\n\n后续再补充。^_^","slug":"2017-01-27 JavaScript Events 笔记","published":1,"updated":"2019-02-20T13:32:22.927Z","_id":"cjstph3wp000088zb5sz6ypv6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"JavaScript-—-事件处理：\"><a href=\"#JavaScript-—-事件处理：\" class=\"headerlink\" title=\"JavaScript — 事件处理：\"></a>JavaScript — 事件处理：</h2><h3 id=\"笔记摘要\"><a href=\"#笔记摘要\" class=\"headerlink\" title=\"笔记摘要\"></a>笔记摘要</h3><blockquote>\n<p>参考书籍：<br>《Modern JavaScript》(Larry Ullman 著);<br>《JavaScript高级程序设计》 (Nicholas C Zakas著).</p>\n</blockquote>\n<hr>\n<h3 id=\"一、-事件处理：\"><a href=\"#一、-事件处理：\" class=\"headerlink\" title=\"一、 事件处理：\"></a>一、 事件处理：</h3><h4 id=\"1-嵌入式事件处理器（强烈不建议）\"><a href=\"#1-嵌入式事件处理器（强烈不建议）\" class=\"headerlink\" title=\"1.嵌入式事件处理器（强烈不建议）:\"></a>1.嵌入式事件处理器（强烈不建议）:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*比如*/</span><br><span class=\"line\">      &lt;form action= &quot;#&quot; method = &quot;post&quot; onsubmit = &quot;validataForm();&quot;&gt;</span><br><span class=\"line\">      /*或者*/</span><br><span class=\"line\">   \t&lt;a href = &quot;somepage.html&quot; onclick = &quot;doSomething();&quot;&gt;Some link&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-传统事件处理方法-不建议-：\"><a href=\"#2-传统事件处理方法-不建议-：\" class=\"headerlink\" title=\"2.传统事件处理方法(不建议)：\"></a>2.传统事件处理方法(不建议)：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 以下传统方法不建议使用 */</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = init; <span class=\"comment\">//易用，可靠，属性名必须全小写。</span></span><br><span class=\"line\"><span class=\"comment\">/* 或者 */</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//匿名函数方法</span></span><br><span class=\"line\"><span class=\"comment\">//Do whatever.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原因：</p>\n<pre><code>1. 一次只能指定一个时间处理器；\n2. 较后的函数会覆盖较前的；\n</code></pre></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'theForm'</span>).onsubmit = progress;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'theForm'</span>).onsubmit = calculate; <span class=\"comment\">// 呃!有问题.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//缓解方法</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'theForm'</span>).onsubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tprogress();  <span class=\"comment\">//当然你也可以这样解决，但是这样的代码很丑陋。</span></span><br><span class=\"line\">\tcalculate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-W3C事件处理-建议\"><a href=\"#3-W3C事件处理-建议\" class=\"headerlink\" title=\"3.W3C事件处理(建议)\"></a>3.W3C事件处理(建议)</h4><ol>\n<li>接受三个参数：事件类型，事件发生时调用的函数，表示事件阶段的布尔值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\taddEventListener(&apos;load&apos;, init , false);  //可以为相同元素添加多个事件监听器；`</span><br><span class=\"line\">\tremoveEventListener()(&apos;load&apos;, process , false);</span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">2. IE&lt;9的事件处理(事件名称前缀多了&quot;on&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t1. attachEvent(&apos;onload&apos; , init);</span><br><span class=\"line\">\t\t2. detachEvent(&apos;onload&apos; , init);</span><br><span class=\"line\">3. 创建一个事件分配器</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t``` javascript</span><br><span class=\"line\">\tfunction addEvent( obj , type , fn)&#123;</span><br><span class=\"line\">\t     if(obj &amp;&amp; objEventListener)&#123;          //W3c</span><br><span class=\"line\">\t          obj.addEventListener(type, fn , false);</span><br><span class=\"line\">\t     &#125;else if(obj &amp;&amp; obj.attachEvent)&#123;     //IE&lt;9</span><br><span class=\"line\">\t          obj.attachEvent(&quot;on&quot; + type, fn);</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"4-范例：创建一个实用程序库\"><a href=\"#4-范例：创建一个实用程序库\" class=\"headerlink\" title=\"4. 范例：创建一个实用程序库\"></a>4. <strong>范例：创建一个实用程序库</strong></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有函数都定义在全局对象U中，避免多个新函数污染全局命名空间。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新对象U （Utility的缩写）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> U = &#123;</span><br><span class=\"line\">      <span class=\"comment\">//定义$()方法</span></span><br><span class=\"line\">      $: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">           'use strict'</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id == <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"comment\">//定义setText 方法，两个参数：要更新的元素id和消息本身</span></span><br><span class=\"line\">      setText: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, message</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      \t'use strict'</span>;</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>( (<span class=\"keyword\">typeof</span> id == <span class=\"string\">'string'</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> message == <span class=\"string\">'string'</span>))&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">var</span> output = <span class=\"keyword\">this</span>.$(id);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span> (!output) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125;;\t<span class=\"comment\">//获取id的元素失败</span></span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(output.textContext !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">      \t\t\toutput.textContext = message;</span><br><span class=\"line\">      \t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      \t\t\toutput.innerText = message;</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      \t&#125;\t<span class=\"comment\">//End of main IF.</span></span><br><span class=\"line\">      &#125;, \t<span class=\"comment\">//End of setText() function.</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//封装一个‘添加事件监听器’ 函数</span></span><br><span class=\"line\">      addEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj , type , fn</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      \t\t'use strict'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj &amp;&amp; obj.removeEventListener)&#123;</span><br><span class=\"line\">            \tobj.addEventListener(type, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj &amp;&amp; obj.detachEvent)&#123;</span><br><span class=\"line\">            \tobj.attachEvent(<span class=\"string\">'on'</span> + type , fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;,   \t<span class=\"comment\">//End of addEvent() function</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//封装一个‘移除事件监听器’函数</span></span><br><span class=\"line\">      removeEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj , type , fn</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      \t\t'use strict'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj &amp;&amp; obj.removeEventListener)&#123;</span><br><span class=\"line\">            \tobj.removeEventListener(type, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj &amp;&amp; obj.detachEvent)&#123;</span><br><span class=\"line\">            \tobj.detachEvent(<span class=\"string\">'on'</span> + type , fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;   \t<span class=\"comment\">//End of removeEvent() function</span></span><br><span class=\"line\"> &#125;;\t<span class=\"comment\">//End of U declaration.</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"二、事件类型\"><a href=\"#二、事件类型\" class=\"headerlink\" title=\"二、事件类型\"></a>二、事件类型</h3><p><strong>事件类型分为4类：</strong></p>\n<ul>\n<li><strong>输入设备</strong></li>\n<li><strong>键盘</strong></li>\n<li><strong>浏览器</strong></li>\n<li><strong>表单</strong> </li>\n</ul>\n<h4 id=\"1-输入设备事件\"><a href=\"#1-输入设备事件\" class=\"headerlink\" title=\"1.输入设备事件\"></a>1.输入设备事件</h4><h5 id=\"1-输入按钮事件：\"><a href=\"#1-输入按钮事件：\" class=\"headerlink\" title=\"1. 输入按钮事件：\"></a>1. 输入按钮事件：</h5><pre><code>1. click 事件；\n2. dblclick 事件；\n3. contextmenu 事件(罕见)；\n</code></pre><h5 id=\"2-输入移动事件：\"><a href=\"#2-输入移动事件：\" class=\"headerlink\" title=\"2. 输入移动事件：\"></a>2. 输入移动事件：</h5><pre><code>1.  mouseout 鼠标移出;\n2.  mouseover 鼠标移过;\n3.  mousemove 鼠标移动（持续监视鼠标，消耗性能）;\n</code></pre><h5 id=\"3-键盘事件：\"><a href=\"#3-键盘事件：\" class=\"headerlink\" title=\"3. 键盘事件：\"></a>3. 键盘事件：</h5><pre><code>1.   keydown (按下);\n2.   keyup (释放); \n3.   keypress (按键，前二者组合);\n</code></pre><h5 id=\"4-浏览器事件：\"><a href=\"#4-浏览器事件：\" class=\"headerlink\" title=\"4. 浏览器事件：\"></a>4. 浏览器事件：</h5><pre><code>1. load (加载完成);\n2. unload (卸载);\n3. resize (改变浏览器窗口大小);\n4. scroll (滚动事件);\n5. copy;\n6. cut;\n7. paste;  \n</code></pre><h5 id=\"5-表单事件：\"><a href=\"#5-表单事件：\" class=\"headerlink\" title=\"5. 表单事件：\"></a>5. 表单事件：</h5><p>   – <strong>reset</strong>：表单重置(点击重置html按钮)时触发，用户很少有重置表单的需要；若要使用此事件，可以添加监视：     </p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEvent(document.getElementById(&apos;theForm&apos;), &apos;reset&apos; , function()&#123;</span><br><span class=\"line\">\treturn confirm(&quot;您确定想要重置表单吗？&quot;);\t\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</code></pre><p><img src=\"http://img.blog.csdn.net/20161210172136724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"重置表单提醒\"></p>\n<p>– <strong>select</strong>: 文本输入域和文本区域的文本内容被选中时；</p>\n<p>– <strong>change</strong>: 元素值变化时；</p>\n<p>– <strong>focus</strong>: 单击或Tab键到文本输入域时；</p>\n<p>– <strong>blur</strong>: 光标或选择项的移动时；</p>\n<hr>\n<h3 id=\"三、事件可访问性-Accessibility\"><a href=\"#三、事件可访问性-Accessibility\" class=\"headerlink\" title=\"三、事件可访问性(Accessibility)\"></a>三、事件可访问性(Accessibility)</h3><h4 id=\"1-配对事件-Pairing-events\"><a href=\"#1-配对事件-Pairing-events\" class=\"headerlink\" title=\"1. 配对事件(Pairing events):\"></a>1. 配对事件(Pairing events):</h4><blockquote>\n<p>使用同一个函数处理相同元素的类似事件。</p>\n</blockquote>\n<h4 id=\"2-可访问性-Accessibility\"><a href=\"#2-可访问性-Accessibility\" class=\"headerlink\" title=\"2. 可访问性(Accessibility):\"></a>2. 可访问性(Accessibility):</h4><p>在移动设备和其他非标准浏览器上，对于不使用输入设备的浏览器，mouseover和mouseout事件毫无意义，因为它们永远不会发生。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href = &quot;somepage.html&quot; id = &quot;link&quot; &gt; Some Text &lt;/a&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">addEvent(document.getElementById(&apos;link&apos;), &apos;mouseover&apos;,handleLinkMouseOver);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上述代码中，事件只能通过鼠标触发。<br>但是还是有缓解方法。<br>如果浏览器仅由键盘控制，那么它是可以监视<strong>focus</strong>事件的(Tab键)。<br>因此，<strong>增强可访问性</strong>的事件处理方法是创建两个事件监听器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href = &quot;somepage.html&quot; id = &quot;link&quot;&gt;some Text&lt;/a&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//配对事件</span><br><span class=\"line\">addEvent(document.getElementById(&apos;link&apos;), &apos;mouseover&apos;, doSomething);</span><br><span class=\"line\">addEvent(document.getElementById(&apos;link&apos;), &apos;focus&apos;, doSomething);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"3-事件和渐进增强\"><a href=\"#3-事件和渐进增强\" class=\"headerlink\" title=\"3.事件和渐进增强\"></a>3.事件和渐进增强</h4><ul>\n<li><p>渐进增强的真正原则： </p>\n<blockquote>\n<p>使用JavaScript( 和CSS )改进<strong>基本功能</strong>，使得用户不管使用何种设备，都不会被抛弃(忽略)。</p>\n</blockquote>\n<ul>\n<li>只有在开发者有意识的<strong>忽略</strong>一些用户时，JavaScript才是有必要的。</li>\n<li>但是在很多情况下，<strong>JavaScript是没有必要的</strong>：比如表单的提交应该在有无JavaScript的情况下都能进行(在服务端都能验证)。</li>\n<li>将<strong>渐进增强的思想</strong>应用到事件处理中，向已经有默认事件行为的元素添加事件时必须小心。例如：表单提交时，表单的数据发送给服务器端脚本。为表单添加提交事件，为其添加其他功能，在逻辑上是毫无意义的。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"四、高级事件处理\"><a href=\"#四、高级事件处理\" class=\"headerlink\" title=\"四、高级事件处理\"></a>四、高级事件处理</h3><ul>\n<li>引用事件</li>\n<li>事件属性</li>\n<li>检查按键</li>\n<li>阻止默认事件行为</li>\n<li>事件的两个阶段：捕捉和冒泡</li>\n<li>委派事件处理 </li>\n</ul>\n<h4 id=\"1-引用事件\"><a href=\"#1-引用事件\" class=\"headerlink\" title=\"1.引用事件\"></a>1.引用事件</h4><blockquote>\n<p>当事件处理程序用于多个元素上的相同事件（或者相同元素上的不同事件）时，事件处理程序就必须考虑其灵活性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someEventHandler</span>(<span class=\"params\">e</span>)</span>&#123;  <span class=\"comment\">//e就是引用事件，代表发生的事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> e == <span class=\"string\">\"undefined\"</span>)&#123;</span><br><span class=\"line\">\t\te = <span class=\"built_in\">window</span>.event;      <span class=\"comment\">//考虑IE8及更早</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-事件属性\"><a href=\"#2-事件属性\" class=\"headerlink\" title=\"2.事件属性\"></a>2.事件属性</h4><blockquote>\n<p>事件对象通过各种属性提供信息，但是不同浏览器支持的属性有所差异。(这里不深究，后续补充。)</p>\n</blockquote>\n<h4 id=\"3-检查按键\"><a href=\"#3-检查按键\" class=\"headerlink\" title=\"3.检查按键\"></a>3.检查按键</h4><blockquote>\n<p>当键盘事件触发时，可以通过事件对象确定按下的具体键。这个问题有点复杂，在这里稍微带过。</p>\n</blockquote>\n<p>示例代码：以一致的方式获得字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var charCode = e.which || e.keyCode;\t//IE中不支持which</span><br><span class=\"line\">// 或者更准确的</span><br><span class=\"line\">var charCode = (typeof e.which == &apos;number&apos;)?e.which : e.keyCode;</span><br><span class=\"line\"></span><br><span class=\"line\">//获得与字符代码相对应的实际字符:</span><br><span class=\"line\">String.fromCharCode(charcode);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-阻止事件默认行为\"><a href=\"#4-阻止事件默认行为\" class=\"headerlink\" title=\"4.阻止事件默认行为\"></a>4.阻止事件默认行为</h4><blockquote>\n<p>一些与基本浏览器相关的JS事件： 单击链接、提交表单等。在事件处理器存在时，事件发生会调用对应的函数，<strong>在函数运行之后，浏览器仍然继续进行它通常应该进行的事件处理。</strong><br>例如：提交表单时，提交事件处理器可能执行客户端验证。<strong>如果发生了错误，应该阻止表单提交到服务器端脚本，让客户有机会改正错误。</strong><br>方法：<strong>从事件处理器中返回false</strong>。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 仅在传统方法注册事件处理器时可靠工作，不建议。</span><br><span class=\"line\">function handleForm()&#123;</span><br><span class=\"line\">\t//Do whatever.</span><br><span class=\"line\">\tif(errors)&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//以下是跨浏览器的兼容方法，调用事件对象的preventDefault();</span><br><span class=\"line\">if(typeof e == &apos;undefined&apos;) &#123;e = window.event;&#125;</span><br><span class=\"line\">if(e.preventDefault)&#123;</span><br><span class=\"line\">\te.preventDefault();</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">\te.returnValue = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return false;\t//额外的预防措施。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用PreventDefault()或设置returnValue的另一个好处就是：<strong>可以在函数开始时执行，使后续的函数代码仍然运行。</strong></p>\n</blockquote>\n<h4 id=\"5-事件的两个阶段：捕捉和冒泡\"><a href=\"#5-事件的两个阶段：捕捉和冒泡\" class=\"headerlink\" title=\"5.事件的两个阶段：捕捉和冒泡\"></a>5.事件的两个阶段：捕捉和冒泡</h4><h5 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a><strong>示例</strong>：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">\t&lt;h1&gt;This is a title&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;p&gt;This is a paragraph.</span><br><span class=\"line\">\t\t&lt;a href = &quot;#&quot; id = &quot;link&quot;&gt;This is a link.&lt;/a&gt;</span><br><span class=\"line\">\t&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t// U.$()方法与jquery获取DOM节点方法一致，只是在前文定义了一个新对象U.</span><br><span class=\"line\">\taddEvent(U.$(&apos;link&apos;), &apos;mouseover&apos; , doSomething);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>**在上述代码中，包含关系：a&lt; p&lt; div&lt; html&lt; Document&lt; window。当鼠标悬停在链接之上，mouseover事件实际上经历了几个步骤，在两个不同的阶段到达和离开目标（链接）。</p>\n<p><img src=\"http://img.blog.csdn.net/20161211094137004?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>注意，事件传播一共有<strong>三个阶段</strong>：1.捕获阶段； 2.调用事件处理程序； 3.冒泡阶段。</p>\n</blockquote>\n<p>1.捕捉阶段：</p>\n<blockquote>\n<p>当你使用事件捕获时，由外向内，父级元素先触发，子级元素后触发；即div先触发，p后触发。</p>\n</blockquote>\n<p>2.事件处理：</p>\n<blockquote>\n<p>调用查找到的事件处理程序；</p>\n</blockquote>\n<p>3.冒泡阶段：</p>\n<blockquote>\n<p>事件冒泡<br>当你使用事件冒泡时，由内向外，子级元素先触发，父级元素后触发；即p先触发，div后触发。</p>\n</blockquote>\n<ul>\n<li>W3C模型</li>\n</ul>\n<blockquote>\n<p>在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。然后，再从事件源往上进行事件冒泡，直到到达document。</p>\n</blockquote>\n<p>程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函数，它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.addEventListener(&apos;click&apos;,doSomething2,true)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>true=捕获 false=冒泡</p>\n</blockquote>\n<ul>\n<li>传统绑定事件方式</li>\n</ul>\n<blockquote>\n<p>在一个支持W3C DOM的浏览器中，像这样一般的绑定事件方式，是采用的事件冒泡方式。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.onclick = doSomething2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>IE浏览器</li>\n</ul>\n<blockquote>\n<p>如上面所说，IE只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.attachEvent(&quot;onclick&quot;, doSomething2);</span><br></pre></td></tr></table></figure>\n<p>附：事件冒泡（的过程）：事件从发生的目标（event.srcElement||event.target）开始，沿着文档逐层向上冒泡，到document为止。</p>\n<ul>\n<li>事件的传播是可以阻止的：<br>• 在W3C中，使用stopPropagation（）方法<br>• 在IE下设置cancelBubble = true；</li>\n</ul>\n<blockquote>\n<p>在捕获的过程中<code>stopPropagation（）;</code>后，后面的冒泡过程也不会发生了</p>\n</blockquote>\n<ul>\n<li>阻止事件的默认行为<ul>\n<li>例如click后的跳转:<br>• 在W3C中，使用preventDefault（）方法；<br>• 在IE下设置window.event.returnValue = false;</li>\n</ul>\n</li>\n</ul>\n<p>终于写完了，花了一天时间总结了”事件处理”，文末部分参考了网友的经验。</p>\n<p>九月份看的《JS高级程序设计》，当时云里雾里，后来敲了很多代码半懂不懂，现在写完这篇博客才算明白过来。</p>\n<p>在写的时候翻阅《JS权威指南》，里面有更深入的细节，有一部分事件类型已经被HTML5标准化。</p>\n<p>后续再补充。^_^</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JavaScript-—-事件处理：\"><a href=\"#JavaScript-—-事件处理：\" class=\"headerlink\" title=\"JavaScript — 事件处理：\"></a>JavaScript — 事件处理：</h2><h3 id=\"笔记摘要\"><a href=\"#笔记摘要\" class=\"headerlink\" title=\"笔记摘要\"></a>笔记摘要</h3><blockquote>\n<p>参考书籍：<br>《Modern JavaScript》(Larry Ullman 著);<br>《JavaScript高级程序设计》 (Nicholas C Zakas著).</p>\n</blockquote>\n<hr>\n<h3 id=\"一、-事件处理：\"><a href=\"#一、-事件处理：\" class=\"headerlink\" title=\"一、 事件处理：\"></a>一、 事件处理：</h3><h4 id=\"1-嵌入式事件处理器（强烈不建议）\"><a href=\"#1-嵌入式事件处理器（强烈不建议）\" class=\"headerlink\" title=\"1.嵌入式事件处理器（强烈不建议）:\"></a>1.嵌入式事件处理器（强烈不建议）:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*比如*/</span><br><span class=\"line\">      &lt;form action= &quot;#&quot; method = &quot;post&quot; onsubmit = &quot;validataForm();&quot;&gt;</span><br><span class=\"line\">      /*或者*/</span><br><span class=\"line\">   \t&lt;a href = &quot;somepage.html&quot; onclick = &quot;doSomething();&quot;&gt;Some link&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-传统事件处理方法-不建议-：\"><a href=\"#2-传统事件处理方法-不建议-：\" class=\"headerlink\" title=\"2.传统事件处理方法(不建议)：\"></a>2.传统事件处理方法(不建议)：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 以下传统方法不建议使用 */</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = init; <span class=\"comment\">//易用，可靠，属性名必须全小写。</span></span><br><span class=\"line\"><span class=\"comment\">/* 或者 */</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">//匿名函数方法</span></span><br><span class=\"line\"><span class=\"comment\">//Do whatever.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>原因：</p>\n<pre><code>1. 一次只能指定一个时间处理器；\n2. 较后的函数会覆盖较前的；\n</code></pre></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'theForm'</span>).onsubmit = progress;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'theForm'</span>).onsubmit = calculate; <span class=\"comment\">// 呃!有问题.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//缓解方法</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'theForm'</span>).onsubmit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tprogress();  <span class=\"comment\">//当然你也可以这样解决，但是这样的代码很丑陋。</span></span><br><span class=\"line\">\tcalculate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-W3C事件处理-建议\"><a href=\"#3-W3C事件处理-建议\" class=\"headerlink\" title=\"3.W3C事件处理(建议)\"></a>3.W3C事件处理(建议)</h4><ol>\n<li>接受三个参数：事件类型，事件发生时调用的函数，表示事件阶段的布尔值。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\taddEventListener(&apos;load&apos;, init , false);  //可以为相同元素添加多个事件监听器；`</span><br><span class=\"line\">\tremoveEventListener()(&apos;load&apos;, process , false);</span><br><span class=\"line\">```\t</span><br><span class=\"line\"></span><br><span class=\"line\">2. IE&lt;9的事件处理(事件名称前缀多了&quot;on&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t1. attachEvent(&apos;onload&apos; , init);</span><br><span class=\"line\">\t\t2. detachEvent(&apos;onload&apos; , init);</span><br><span class=\"line\">3. 创建一个事件分配器</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t``` javascript</span><br><span class=\"line\">\tfunction addEvent( obj , type , fn)&#123;</span><br><span class=\"line\">\t     if(obj &amp;&amp; objEventListener)&#123;          //W3c</span><br><span class=\"line\">\t          obj.addEventListener(type, fn , false);</span><br><span class=\"line\">\t     &#125;else if(obj &amp;&amp; obj.attachEvent)&#123;     //IE&lt;9</span><br><span class=\"line\">\t          obj.attachEvent(&quot;on&quot; + type, fn);</span><br><span class=\"line\">\t     &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"4-范例：创建一个实用程序库\"><a href=\"#4-范例：创建一个实用程序库\" class=\"headerlink\" title=\"4. 范例：创建一个实用程序库\"></a>4. <strong>范例：创建一个实用程序库</strong></h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//所有函数都定义在全局对象U中，避免多个新函数污染全局命名空间。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//新对象U （Utility的缩写）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> U = &#123;</span><br><span class=\"line\">      <span class=\"comment\">//定义$()方法</span></span><br><span class=\"line\">      $: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">           'use strict'</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id == <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.getElementById(id);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"><span class=\"comment\">//定义setText 方法，两个参数：要更新的元素id和消息本身</span></span><br><span class=\"line\">      setText: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id, message</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      \t'use strict'</span>;</span><br><span class=\"line\">      \t<span class=\"keyword\">if</span>( (<span class=\"keyword\">typeof</span> id == <span class=\"string\">'string'</span>) &amp;&amp; (<span class=\"keyword\">typeof</span> message == <span class=\"string\">'string'</span>))&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">var</span> output = <span class=\"keyword\">this</span>.$(id);</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span> (!output) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125;;\t<span class=\"comment\">//获取id的元素失败</span></span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(output.textContext !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">      \t\t\toutput.textContext = message;</span><br><span class=\"line\">      \t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      \t\t\toutput.innerText = message;</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      \t&#125;\t<span class=\"comment\">//End of main IF.</span></span><br><span class=\"line\">      &#125;, \t<span class=\"comment\">//End of setText() function.</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//封装一个‘添加事件监听器’ 函数</span></span><br><span class=\"line\">      addEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj , type , fn</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      \t\t'use strict'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj &amp;&amp; obj.removeEventListener)&#123;</span><br><span class=\"line\">            \tobj.addEventListener(type, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj &amp;&amp; obj.detachEvent)&#123;</span><br><span class=\"line\">            \tobj.attachEvent(<span class=\"string\">'on'</span> + type , fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;,   \t<span class=\"comment\">//End of addEvent() function</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">//封装一个‘移除事件监听器’函数</span></span><br><span class=\"line\">      removeEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj , type , fn</span>)</span>&#123;</span><br><span class=\"line\"><span class=\"meta\">      \t\t'use strict'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj &amp;&amp; obj.removeEventListener)&#123;</span><br><span class=\"line\">            \tobj.removeEventListener(type, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj &amp;&amp; obj.detachEvent)&#123;</span><br><span class=\"line\">            \tobj.detachEvent(<span class=\"string\">'on'</span> + type , fn);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;   \t<span class=\"comment\">//End of removeEvent() function</span></span><br><span class=\"line\"> &#125;;\t<span class=\"comment\">//End of U declaration.</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"二、事件类型\"><a href=\"#二、事件类型\" class=\"headerlink\" title=\"二、事件类型\"></a>二、事件类型</h3><p><strong>事件类型分为4类：</strong></p>\n<ul>\n<li><strong>输入设备</strong></li>\n<li><strong>键盘</strong></li>\n<li><strong>浏览器</strong></li>\n<li><strong>表单</strong> </li>\n</ul>\n<h4 id=\"1-输入设备事件\"><a href=\"#1-输入设备事件\" class=\"headerlink\" title=\"1.输入设备事件\"></a>1.输入设备事件</h4><h5 id=\"1-输入按钮事件：\"><a href=\"#1-输入按钮事件：\" class=\"headerlink\" title=\"1. 输入按钮事件：\"></a>1. 输入按钮事件：</h5><pre><code>1. click 事件；\n2. dblclick 事件；\n3. contextmenu 事件(罕见)；\n</code></pre><h5 id=\"2-输入移动事件：\"><a href=\"#2-输入移动事件：\" class=\"headerlink\" title=\"2. 输入移动事件：\"></a>2. 输入移动事件：</h5><pre><code>1.  mouseout 鼠标移出;\n2.  mouseover 鼠标移过;\n3.  mousemove 鼠标移动（持续监视鼠标，消耗性能）;\n</code></pre><h5 id=\"3-键盘事件：\"><a href=\"#3-键盘事件：\" class=\"headerlink\" title=\"3. 键盘事件：\"></a>3. 键盘事件：</h5><pre><code>1.   keydown (按下);\n2.   keyup (释放); \n3.   keypress (按键，前二者组合);\n</code></pre><h5 id=\"4-浏览器事件：\"><a href=\"#4-浏览器事件：\" class=\"headerlink\" title=\"4. 浏览器事件：\"></a>4. 浏览器事件：</h5><pre><code>1. load (加载完成);\n2. unload (卸载);\n3. resize (改变浏览器窗口大小);\n4. scroll (滚动事件);\n5. copy;\n6. cut;\n7. paste;  \n</code></pre><h5 id=\"5-表单事件：\"><a href=\"#5-表单事件：\" class=\"headerlink\" title=\"5. 表单事件：\"></a>5. 表单事件：</h5><p>   – <strong>reset</strong>：表单重置(点击重置html按钮)时触发，用户很少有重置表单的需要；若要使用此事件，可以添加监视：     </p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addEvent(document.getElementById(&apos;theForm&apos;), &apos;reset&apos; , function()&#123;</span><br><span class=\"line\">\treturn confirm(&quot;您确定想要重置表单吗？&quot;);\t\t</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</code></pre><p><img src=\"http://img.blog.csdn.net/20161210172136724?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"重置表单提醒\"></p>\n<p>– <strong>select</strong>: 文本输入域和文本区域的文本内容被选中时；</p>\n<p>– <strong>change</strong>: 元素值变化时；</p>\n<p>– <strong>focus</strong>: 单击或Tab键到文本输入域时；</p>\n<p>– <strong>blur</strong>: 光标或选择项的移动时；</p>\n<hr>\n<h3 id=\"三、事件可访问性-Accessibility\"><a href=\"#三、事件可访问性-Accessibility\" class=\"headerlink\" title=\"三、事件可访问性(Accessibility)\"></a>三、事件可访问性(Accessibility)</h3><h4 id=\"1-配对事件-Pairing-events\"><a href=\"#1-配对事件-Pairing-events\" class=\"headerlink\" title=\"1. 配对事件(Pairing events):\"></a>1. 配对事件(Pairing events):</h4><blockquote>\n<p>使用同一个函数处理相同元素的类似事件。</p>\n</blockquote>\n<h4 id=\"2-可访问性-Accessibility\"><a href=\"#2-可访问性-Accessibility\" class=\"headerlink\" title=\"2. 可访问性(Accessibility):\"></a>2. 可访问性(Accessibility):</h4><p>在移动设备和其他非标准浏览器上，对于不使用输入设备的浏览器，mouseover和mouseout事件毫无意义，因为它们永远不会发生。<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href = &quot;somepage.html&quot; id = &quot;link&quot; &gt; Some Text &lt;/a&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">addEvent(document.getElementById(&apos;link&apos;), &apos;mouseover&apos;,handleLinkMouseOver);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上述代码中，事件只能通过鼠标触发。<br>但是还是有缓解方法。<br>如果浏览器仅由键盘控制，那么它是可以监视<strong>focus</strong>事件的(Tab键)。<br>因此，<strong>增强可访问性</strong>的事件处理方法是创建两个事件监听器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href = &quot;somepage.html&quot; id = &quot;link&quot;&gt;some Text&lt;/a&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//配对事件</span><br><span class=\"line\">addEvent(document.getElementById(&apos;link&apos;), &apos;mouseover&apos;, doSomething);</span><br><span class=\"line\">addEvent(document.getElementById(&apos;link&apos;), &apos;focus&apos;, doSomething);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"3-事件和渐进增强\"><a href=\"#3-事件和渐进增强\" class=\"headerlink\" title=\"3.事件和渐进增强\"></a>3.事件和渐进增强</h4><ul>\n<li><p>渐进增强的真正原则： </p>\n<blockquote>\n<p>使用JavaScript( 和CSS )改进<strong>基本功能</strong>，使得用户不管使用何种设备，都不会被抛弃(忽略)。</p>\n</blockquote>\n<ul>\n<li>只有在开发者有意识的<strong>忽略</strong>一些用户时，JavaScript才是有必要的。</li>\n<li>但是在很多情况下，<strong>JavaScript是没有必要的</strong>：比如表单的提交应该在有无JavaScript的情况下都能进行(在服务端都能验证)。</li>\n<li>将<strong>渐进增强的思想</strong>应用到事件处理中，向已经有默认事件行为的元素添加事件时必须小心。例如：表单提交时，表单的数据发送给服务器端脚本。为表单添加提交事件，为其添加其他功能，在逻辑上是毫无意义的。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"四、高级事件处理\"><a href=\"#四、高级事件处理\" class=\"headerlink\" title=\"四、高级事件处理\"></a>四、高级事件处理</h3><ul>\n<li>引用事件</li>\n<li>事件属性</li>\n<li>检查按键</li>\n<li>阻止默认事件行为</li>\n<li>事件的两个阶段：捕捉和冒泡</li>\n<li>委派事件处理 </li>\n</ul>\n<h4 id=\"1-引用事件\"><a href=\"#1-引用事件\" class=\"headerlink\" title=\"1.引用事件\"></a>1.引用事件</h4><blockquote>\n<p>当事件处理程序用于多个元素上的相同事件（或者相同元素上的不同事件）时，事件处理程序就必须考虑其灵活性。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someEventHandler</span>(<span class=\"params\">e</span>)</span>&#123;  <span class=\"comment\">//e就是引用事件，代表发生的事件</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> e == <span class=\"string\">\"undefined\"</span>)&#123;</span><br><span class=\"line\">\t\te = <span class=\"built_in\">window</span>.event;      <span class=\"comment\">//考虑IE8及更早</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-事件属性\"><a href=\"#2-事件属性\" class=\"headerlink\" title=\"2.事件属性\"></a>2.事件属性</h4><blockquote>\n<p>事件对象通过各种属性提供信息，但是不同浏览器支持的属性有所差异。(这里不深究，后续补充。)</p>\n</blockquote>\n<h4 id=\"3-检查按键\"><a href=\"#3-检查按键\" class=\"headerlink\" title=\"3.检查按键\"></a>3.检查按键</h4><blockquote>\n<p>当键盘事件触发时，可以通过事件对象确定按下的具体键。这个问题有点复杂，在这里稍微带过。</p>\n</blockquote>\n<p>示例代码：以一致的方式获得字符：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var charCode = e.which || e.keyCode;\t//IE中不支持which</span><br><span class=\"line\">// 或者更准确的</span><br><span class=\"line\">var charCode = (typeof e.which == &apos;number&apos;)?e.which : e.keyCode;</span><br><span class=\"line\"></span><br><span class=\"line\">//获得与字符代码相对应的实际字符:</span><br><span class=\"line\">String.fromCharCode(charcode);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-阻止事件默认行为\"><a href=\"#4-阻止事件默认行为\" class=\"headerlink\" title=\"4.阻止事件默认行为\"></a>4.阻止事件默认行为</h4><blockquote>\n<p>一些与基本浏览器相关的JS事件： 单击链接、提交表单等。在事件处理器存在时，事件发生会调用对应的函数，<strong>在函数运行之后，浏览器仍然继续进行它通常应该进行的事件处理。</strong><br>例如：提交表单时，提交事件处理器可能执行客户端验证。<strong>如果发生了错误，应该阻止表单提交到服务器端脚本，让客户有机会改正错误。</strong><br>方法：<strong>从事件处理器中返回false</strong>。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 仅在传统方法注册事件处理器时可靠工作，不建议。</span><br><span class=\"line\">function handleForm()&#123;</span><br><span class=\"line\">\t//Do whatever.</span><br><span class=\"line\">\tif(errors)&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//以下是跨浏览器的兼容方法，调用事件对象的preventDefault();</span><br><span class=\"line\">if(typeof e == &apos;undefined&apos;) &#123;e = window.event;&#125;</span><br><span class=\"line\">if(e.preventDefault)&#123;</span><br><span class=\"line\">\te.preventDefault();</span><br><span class=\"line\">&#125;else &#123;</span><br><span class=\"line\">\te.returnValue = false;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return false;\t//额外的预防措施。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用PreventDefault()或设置returnValue的另一个好处就是：<strong>可以在函数开始时执行，使后续的函数代码仍然运行。</strong></p>\n</blockquote>\n<h4 id=\"5-事件的两个阶段：捕捉和冒泡\"><a href=\"#5-事件的两个阶段：捕捉和冒泡\" class=\"headerlink\" title=\"5.事件的两个阶段：捕捉和冒泡\"></a>5.事件的两个阶段：捕捉和冒泡</h4><h5 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a><strong>示例</strong>：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">\t&lt;h1&gt;This is a title&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;p&gt;This is a paragraph.</span><br><span class=\"line\">\t\t&lt;a href = &quot;#&quot; id = &quot;link&quot;&gt;This is a link.&lt;/a&gt;</span><br><span class=\"line\">\t&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t// U.$()方法与jquery获取DOM节点方法一致，只是在前文定义了一个新对象U.</span><br><span class=\"line\">\taddEvent(U.$(&apos;link&apos;), &apos;mouseover&apos; , doSomething);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>**在上述代码中，包含关系：a&lt; p&lt; div&lt; html&lt; Document&lt; window。当鼠标悬停在链接之上，mouseover事件实际上经历了几个步骤，在两个不同的阶段到达和离开目标（链接）。</p>\n<p><img src=\"http://img.blog.csdn.net/20161211094137004?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2lubmVyMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>注意，事件传播一共有<strong>三个阶段</strong>：1.捕获阶段； 2.调用事件处理程序； 3.冒泡阶段。</p>\n</blockquote>\n<p>1.捕捉阶段：</p>\n<blockquote>\n<p>当你使用事件捕获时，由外向内，父级元素先触发，子级元素后触发；即div先触发，p后触发。</p>\n</blockquote>\n<p>2.事件处理：</p>\n<blockquote>\n<p>调用查找到的事件处理程序；</p>\n</blockquote>\n<p>3.冒泡阶段：</p>\n<blockquote>\n<p>事件冒泡<br>当你使用事件冒泡时，由内向外，子级元素先触发，父级元素后触发；即p先触发，div后触发。</p>\n</blockquote>\n<ul>\n<li>W3C模型</li>\n</ul>\n<blockquote>\n<p>在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。然后，再从事件源往上进行事件冒泡，直到到达document。</p>\n</blockquote>\n<p>程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函数，它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.addEventListener(&apos;click&apos;,doSomething2,true)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>true=捕获 false=冒泡</p>\n</blockquote>\n<ul>\n<li>传统绑定事件方式</li>\n</ul>\n<blockquote>\n<p>在一个支持W3C DOM的浏览器中，像这样一般的绑定事件方式，是采用的事件冒泡方式。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.onclick = doSomething2</span><br></pre></td></tr></table></figure>\n<ul>\n<li>IE浏览器</li>\n</ul>\n<blockquote>\n<p>如上面所说，IE只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ele.attachEvent(&quot;onclick&quot;, doSomething2);</span><br></pre></td></tr></table></figure>\n<p>附：事件冒泡（的过程）：事件从发生的目标（event.srcElement||event.target）开始，沿着文档逐层向上冒泡，到document为止。</p>\n<ul>\n<li>事件的传播是可以阻止的：<br>• 在W3C中，使用stopPropagation（）方法<br>• 在IE下设置cancelBubble = true；</li>\n</ul>\n<blockquote>\n<p>在捕获的过程中<code>stopPropagation（）;</code>后，后面的冒泡过程也不会发生了</p>\n</blockquote>\n<ul>\n<li>阻止事件的默认行为<ul>\n<li>例如click后的跳转:<br>• 在W3C中，使用preventDefault（）方法；<br>• 在IE下设置window.event.returnValue = false;</li>\n</ul>\n</li>\n</ul>\n<p>终于写完了，花了一天时间总结了”事件处理”，文末部分参考了网友的经验。</p>\n<p>九月份看的《JS高级程序设计》，当时云里雾里，后来敲了很多代码半懂不懂，现在写完这篇博客才算明白过来。</p>\n<p>在写的时候翻阅《JS权威指南》，里面有更深入的细节，有一部分事件类型已经被HTML5标准化。</p>\n<p>后续再补充。^_^</p>\n"},{"title":"JavaScript精髓(1)","date":"2017-03-05T16:00:00.000Z","update":"2017-07-10T16:00:00.000Z","_content":"\n这篇文章主要总结了JavaScript的基础，包括数据类型，值和易混淆的概念。\n<!--more-->\n\n# 1. JavaScript的基本数据类型\n\n 1. Undefined\n 2. Null\n 3. Number\n 4. Boolean\n 5. String\n 6. Symbol(ES2015新增)\n\n# 2. JavaScript的内置对象\n\n - Object 是JS中所有对象的父对象\n - 数据封装类对象：\n  1. Object\n  2. Array\n  3. Boolean\n  4. Number\n  5. String\n - 其他对象：\n\t 1. Function\n\t 2. Arguments\n\t 3. Math\n\t 4. Date\n\t 5. RegExp\n\t 6. Error \n\n> 参考文档：[文档链接](http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html)\n\n\n\n# 3. JavaScript 中有几种类型的值？\n\n - 栈(Stack)：原始(primitive)数据类型(Undefined, Null , Boolean, Number, String)\n - 堆(Heap)：合成(complex)数据类型(Object, Array, Function)\n\n - 两种类型的区别是： **存储位置不同**\n - 原始数据类型：直接存储在**栈**中的简单数据段，占据空间小，大小固定，属于被频繁使用的数据，所以放入栈中存储；\n - 引用数据类型：存储在堆(Heap)中的对象，占据空间大，大小不固定。如果存储在栈中，则会影响程序的性能。\n > 引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后，从堆中获得实体。\n\n - 内存图： \n ![enter image description here](https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966)\n\n\n\n# 4. null和undefined的区别\n\n - null 表示\"没有对象\"，即该处不应该有值，典型用法：\n\n    > 1. 作为函数的参数，表示该函数的参数不是对象。\n    > 2. 作为对象原型链的终点。 \n    \n    ```js\n    Object.getPrototypeOf(Object.prototype)\n    //null\n    ```\n\n - undefined 表示“缺少值”，即此处应该有值，但是没有被赋值，典型用法：\n\n    > 1. 变量被声明了，但是没有赋值，默认等于undefined。\n    > 2. 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n    > 3. 对象没有赋值的属性，该属性默认值为undefined。\n    > 4. 函数没有返回值时，默认返回undefined。\n    ```js\n    var i;\n    i  //undefined\n    \n    function f(x){console.log(x)}\n    f() //undefined\n    \n    var o = new Object();\n    o.p //undefined\n    \n    var x = f();\n    x //undefinde\n    ```\n\n\n```js\n\t//二者的测试\n\ttypeof undefined == \"undefined\" //true\n\ttypeof null == \"object\" //true\n\t\n\tNumber(undefined)   //NaN\n\tNumber(null)  //0\n```\n\n 3. 注意：\n\t 在验证null时，一定要使用 `===`,因为 `==` 无法分辨null和undefined：\n\t \n\t```js\n\t    null == undefined //true\n\t    null === undefined //false\n\t```\n 4. 打个比方： \n  - null\n\t  - Q: 有张三这个人吗？\n\t  - A:  有！\n\t  - Q: 张三有房子吗？\n\t  - A: 没有！\n  - undefined\n\t  - Q: 有张三这个人吗？\n\t  - A: 有！\n\t  - Q: 张三多少岁了？\n\t  - A: 不知道（没有被告诉）\n\n\n\n# 5. JavaScript的this\n\n - this是一个指针\n - this的指向：\n\t 1. 函数直接调用时：this指向函数的直接调用者；\n\t 2. 通过new关键字，this指向new产生的新对象；\n\t 3. 通过call/apply/bind的绑定，this指向绑定对象。\n\t 4. 在JS事件中，this指向触发这个事件的对象，但是在IE中，attachEvent中的this总是指向全局对象Window。\n\n\n\n# 6.JavaScript的作用域链\n全局函数无法查看局部函数的内部细节，但局部函数刻意查看上层函数的细节，直至全局细节。\n\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。\n \n\n\n\n\n# 7. JavaScript原型和原型链\n\n - 原型：每个对象都会在其内部初始化一个属性，就是prototype(原型)。换句话说，**所有对象都是以对象为模板创建实例的。**\n\n - 原型链：当我们访问一个对象的属性A时，如果属性A不存在于该对象中，那么我们会去prototype里查找A，而这个prototype又会有自己的prototype，于是就如此查找下去，就形成了一个原型链。这个原型链表示的是一种连带关系。\n\n - 关系：`instance.constructor.prototype = instance.__proto__`\n\n - 特点：JS对象是通过**引用传递**的（对比于值传递），我们创建的每一个新对象实体中，并没有一份属于自己的原型副本。当我们修改了原型，与之相关的对象也会**继承**这些变化。\n - 终点：原型链的顶端，是`Object.prototype`, 它的`__proto__`指向`null`.\n\n# 8.JavaScript的闭包\n\n 1. 概念\n\t闭包是一种手段，一个有权访问另一个函数作用域中变量的函数，记住闭包也是函数。\n\t\n 2. 创建闭包\n  最常见的方式，就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量(相当于一个对外的接口)。\n  \n 3. 作用\n\t利用闭包可以突破作用域链，将函数内部的变量方法传递到外部。\n\t\n 4. 特性\n\t\t 1. 函数内再嵌套函数\n\t\t 2. 内部函数可以引用外层的参数和变量\n\t\t 3. 参数和变量不会被垃圾回收机制回收\n\n# 9. new操作符到底干了什么？\n 1. 创建一个空对象，将this指针指向该对象，同时继承该函数的原型。\n 2. 属性和方法被添加到this指向的对象中。\n 3. 新创建的对象由this所应用，并且最后隐式的返回this 。\n \n ```js\n var obj = {};\n obj.__proto__ = Base.prototype;\n Base.call(obj);\n ```\n\n\n# 10. JavaScript开发的基本规范\n\n 1. 不要在同一行声明多个变量；\n 2. 请使用 ===/!==来比较布尔值或者数值；\n 3. 使用对象字面量替代 new Array这种形式；\n 4. 不要使用全局函数；\n 5. Switch语句必须带有default分支；\n 6. 函数应该有返回值；\n 7. For循环必须使用大括号；\n 8. if语句必须使用大括号；\n 9. for-in循环中的变量应该使用let 关键字明确限定作用域，避免命名空间污染。\n\n\n----------\nTo be continue。","source":"_posts/2017-03-06 JavaScript精髓(1).md","raw":"---\ntitle: JavaScript精髓(1)\ncategories: 技术\ndate: 2017-03-06 \nupdate: 2017-07-11\ntags: JavaScript\n---\n\n这篇文章主要总结了JavaScript的基础，包括数据类型，值和易混淆的概念。\n<!--more-->\n\n# 1. JavaScript的基本数据类型\n\n 1. Undefined\n 2. Null\n 3. Number\n 4. Boolean\n 5. String\n 6. Symbol(ES2015新增)\n\n# 2. JavaScript的内置对象\n\n - Object 是JS中所有对象的父对象\n - 数据封装类对象：\n  1. Object\n  2. Array\n  3. Boolean\n  4. Number\n  5. String\n - 其他对象：\n\t 1. Function\n\t 2. Arguments\n\t 3. Math\n\t 4. Date\n\t 5. RegExp\n\t 6. Error \n\n> 参考文档：[文档链接](http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html)\n\n\n\n# 3. JavaScript 中有几种类型的值？\n\n - 栈(Stack)：原始(primitive)数据类型(Undefined, Null , Boolean, Number, String)\n - 堆(Heap)：合成(complex)数据类型(Object, Array, Function)\n\n - 两种类型的区别是： **存储位置不同**\n - 原始数据类型：直接存储在**栈**中的简单数据段，占据空间小，大小固定，属于被频繁使用的数据，所以放入栈中存储；\n - 引用数据类型：存储在堆(Heap)中的对象，占据空间大，大小不固定。如果存储在栈中，则会影响程序的性能。\n > 引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后，从堆中获得实体。\n\n - 内存图： \n ![enter image description here](https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966)\n\n\n\n# 4. null和undefined的区别\n\n - null 表示\"没有对象\"，即该处不应该有值，典型用法：\n\n    > 1. 作为函数的参数，表示该函数的参数不是对象。\n    > 2. 作为对象原型链的终点。 \n    \n    ```js\n    Object.getPrototypeOf(Object.prototype)\n    //null\n    ```\n\n - undefined 表示“缺少值”，即此处应该有值，但是没有被赋值，典型用法：\n\n    > 1. 变量被声明了，但是没有赋值，默认等于undefined。\n    > 2. 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n    > 3. 对象没有赋值的属性，该属性默认值为undefined。\n    > 4. 函数没有返回值时，默认返回undefined。\n    ```js\n    var i;\n    i  //undefined\n    \n    function f(x){console.log(x)}\n    f() //undefined\n    \n    var o = new Object();\n    o.p //undefined\n    \n    var x = f();\n    x //undefinde\n    ```\n\n\n```js\n\t//二者的测试\n\ttypeof undefined == \"undefined\" //true\n\ttypeof null == \"object\" //true\n\t\n\tNumber(undefined)   //NaN\n\tNumber(null)  //0\n```\n\n 3. 注意：\n\t 在验证null时，一定要使用 `===`,因为 `==` 无法分辨null和undefined：\n\t \n\t```js\n\t    null == undefined //true\n\t    null === undefined //false\n\t```\n 4. 打个比方： \n  - null\n\t  - Q: 有张三这个人吗？\n\t  - A:  有！\n\t  - Q: 张三有房子吗？\n\t  - A: 没有！\n  - undefined\n\t  - Q: 有张三这个人吗？\n\t  - A: 有！\n\t  - Q: 张三多少岁了？\n\t  - A: 不知道（没有被告诉）\n\n\n\n# 5. JavaScript的this\n\n - this是一个指针\n - this的指向：\n\t 1. 函数直接调用时：this指向函数的直接调用者；\n\t 2. 通过new关键字，this指向new产生的新对象；\n\t 3. 通过call/apply/bind的绑定，this指向绑定对象。\n\t 4. 在JS事件中，this指向触发这个事件的对象，但是在IE中，attachEvent中的this总是指向全局对象Window。\n\n\n\n# 6.JavaScript的作用域链\n全局函数无法查看局部函数的内部细节，但局部函数刻意查看上层函数的细节，直至全局细节。\n\n当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。\n \n\n\n\n\n# 7. JavaScript原型和原型链\n\n - 原型：每个对象都会在其内部初始化一个属性，就是prototype(原型)。换句话说，**所有对象都是以对象为模板创建实例的。**\n\n - 原型链：当我们访问一个对象的属性A时，如果属性A不存在于该对象中，那么我们会去prototype里查找A，而这个prototype又会有自己的prototype，于是就如此查找下去，就形成了一个原型链。这个原型链表示的是一种连带关系。\n\n - 关系：`instance.constructor.prototype = instance.__proto__`\n\n - 特点：JS对象是通过**引用传递**的（对比于值传递），我们创建的每一个新对象实体中，并没有一份属于自己的原型副本。当我们修改了原型，与之相关的对象也会**继承**这些变化。\n - 终点：原型链的顶端，是`Object.prototype`, 它的`__proto__`指向`null`.\n\n# 8.JavaScript的闭包\n\n 1. 概念\n\t闭包是一种手段，一个有权访问另一个函数作用域中变量的函数，记住闭包也是函数。\n\t\n 2. 创建闭包\n  最常见的方式，就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量(相当于一个对外的接口)。\n  \n 3. 作用\n\t利用闭包可以突破作用域链，将函数内部的变量方法传递到外部。\n\t\n 4. 特性\n\t\t 1. 函数内再嵌套函数\n\t\t 2. 内部函数可以引用外层的参数和变量\n\t\t 3. 参数和变量不会被垃圾回收机制回收\n\n# 9. new操作符到底干了什么？\n 1. 创建一个空对象，将this指针指向该对象，同时继承该函数的原型。\n 2. 属性和方法被添加到this指向的对象中。\n 3. 新创建的对象由this所应用，并且最后隐式的返回this 。\n \n ```js\n var obj = {};\n obj.__proto__ = Base.prototype;\n Base.call(obj);\n ```\n\n\n# 10. JavaScript开发的基本规范\n\n 1. 不要在同一行声明多个变量；\n 2. 请使用 ===/!==来比较布尔值或者数值；\n 3. 使用对象字面量替代 new Array这种形式；\n 4. 不要使用全局函数；\n 5. Switch语句必须带有default分支；\n 6. 函数应该有返回值；\n 7. For循环必须使用大括号；\n 8. if语句必须使用大括号；\n 9. for-in循环中的变量应该使用let 关键字明确限定作用域，避免命名空间污染。\n\n\n----------\nTo be continue。","slug":"2017-03-06 JavaScript精髓(1)","published":1,"updated":"2019-02-20T13:32:22.927Z","_id":"cjstph3wu000188zb8h5mzl01","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这篇文章主要总结了JavaScript的基础，包括数据类型，值和易混淆的概念。<br><a id=\"more\"></a></p>\n<h1 id=\"1-JavaScript的基本数据类型\"><a href=\"#1-JavaScript的基本数据类型\" class=\"headerlink\" title=\"1. JavaScript的基本数据类型\"></a>1. JavaScript的基本数据类型</h1><ol>\n<li>Undefined</li>\n<li>Null</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Symbol(ES2015新增)</li>\n</ol>\n<h1 id=\"2-JavaScript的内置对象\"><a href=\"#2-JavaScript的内置对象\" class=\"headerlink\" title=\"2. JavaScript的内置对象\"></a>2. JavaScript的内置对象</h1><ul>\n<li>Object 是JS中所有对象的父对象</li>\n<li>数据封装类对象：<ol>\n<li>Object</li>\n<li>Array</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ol>\n</li>\n<li>其他对象：<ol>\n<li>Function</li>\n<li>Arguments</li>\n<li>Math</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error </li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>参考文档：<a href=\"http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html\" target=\"_blank\" rel=\"noopener\">文档链接</a></p>\n</blockquote>\n<h1 id=\"3-JavaScript-中有几种类型的值？\"><a href=\"#3-JavaScript-中有几种类型的值？\" class=\"headerlink\" title=\"3. JavaScript 中有几种类型的值？\"></a>3. JavaScript 中有几种类型的值？</h1><ul>\n<li>栈(Stack)：原始(primitive)数据类型(Undefined, Null , Boolean, Number, String)</li>\n<li><p>堆(Heap)：合成(complex)数据类型(Object, Array, Function)</p>\n</li>\n<li><p>两种类型的区别是： <strong>存储位置不同</strong></p>\n</li>\n<li>原始数据类型：直接存储在<strong>栈</strong>中的简单数据段，占据空间小，大小固定，属于被频繁使用的数据，所以放入栈中存储；</li>\n<li><p>引用数据类型：存储在堆(Heap)中的对象，占据空间大，大小不固定。如果存储在栈中，则会影响程序的性能。</p>\n<blockquote>\n<p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后，从堆中获得实体。</p>\n</blockquote>\n</li>\n<li><p>内存图：<br><img src=\"https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966\" alt=\"enter image description here\"></p>\n</li>\n</ul>\n<h1 id=\"4-null和undefined的区别\"><a href=\"#4-null和undefined的区别\" class=\"headerlink\" title=\"4. null和undefined的区别\"></a>4. null和undefined的区别</h1><ul>\n<li><p>null 表示”没有对象”，即该处不应该有值，典型用法：</p>\n<blockquote>\n<ol>\n<li>作为函数的参数，表示该函数的参数不是对象。</li>\n<li>作为对象原型链的终点。 </li>\n</ol>\n</blockquote>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"built_in\">Object</span>.prototype)</span><br><span class=\"line\"><span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>undefined 表示“缺少值”，即此处应该有值，但是没有被赋值，典型用法：</p>\n<blockquote>\n<ol>\n<li>变量被声明了，但是没有赋值，默认等于undefined。</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>\n<li>对象没有赋值的属性，该属性默认值为undefined。</li>\n<li>函数没有返回值时，默认返回undefined。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\">i  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"built_in\">console</span>.log(x)&#125;</span><br><span class=\"line\">f() <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">o.p <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = f();</span><br><span class=\"line\">x <span class=\"comment\">//undefinde</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二者的测试</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> == <span class=\"string\">\"undefined\"</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> == <span class=\"string\">\"object\"</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>)   <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>)  <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>注意：<br> 在验证null时，一定要使用 <code>===</code>,因为 <code>==</code> 无法分辨null和undefined：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打个比方： </p>\n<ul>\n<li>null<ul>\n<li>Q: 有张三这个人吗？</li>\n<li>A:  有！</li>\n<li>Q: 张三有房子吗？</li>\n<li>A: 没有！</li>\n</ul>\n</li>\n<li>undefined<ul>\n<li>Q: 有张三这个人吗？</li>\n<li>A: 有！</li>\n<li>Q: 张三多少岁了？</li>\n<li>A: 不知道（没有被告诉）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"5-JavaScript的this\"><a href=\"#5-JavaScript的this\" class=\"headerlink\" title=\"5. JavaScript的this\"></a>5. JavaScript的this</h1><ul>\n<li>this是一个指针</li>\n<li>this的指向：<ol>\n<li>函数直接调用时：this指向函数的直接调用者；</li>\n<li>通过new关键字，this指向new产生的新对象；</li>\n<li>通过call/apply/bind的绑定，this指向绑定对象。</li>\n<li>在JS事件中，this指向触发这个事件的对象，但是在IE中，attachEvent中的this总是指向全局对象Window。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"6-JavaScript的作用域链\"><a href=\"#6-JavaScript的作用域链\" class=\"headerlink\" title=\"6.JavaScript的作用域链\"></a>6.JavaScript的作用域链</h1><p>全局函数无法查看局部函数的内部细节，但局部函数刻意查看上层函数的细节，直至全局细节。</p>\n<p>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。</p>\n<h1 id=\"7-JavaScript原型和原型链\"><a href=\"#7-JavaScript原型和原型链\" class=\"headerlink\" title=\"7. JavaScript原型和原型链\"></a>7. JavaScript原型和原型链</h1><ul>\n<li><p>原型：每个对象都会在其内部初始化一个属性，就是prototype(原型)。换句话说，<strong>所有对象都是以对象为模板创建实例的。</strong></p>\n</li>\n<li><p>原型链：当我们访问一个对象的属性A时，如果属性A不存在于该对象中，那么我们会去prototype里查找A，而这个prototype又会有自己的prototype，于是就如此查找下去，就形成了一个原型链。这个原型链表示的是一种连带关系。</p>\n</li>\n<li><p>关系：<code>instance.constructor.prototype = instance.__proto__</code></p>\n</li>\n<li><p>特点：JS对象是通过<strong>引用传递</strong>的（对比于值传递），我们创建的每一个新对象实体中，并没有一份属于自己的原型副本。当我们修改了原型，与之相关的对象也会<strong>继承</strong>这些变化。</p>\n</li>\n<li>终点：原型链的顶端，是<code>Object.prototype</code>, 它的<code>__proto__</code>指向<code>null</code>.</li>\n</ul>\n<h1 id=\"8-JavaScript的闭包\"><a href=\"#8-JavaScript的闭包\" class=\"headerlink\" title=\"8.JavaScript的闭包\"></a>8.JavaScript的闭包</h1><ol>\n<li><p>概念<br>闭包是一种手段，一个有权访问另一个函数作用域中变量的函数，记住闭包也是函数。</p>\n</li>\n<li><p>创建闭包<br>最常见的方式，就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量(相当于一个对外的接口)。</p>\n</li>\n<li><p>作用<br>利用闭包可以突破作用域链，将函数内部的变量方法传递到外部。</p>\n</li>\n<li><p>特性</p>\n<pre><code>1. 函数内再嵌套函数\n2. 内部函数可以引用外层的参数和变量\n3. 参数和变量不会被垃圾回收机制回收\n</code></pre></li>\n</ol>\n<h1 id=\"9-new操作符到底干了什么？\"><a href=\"#9-new操作符到底干了什么？\" class=\"headerlink\" title=\"9. new操作符到底干了什么？\"></a>9. new操作符到底干了什么？</h1><ol>\n<li>创建一个空对象，将this指针指向该对象，同时继承该函数的原型。</li>\n<li>属性和方法被添加到this指向的对象中。</li>\n<li><p>新创建的对象由this所应用，并且最后隐式的返回this 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.__proto__ = Base.prototype;</span><br><span class=\"line\">Base.call(obj);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"10-JavaScript开发的基本规范\"><a href=\"#10-JavaScript开发的基本规范\" class=\"headerlink\" title=\"10. JavaScript开发的基本规范\"></a>10. JavaScript开发的基本规范</h1><ol>\n<li>不要在同一行声明多个变量；</li>\n<li>请使用 ===/!==来比较布尔值或者数值；</li>\n<li>使用对象字面量替代 new Array这种形式；</li>\n<li>不要使用全局函数；</li>\n<li>Switch语句必须带有default分支；</li>\n<li>函数应该有返回值；</li>\n<li>For循环必须使用大括号；</li>\n<li>if语句必须使用大括号；</li>\n<li>for-in循环中的变量应该使用let 关键字明确限定作用域，避免命名空间污染。</li>\n</ol>\n<hr>\n<p>To be continue。</p>\n","site":{"data":{}},"excerpt":"<p>这篇文章主要总结了JavaScript的基础，包括数据类型，值和易混淆的概念。<br>","more":"</p>\n<h1 id=\"1-JavaScript的基本数据类型\"><a href=\"#1-JavaScript的基本数据类型\" class=\"headerlink\" title=\"1. JavaScript的基本数据类型\"></a>1. JavaScript的基本数据类型</h1><ol>\n<li>Undefined</li>\n<li>Null</li>\n<li>Number</li>\n<li>Boolean</li>\n<li>String</li>\n<li>Symbol(ES2015新增)</li>\n</ol>\n<h1 id=\"2-JavaScript的内置对象\"><a href=\"#2-JavaScript的内置对象\" class=\"headerlink\" title=\"2. JavaScript的内置对象\"></a>2. JavaScript的内置对象</h1><ul>\n<li>Object 是JS中所有对象的父对象</li>\n<li>数据封装类对象：<ol>\n<li>Object</li>\n<li>Array</li>\n<li>Boolean</li>\n<li>Number</li>\n<li>String</li>\n</ol>\n</li>\n<li>其他对象：<ol>\n<li>Function</li>\n<li>Arguments</li>\n<li>Math</li>\n<li>Date</li>\n<li>RegExp</li>\n<li>Error </li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>参考文档：<a href=\"http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html\" target=\"_blank\" rel=\"noopener\">文档链接</a></p>\n</blockquote>\n<h1 id=\"3-JavaScript-中有几种类型的值？\"><a href=\"#3-JavaScript-中有几种类型的值？\" class=\"headerlink\" title=\"3. JavaScript 中有几种类型的值？\"></a>3. JavaScript 中有几种类型的值？</h1><ul>\n<li>栈(Stack)：原始(primitive)数据类型(Undefined, Null , Boolean, Number, String)</li>\n<li><p>堆(Heap)：合成(complex)数据类型(Object, Array, Function)</p>\n</li>\n<li><p>两种类型的区别是： <strong>存储位置不同</strong></p>\n</li>\n<li>原始数据类型：直接存储在<strong>栈</strong>中的简单数据段，占据空间小，大小固定，属于被频繁使用的数据，所以放入栈中存储；</li>\n<li><p>引用数据类型：存储在堆(Heap)中的对象，占据空间大，大小不固定。如果存储在栈中，则会影响程序的性能。</p>\n<blockquote>\n<p>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后，从堆中获得实体。</p>\n</blockquote>\n</li>\n<li><p>内存图：<br><img src=\"https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966\" alt=\"enter image description here\"></p>\n</li>\n</ul>\n<h1 id=\"4-null和undefined的区别\"><a href=\"#4-null和undefined的区别\" class=\"headerlink\" title=\"4. null和undefined的区别\"></a>4. null和undefined的区别</h1><ul>\n<li><p>null 表示”没有对象”，即该处不应该有值，典型用法：</p>\n<blockquote>\n<ol>\n<li>作为函数的参数，表示该函数的参数不是对象。</li>\n<li>作为对象原型链的终点。 </li>\n</ol>\n</blockquote>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(<span class=\"built_in\">Object</span>.prototype)</span><br><span class=\"line\"><span class=\"comment\">//null</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>undefined 表示“缺少值”，即此处应该有值，但是没有被赋值，典型用法：</p>\n<blockquote>\n<ol>\n<li>变量被声明了，但是没有赋值，默认等于undefined。</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li>\n<li>对象没有赋值的属性，该属性默认值为undefined。</li>\n<li>函数没有返回值时，默认返回undefined。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i;</span><br><span class=\"line\">i  <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>)</span>&#123;<span class=\"built_in\">console</span>.log(x)&#125;</span><br><span class=\"line\">f() <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">o.p <span class=\"comment\">//undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = f();</span><br><span class=\"line\">x <span class=\"comment\">//undefinde</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二者的测试</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> == <span class=\"string\">\"undefined\"</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> == <span class=\"string\">\"object\"</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">undefined</span>)   <span class=\"comment\">//NaN</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"literal\">null</span>)  <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>注意：<br> 在验证null时，一定要使用 <code>===</code>,因为 <code>==</code> 无法分辨null和undefined：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span> <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> === <span class=\"literal\">undefined</span> <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打个比方： </p>\n<ul>\n<li>null<ul>\n<li>Q: 有张三这个人吗？</li>\n<li>A:  有！</li>\n<li>Q: 张三有房子吗？</li>\n<li>A: 没有！</li>\n</ul>\n</li>\n<li>undefined<ul>\n<li>Q: 有张三这个人吗？</li>\n<li>A: 有！</li>\n<li>Q: 张三多少岁了？</li>\n<li>A: 不知道（没有被告诉）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"5-JavaScript的this\"><a href=\"#5-JavaScript的this\" class=\"headerlink\" title=\"5. JavaScript的this\"></a>5. JavaScript的this</h1><ul>\n<li>this是一个指针</li>\n<li>this的指向：<ol>\n<li>函数直接调用时：this指向函数的直接调用者；</li>\n<li>通过new关键字，this指向new产生的新对象；</li>\n<li>通过call/apply/bind的绑定，this指向绑定对象。</li>\n<li>在JS事件中，this指向触发这个事件的对象，但是在IE中，attachEvent中的this总是指向全局对象Window。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"6-JavaScript的作用域链\"><a href=\"#6-JavaScript的作用域链\" class=\"headerlink\" title=\"6.JavaScript的作用域链\"></a>6.JavaScript的作用域链</h1><p>全局函数无法查看局部函数的内部细节，但局部函数刻意查看上层函数的细节，直至全局细节。</p>\n<p>当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。</p>\n<h1 id=\"7-JavaScript原型和原型链\"><a href=\"#7-JavaScript原型和原型链\" class=\"headerlink\" title=\"7. JavaScript原型和原型链\"></a>7. JavaScript原型和原型链</h1><ul>\n<li><p>原型：每个对象都会在其内部初始化一个属性，就是prototype(原型)。换句话说，<strong>所有对象都是以对象为模板创建实例的。</strong></p>\n</li>\n<li><p>原型链：当我们访问一个对象的属性A时，如果属性A不存在于该对象中，那么我们会去prototype里查找A，而这个prototype又会有自己的prototype，于是就如此查找下去，就形成了一个原型链。这个原型链表示的是一种连带关系。</p>\n</li>\n<li><p>关系：<code>instance.constructor.prototype = instance.__proto__</code></p>\n</li>\n<li><p>特点：JS对象是通过<strong>引用传递</strong>的（对比于值传递），我们创建的每一个新对象实体中，并没有一份属于自己的原型副本。当我们修改了原型，与之相关的对象也会<strong>继承</strong>这些变化。</p>\n</li>\n<li>终点：原型链的顶端，是<code>Object.prototype</code>, 它的<code>__proto__</code>指向<code>null</code>.</li>\n</ul>\n<h1 id=\"8-JavaScript的闭包\"><a href=\"#8-JavaScript的闭包\" class=\"headerlink\" title=\"8.JavaScript的闭包\"></a>8.JavaScript的闭包</h1><ol>\n<li><p>概念<br>闭包是一种手段，一个有权访问另一个函数作用域中变量的函数，记住闭包也是函数。</p>\n</li>\n<li><p>创建闭包<br>最常见的方式，就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量(相当于一个对外的接口)。</p>\n</li>\n<li><p>作用<br>利用闭包可以突破作用域链，将函数内部的变量方法传递到外部。</p>\n</li>\n<li><p>特性</p>\n<pre><code>1. 函数内再嵌套函数\n2. 内部函数可以引用外层的参数和变量\n3. 参数和变量不会被垃圾回收机制回收\n</code></pre></li>\n</ol>\n<h1 id=\"9-new操作符到底干了什么？\"><a href=\"#9-new操作符到底干了什么？\" class=\"headerlink\" title=\"9. new操作符到底干了什么？\"></a>9. new操作符到底干了什么？</h1><ol>\n<li>创建一个空对象，将this指针指向该对象，同时继承该函数的原型。</li>\n<li>属性和方法被添加到this指向的对象中。</li>\n<li><p>新创建的对象由this所应用，并且最后隐式的返回this 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.__proto__ = Base.prototype;</span><br><span class=\"line\">Base.call(obj);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"10-JavaScript开发的基本规范\"><a href=\"#10-JavaScript开发的基本规范\" class=\"headerlink\" title=\"10. JavaScript开发的基本规范\"></a>10. JavaScript开发的基本规范</h1><ol>\n<li>不要在同一行声明多个变量；</li>\n<li>请使用 ===/!==来比较布尔值或者数值；</li>\n<li>使用对象字面量替代 new Array这种形式；</li>\n<li>不要使用全局函数；</li>\n<li>Switch语句必须带有default分支；</li>\n<li>函数应该有返回值；</li>\n<li>For循环必须使用大括号；</li>\n<li>if语句必须使用大括号；</li>\n<li>for-in循环中的变量应该使用let 关键字明确限定作用域，避免命名空间污染。</li>\n</ol>\n<hr>\n<p>To be continue。</p>"},{"title":"JavaScript精髓(2)","date":"2017-03-06T16:00:00.000Z","update":"2017-07-10T16:00:00.000Z","_content":"\n这篇博客延续上一篇[JavaScript精髓(1)](#)，继续总结JavaScript语言的核心特性和思想精髓。\n<!--more-->\n\n# 1. JavaScript继承的实现方式\n 1. 构造继承\n 2. 原型继承\n 3. 实例继承\n 4. 拷贝继承\n\n **原型prototype机制或者apply/call方法较简单，建议使用`构造函数与原型混合方式`。**\n \n```js\nfunction Parent(){\n\tthis.name = 'wang';\n}\nfunction Child(){\n\tthis.age = 28;\n}\nChild.prototype = new Parent();\t//通过prototype，继承Parent\t\n\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);\t//得到继承的属性\n```\n\n\n\n \n# 2. DOM操作——添加、移除、移动、复制、创建和查找节点\n 3. 创建新节点\n 4. createDocumentFragment()\n 5. createElement()\n 6. createTextNode()\n 7. 添加、移除、替换、插入\n 8. appendChild()\n 9. removeChild()\n 10. replaceChild()\n 11. insertBefore()\n 12. 查找\n 13. getElementsByTagName()\n 14. getElementsByName()\n 15. getElementById()\n  \n# 3. Ajax的概念和用法\n 1. AJAX的全称： Asynchronous JavaScript And XML.\n 2. 异步的概念：向服务器发送请求时，不必等待结果，而可以同时做其他事情。\n 3. Ajax用法：\n\t 1. 创建XMLHttpRequest对象，也就是创建一个异步调用对象，\n\t 2. 创建一个新的HTTP请求，并指定该HTTP请求的方法、URL和验证信息，\n\t 3. 设置响应HTTP请求状态变化的函数，\n\t 4. 发送HTTP请求，\n\t 5. 获取异步调用返回的数据，\n\t 6. 使用JavaScript和DOM实现局部刷新 。\n\n  \n# 4. document.write 和 innerHTML的区别\n 1. document.write只能重绘**整个页面**\n 2. innerHTML可以只重绘**页面的一部分**\n\n\n\n# 5. window对象和document对象\n\n - window对象：指的是浏览器打开的窗口\n - document对象：Document对象的一个只读引用，它是window对象的一个属性。\n\n# 6. 通用的事件侦听器函数\n```javascript\n//event工具集，参考来源：github.com/markyun\nmarkyun.Event = {\n\treadyEvent : function(fn){\n\t\tif(fn==null){\n\t\t\tfn = document;\n\t\t}\n\t\tvar oldonload = window.onload;\n\t\tif(typeof window.onload != 'function'){\n\t\t\twindow.onload = fn;\n\t\t}else{\n\t\t\twindow.onload = function(){\n\t\t\t\toldonolad():\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\t\n\t},\n\t//根据能力分别使用DOM 0级 || DOM 2级 || IE方式，来绑定事件\n\t//参数：操作元素，事件名称，事件处理函数\n\taddEvent: function(element, type, handler){\n\t\tif(element.addEventListener){\n\t\t\t//事件类型，需要执行的函数，是否捕捉\n\t\t\telement.addEventListener(type, handler, false);\n\t\t}else if(element.attachEvent){\n\t\t\telement.attachEvent('on' + type, function(){\n\t\t\thandler.call(element);\n\t\t\t});\n\t\t}else{\n\t\t\telement['on' + type ] = handler;\n\t\t}\t\n\t},\n\t\n\t//移除事件\n\tremoveEvent: function(element,type,handler){\n\t\tif(element.removeEventListener){\n\t\t\telement.removeEventListener(type,handler,false);\t\n\t\t}else if(element.detachEvent){\n\t\t\telement.detachEvent('on' + type, handler);\t\t\t\n\t\t}else {\n\t\t\telement['on' + type] = null;\t\n\t\t}\t\n\t}, //End removeEvent\n\t\n\t//阻止事件(主要是事件冒泡， 因为IE不支持事件捕获)\n\tstopPropagation: function(ev){\n\t\tif(ev.stopPropagation){\n\t\t\t\tev.stopPropagation();\n\t\t}else{\n\t\t\tev.cancelBubble = true;\n\t\t}\n\t}, \n\t\n\t//取消事件的默认行为\n\tpreventDefault : function(event){\n\t\tif(event.preventDefault){\n\t\t\tevent.preventDefault();\n\t\t}else{\n\t\t\tevent.returnValue = false;\n\t},\n\t\n\t//获取事件目标\n\tgetTarget: function(event){\n\t\treturn event.target || event.srcElement;\n\t},\n\n\t//获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n\tgetEvent: function(e){\n\t\tvar ev = e || window.event;\n\t\tif(!ev){\n\t\t\tvar c = this.getEvent.caller;\n\t\t\twhile(c){\n\t\t\t\tev = c.arguments[0];\n\t\t\t\tif(ev && Event == ev.constructor){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tc = c.caller;\n\t\t\t}\t\n\t\t}\n\t\treturn ev;\t\n\t}\n\t\t\n} //End\n```\n","source":"_posts/2017-03-07 JavaScript精髓(2).md","raw":"---\ntitle: JavaScript精髓(2)\ncategories: 技术\ndate: 2017-03-07 \nupdate: 2017-07-11\ntags: JavaScript\n---\n\n这篇博客延续上一篇[JavaScript精髓(1)](#)，继续总结JavaScript语言的核心特性和思想精髓。\n<!--more-->\n\n# 1. JavaScript继承的实现方式\n 1. 构造继承\n 2. 原型继承\n 3. 实例继承\n 4. 拷贝继承\n\n **原型prototype机制或者apply/call方法较简单，建议使用`构造函数与原型混合方式`。**\n \n```js\nfunction Parent(){\n\tthis.name = 'wang';\n}\nfunction Child(){\n\tthis.age = 28;\n}\nChild.prototype = new Parent();\t//通过prototype，继承Parent\t\n\nvar demo = new Child();\nalert(demo.age);\nalert(demo.name);\t//得到继承的属性\n```\n\n\n\n \n# 2. DOM操作——添加、移除、移动、复制、创建和查找节点\n 3. 创建新节点\n 4. createDocumentFragment()\n 5. createElement()\n 6. createTextNode()\n 7. 添加、移除、替换、插入\n 8. appendChild()\n 9. removeChild()\n 10. replaceChild()\n 11. insertBefore()\n 12. 查找\n 13. getElementsByTagName()\n 14. getElementsByName()\n 15. getElementById()\n  \n# 3. Ajax的概念和用法\n 1. AJAX的全称： Asynchronous JavaScript And XML.\n 2. 异步的概念：向服务器发送请求时，不必等待结果，而可以同时做其他事情。\n 3. Ajax用法：\n\t 1. 创建XMLHttpRequest对象，也就是创建一个异步调用对象，\n\t 2. 创建一个新的HTTP请求，并指定该HTTP请求的方法、URL和验证信息，\n\t 3. 设置响应HTTP请求状态变化的函数，\n\t 4. 发送HTTP请求，\n\t 5. 获取异步调用返回的数据，\n\t 6. 使用JavaScript和DOM实现局部刷新 。\n\n  \n# 4. document.write 和 innerHTML的区别\n 1. document.write只能重绘**整个页面**\n 2. innerHTML可以只重绘**页面的一部分**\n\n\n\n# 5. window对象和document对象\n\n - window对象：指的是浏览器打开的窗口\n - document对象：Document对象的一个只读引用，它是window对象的一个属性。\n\n# 6. 通用的事件侦听器函数\n```javascript\n//event工具集，参考来源：github.com/markyun\nmarkyun.Event = {\n\treadyEvent : function(fn){\n\t\tif(fn==null){\n\t\t\tfn = document;\n\t\t}\n\t\tvar oldonload = window.onload;\n\t\tif(typeof window.onload != 'function'){\n\t\t\twindow.onload = fn;\n\t\t}else{\n\t\t\twindow.onload = function(){\n\t\t\t\toldonolad():\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\t\n\t},\n\t//根据能力分别使用DOM 0级 || DOM 2级 || IE方式，来绑定事件\n\t//参数：操作元素，事件名称，事件处理函数\n\taddEvent: function(element, type, handler){\n\t\tif(element.addEventListener){\n\t\t\t//事件类型，需要执行的函数，是否捕捉\n\t\t\telement.addEventListener(type, handler, false);\n\t\t}else if(element.attachEvent){\n\t\t\telement.attachEvent('on' + type, function(){\n\t\t\thandler.call(element);\n\t\t\t});\n\t\t}else{\n\t\t\telement['on' + type ] = handler;\n\t\t}\t\n\t},\n\t\n\t//移除事件\n\tremoveEvent: function(element,type,handler){\n\t\tif(element.removeEventListener){\n\t\t\telement.removeEventListener(type,handler,false);\t\n\t\t}else if(element.detachEvent){\n\t\t\telement.detachEvent('on' + type, handler);\t\t\t\n\t\t}else {\n\t\t\telement['on' + type] = null;\t\n\t\t}\t\n\t}, //End removeEvent\n\t\n\t//阻止事件(主要是事件冒泡， 因为IE不支持事件捕获)\n\tstopPropagation: function(ev){\n\t\tif(ev.stopPropagation){\n\t\t\t\tev.stopPropagation();\n\t\t}else{\n\t\t\tev.cancelBubble = true;\n\t\t}\n\t}, \n\t\n\t//取消事件的默认行为\n\tpreventDefault : function(event){\n\t\tif(event.preventDefault){\n\t\t\tevent.preventDefault();\n\t\t}else{\n\t\t\tevent.returnValue = false;\n\t},\n\t\n\t//获取事件目标\n\tgetTarget: function(event){\n\t\treturn event.target || event.srcElement;\n\t},\n\n\t//获取event对象的引用，取到事件的所有信息，确保随时能使用event；\n\tgetEvent: function(e){\n\t\tvar ev = e || window.event;\n\t\tif(!ev){\n\t\t\tvar c = this.getEvent.caller;\n\t\t\twhile(c){\n\t\t\t\tev = c.arguments[0];\n\t\t\t\tif(ev && Event == ev.constructor){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tc = c.caller;\n\t\t\t}\t\n\t\t}\n\t\treturn ev;\t\n\t}\n\t\t\n} //End\n```\n","slug":"2017-03-07 JavaScript精髓(2)","published":1,"updated":"2019-02-20T13:32:22.927Z","_id":"cjstph3x0000488zb4xox0pty","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这篇博客延续上一篇<a href=\"#\">JavaScript精髓(1)</a>，继续总结JavaScript语言的核心特性和思想精髓。<br><a id=\"more\"></a></p>\n<h1 id=\"1-JavaScript继承的实现方式\"><a href=\"#1-JavaScript继承的实现方式\" class=\"headerlink\" title=\"1. JavaScript继承的实现方式\"></a>1. JavaScript继承的实现方式</h1><ol>\n<li>构造继承</li>\n<li>原型继承</li>\n<li>实例继承</li>\n<li><p>拷贝继承</p>\n<p><strong>原型prototype机制或者apply/call方法较简单，建议使用<code>构造函数与原型混合方式</code>。</strong></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'wang'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">28</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();\t<span class=\"comment\">//通过prototype，继承Parent\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">alert(demo.age);</span><br><span class=\"line\">alert(demo.name);\t<span class=\"comment\">//得到继承的属性</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-DOM操作——添加、移除、移动、复制、创建和查找节点\"><a href=\"#2-DOM操作——添加、移除、移动、复制、创建和查找节点\" class=\"headerlink\" title=\"2. DOM操作——添加、移除、移动、复制、创建和查找节点\"></a>2. DOM操作——添加、移除、移动、复制、创建和查找节点</h1><ol start=\"3\">\n<li>创建新节点</li>\n<li>createDocumentFragment()</li>\n<li>createElement()</li>\n<li>createTextNode()</li>\n<li>添加、移除、替换、插入</li>\n<li>appendChild()</li>\n<li>removeChild()</li>\n<li>replaceChild()</li>\n<li>insertBefore()</li>\n<li>查找</li>\n<li>getElementsByTagName()</li>\n<li>getElementsByName()</li>\n<li>getElementById()</li>\n</ol>\n<h1 id=\"3-Ajax的概念和用法\"><a href=\"#3-Ajax的概念和用法\" class=\"headerlink\" title=\"3. Ajax的概念和用法\"></a>3. Ajax的概念和用法</h1><ol>\n<li>AJAX的全称： Asynchronous JavaScript And XML.</li>\n<li>异步的概念：向服务器发送请求时，不必等待结果，而可以同时做其他事情。</li>\n<li>Ajax用法：<ol>\n<li>创建XMLHttpRequest对象，也就是创建一个异步调用对象，</li>\n<li>创建一个新的HTTP请求，并指定该HTTP请求的方法、URL和验证信息，</li>\n<li>设置响应HTTP请求状态变化的函数，</li>\n<li>发送HTTP请求，</li>\n<li>获取异步调用返回的数据，</li>\n<li>使用JavaScript和DOM实现局部刷新 。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"4-document-write-和-innerHTML的区别\"><a href=\"#4-document-write-和-innerHTML的区别\" class=\"headerlink\" title=\"4. document.write 和 innerHTML的区别\"></a>4. document.write 和 innerHTML的区别</h1><ol>\n<li>document.write只能重绘<strong>整个页面</strong></li>\n<li>innerHTML可以只重绘<strong>页面的一部分</strong></li>\n</ol>\n<h1 id=\"5-window对象和document对象\"><a href=\"#5-window对象和document对象\" class=\"headerlink\" title=\"5. window对象和document对象\"></a>5. window对象和document对象</h1><ul>\n<li>window对象：指的是浏览器打开的窗口</li>\n<li>document对象：Document对象的一个只读引用，它是window对象的一个属性。</li>\n</ul>\n<h1 id=\"6-通用的事件侦听器函数\"><a href=\"#6-通用的事件侦听器函数\" class=\"headerlink\" title=\"6. 通用的事件侦听器函数\"></a>6. 通用的事件侦听器函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//event工具集，参考来源：github.com/markyun</span></span><br><span class=\"line\">markyun.Event = &#123;</span><br><span class=\"line\">\treadyEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fn==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tfn = <span class=\"built_in\">document</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> oldonload = <span class=\"built_in\">window</span>.onload;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.onload != <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.onload = fn;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\toldonolad():</span><br><span class=\"line\">\t\t\t\tfn();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//根据能力分别使用DOM 0级 || DOM 2级 || IE方式，来绑定事件</span></span><br><span class=\"line\">\t<span class=\"comment\">//参数：操作元素，事件名称，事件处理函数</span></span><br><span class=\"line\">\taddEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(element.addEventListener)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//事件类型，需要执行的函数，是否捕捉</span></span><br><span class=\"line\">\t\t\telement.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(element.attachEvent)&#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\thandler.call(element);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type ] = handler;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//移除事件</span></span><br><span class=\"line\">\tremoveEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element,type,handler</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(element.removeEventListener)&#123;</span><br><span class=\"line\">\t\t\telement.removeEventListener(type,handler,<span class=\"literal\">false</span>);\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(element.detachEvent)&#123;</span><br><span class=\"line\">\t\t\telement.detachEvent(<span class=\"string\">'on'</span> + type, handler);\t\t\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;\t</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;, <span class=\"comment\">//End removeEvent</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//阻止事件(主要是事件冒泡， 因为IE不支持事件捕获)</span></span><br><span class=\"line\">\tstopPropagation: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ev.stopPropagation)&#123;</span><br><span class=\"line\">\t\t\t\tev.stopPropagation();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tev.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//取消事件的默认行为</span></span><br><span class=\"line\">\tpreventDefault : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(event.preventDefault)&#123;</span><br><span class=\"line\">\t\t\tevent.preventDefault();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tevent.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取事件目标</span></span><br><span class=\"line\">\tgetTarget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> event.target || event.srcElement;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class=\"line\">\tgetEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!ev)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> c = <span class=\"keyword\">this</span>.getEvent.caller;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(c)&#123;</span><br><span class=\"line\">\t\t\t\tev = c.arguments[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(ev &amp;&amp; Event == ev.constructor)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tc = c.caller;</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ev;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125; <span class=\"comment\">//End</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇博客延续上一篇<a href=\"#\">JavaScript精髓(1)</a>，继续总结JavaScript语言的核心特性和思想精髓。<br>","more":"</p>\n<h1 id=\"1-JavaScript继承的实现方式\"><a href=\"#1-JavaScript继承的实现方式\" class=\"headerlink\" title=\"1. JavaScript继承的实现方式\"></a>1. JavaScript继承的实现方式</h1><ol>\n<li>构造继承</li>\n<li>原型继承</li>\n<li>实例继承</li>\n<li><p>拷贝继承</p>\n<p><strong>原型prototype机制或者apply/call方法较简单，建议使用<code>构造函数与原型混合方式</code>。</strong></p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.name = <span class=\"string\">'wang'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.age = <span class=\"number\">28</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();\t<span class=\"comment\">//通过prototype，继承Parent\t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> demo = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\">alert(demo.age);</span><br><span class=\"line\">alert(demo.name);\t<span class=\"comment\">//得到继承的属性</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-DOM操作——添加、移除、移动、复制、创建和查找节点\"><a href=\"#2-DOM操作——添加、移除、移动、复制、创建和查找节点\" class=\"headerlink\" title=\"2. DOM操作——添加、移除、移动、复制、创建和查找节点\"></a>2. DOM操作——添加、移除、移动、复制、创建和查找节点</h1><ol start=\"3\">\n<li>创建新节点</li>\n<li>createDocumentFragment()</li>\n<li>createElement()</li>\n<li>createTextNode()</li>\n<li>添加、移除、替换、插入</li>\n<li>appendChild()</li>\n<li>removeChild()</li>\n<li>replaceChild()</li>\n<li>insertBefore()</li>\n<li>查找</li>\n<li>getElementsByTagName()</li>\n<li>getElementsByName()</li>\n<li>getElementById()</li>\n</ol>\n<h1 id=\"3-Ajax的概念和用法\"><a href=\"#3-Ajax的概念和用法\" class=\"headerlink\" title=\"3. Ajax的概念和用法\"></a>3. Ajax的概念和用法</h1><ol>\n<li>AJAX的全称： Asynchronous JavaScript And XML.</li>\n<li>异步的概念：向服务器发送请求时，不必等待结果，而可以同时做其他事情。</li>\n<li>Ajax用法：<ol>\n<li>创建XMLHttpRequest对象，也就是创建一个异步调用对象，</li>\n<li>创建一个新的HTTP请求，并指定该HTTP请求的方法、URL和验证信息，</li>\n<li>设置响应HTTP请求状态变化的函数，</li>\n<li>发送HTTP请求，</li>\n<li>获取异步调用返回的数据，</li>\n<li>使用JavaScript和DOM实现局部刷新 。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"4-document-write-和-innerHTML的区别\"><a href=\"#4-document-write-和-innerHTML的区别\" class=\"headerlink\" title=\"4. document.write 和 innerHTML的区别\"></a>4. document.write 和 innerHTML的区别</h1><ol>\n<li>document.write只能重绘<strong>整个页面</strong></li>\n<li>innerHTML可以只重绘<strong>页面的一部分</strong></li>\n</ol>\n<h1 id=\"5-window对象和document对象\"><a href=\"#5-window对象和document对象\" class=\"headerlink\" title=\"5. window对象和document对象\"></a>5. window对象和document对象</h1><ul>\n<li>window对象：指的是浏览器打开的窗口</li>\n<li>document对象：Document对象的一个只读引用，它是window对象的一个属性。</li>\n</ul>\n<h1 id=\"6-通用的事件侦听器函数\"><a href=\"#6-通用的事件侦听器函数\" class=\"headerlink\" title=\"6. 通用的事件侦听器函数\"></a>6. 通用的事件侦听器函数</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//event工具集，参考来源：github.com/markyun</span></span><br><span class=\"line\">markyun.Event = &#123;</span><br><span class=\"line\">\treadyEvent : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fn==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tfn = <span class=\"built_in\">document</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> oldonload = <span class=\"built_in\">window</span>.onload;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.onload != <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.onload = fn;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t\toldonolad():</span><br><span class=\"line\">\t\t\t\tfn();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">//根据能力分别使用DOM 0级 || DOM 2级 || IE方式，来绑定事件</span></span><br><span class=\"line\">\t<span class=\"comment\">//参数：操作元素，事件名称，事件处理函数</span></span><br><span class=\"line\">\taddEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(element.addEventListener)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//事件类型，需要执行的函数，是否捕捉</span></span><br><span class=\"line\">\t\t\telement.addEventListener(type, handler, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(element.attachEvent)&#123;</span><br><span class=\"line\">\t\t\telement.attachEvent(<span class=\"string\">'on'</span> + type, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\thandler.call(element);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type ] = handler;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//移除事件</span></span><br><span class=\"line\">\tremoveEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element,type,handler</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(element.removeEventListener)&#123;</span><br><span class=\"line\">\t\t\telement.removeEventListener(type,handler,<span class=\"literal\">false</span>);\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(element.detachEvent)&#123;</span><br><span class=\"line\">\t\t\telement.detachEvent(<span class=\"string\">'on'</span> + type, handler);\t\t\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\telement[<span class=\"string\">'on'</span> + type] = <span class=\"literal\">null</span>;\t</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;, <span class=\"comment\">//End removeEvent</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//阻止事件(主要是事件冒泡， 因为IE不支持事件捕获)</span></span><br><span class=\"line\">\tstopPropagation: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ev</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ev.stopPropagation)&#123;</span><br><span class=\"line\">\t\t\t\tev.stopPropagation();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tev.cancelBubble = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;, </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//取消事件的默认行为</span></span><br><span class=\"line\">\tpreventDefault : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(event.preventDefault)&#123;</span><br><span class=\"line\">\t\t\tevent.preventDefault();</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\tevent.returnValue = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取事件目标</span></span><br><span class=\"line\">\tgetTarget: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> event.target || event.srcElement;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class=\"line\">\tgetEvent: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ev = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!ev)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> c = <span class=\"keyword\">this</span>.getEvent.caller;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(c)&#123;</span><br><span class=\"line\">\t\t\t\tev = c.arguments[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(ev &amp;&amp; Event == ev.constructor)&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tc = c.caller;</span><br><span class=\"line\">\t\t\t&#125;\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ev;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125; <span class=\"comment\">//End</span></span><br></pre></td></tr></table></figure>"},{"title":"JavaScript对象数组排序","date":"2017-05-06T16:00:00.000Z","_content":"# 对象数组排序\n\n\n----------\n\n<!-- more -->\n## 一、按照对象的属性排序\n我要一个函数，传入要对比的key，就能以这个key，把对象数组进行排序。\n```js\n//示例代码\nvar by = function(key) {\n\treturn function(o, p) {\n\t\tvar a, b;\n\t\tif (typeof o === 'object' && typeof p === 'object' && o && p) {\n\t\t\ta = o[key];\n\t\t\tb = p[key];\n\t\t\tif (a === b) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (typeof a === typeof b) {\n\t\t\t\treturn a < b ? -1 : 1;\n\t\t\t}\n\t\t\t//如果a,b所属类型不同，则按类型的英文字符排序，比如'function'排在'object'前面。\n\t\t\treturn typeof a < typeof b ? -1 : 1;\n\t\t} else {\n\t\t\tthrow('error');\n\t\t}\n\t}\n}\n\nvar employees=[]\nemployees[0]={name:\"George\", age:32, retiredate:\"March 12, 2014\"}\nemployees[1]={name:\"Edward\", age:17, retiredate:\"June 2, 2023\"}\nemployees[2]={name:\"Christine\", age:58, retiredate:\"December 20, 2036\"}\nemployees[3]={name:\"Sarah\", age:62, retiredate:\"April 30, 2020\"}\n\nemployees.sort(by('age'));\n//得到根据age属性排序的数组。\n//[{name:\"Edward\", age:17, retiredate:\"June 2, 2023\"},\n//{name:\"George\", age:32, retiredate:\"March 12, 2014\"},\n//{name:\"Christine\", age:58, retiredate:\"December 20, 2036\"},\n//{name:\"Sarah\", age:62, retiredate:\"April 30, 2020\"}]\n\n```\n\n## 二、高级by()函数\n当主要的键值产生一个匹配的时候，另一个compare方法（第二个参数）将被调用以决出高下。\n举个例子，在比较两个对象的age属性时，age的值相等，现在我想要age相等的人，按照别的属性进行排序。于是我想增强`by()` ，现在我这样使用：\n\n```\n//注意外层by函数内有俩个参数，第二个参数就是备用的比较函数。\nemployees.sort(by('age',by('name')));\n```\n\n```\nvar by = function(name,minor){\n    return function(o,p){\n        var a,b;\n        if(o && p && typeof o === 'object' && typeof p ==='object'){\n            a = o[name];\n            b = p[name];\n            if(a === b){\n\t            //如果前后元素相同时，用minor函数比较。\n                return typeof minor === 'function' ? minor(o,p):0;\n            }\n            if(typeof a === typeof b){\n                return a <b ? -1 : 1;\n            }\n            return typeof a < typeof b ? -1 : 1;\n        }else{\n            throw(\"error\");\n        }\n    }\n}\n```\n","source":"_posts/2017-05-07 JavaScript对象数组排序.md","raw":"---\ntitle: JavaScript对象数组排序\ncategories: 技术\ndate: 2017-05-07\ntags: [JavaScript, 算法]\n---\n# 对象数组排序\n\n\n----------\n\n<!-- more -->\n## 一、按照对象的属性排序\n我要一个函数，传入要对比的key，就能以这个key，把对象数组进行排序。\n```js\n//示例代码\nvar by = function(key) {\n\treturn function(o, p) {\n\t\tvar a, b;\n\t\tif (typeof o === 'object' && typeof p === 'object' && o && p) {\n\t\t\ta = o[key];\n\t\t\tb = p[key];\n\t\t\tif (a === b) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (typeof a === typeof b) {\n\t\t\t\treturn a < b ? -1 : 1;\n\t\t\t}\n\t\t\t//如果a,b所属类型不同，则按类型的英文字符排序，比如'function'排在'object'前面。\n\t\t\treturn typeof a < typeof b ? -1 : 1;\n\t\t} else {\n\t\t\tthrow('error');\n\t\t}\n\t}\n}\n\nvar employees=[]\nemployees[0]={name:\"George\", age:32, retiredate:\"March 12, 2014\"}\nemployees[1]={name:\"Edward\", age:17, retiredate:\"June 2, 2023\"}\nemployees[2]={name:\"Christine\", age:58, retiredate:\"December 20, 2036\"}\nemployees[3]={name:\"Sarah\", age:62, retiredate:\"April 30, 2020\"}\n\nemployees.sort(by('age'));\n//得到根据age属性排序的数组。\n//[{name:\"Edward\", age:17, retiredate:\"June 2, 2023\"},\n//{name:\"George\", age:32, retiredate:\"March 12, 2014\"},\n//{name:\"Christine\", age:58, retiredate:\"December 20, 2036\"},\n//{name:\"Sarah\", age:62, retiredate:\"April 30, 2020\"}]\n\n```\n\n## 二、高级by()函数\n当主要的键值产生一个匹配的时候，另一个compare方法（第二个参数）将被调用以决出高下。\n举个例子，在比较两个对象的age属性时，age的值相等，现在我想要age相等的人，按照别的属性进行排序。于是我想增强`by()` ，现在我这样使用：\n\n```\n//注意外层by函数内有俩个参数，第二个参数就是备用的比较函数。\nemployees.sort(by('age',by('name')));\n```\n\n```\nvar by = function(name,minor){\n    return function(o,p){\n        var a,b;\n        if(o && p && typeof o === 'object' && typeof p ==='object'){\n            a = o[name];\n            b = p[name];\n            if(a === b){\n\t            //如果前后元素相同时，用minor函数比较。\n                return typeof minor === 'function' ? minor(o,p):0;\n            }\n            if(typeof a === typeof b){\n                return a <b ? -1 : 1;\n            }\n            return typeof a < typeof b ? -1 : 1;\n        }else{\n            throw(\"error\");\n        }\n    }\n}\n```\n","slug":"2017-05-07 JavaScript对象数组排序","published":1,"updated":"2019-02-20T13:32:22.928Z","_id":"cjstph3x2000588zbe04fuhgr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"对象数组排序\"><a href=\"#对象数组排序\" class=\"headerlink\" title=\"对象数组排序\"></a>对象数组排序</h1><hr>\n<a id=\"more\"></a>\n<h2 id=\"一、按照对象的属性排序\"><a href=\"#一、按照对象的属性排序\" class=\"headerlink\" title=\"一、按照对象的属性排序\"></a>一、按照对象的属性排序</h2><p>我要一个函数，传入要对比的key，就能以这个key，把对象数组进行排序。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> by = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, p</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</span><br><span class=\"line\">\t\t\ta = o[key];</span><br><span class=\"line\">\t\t\tb = p[key];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果a,b所属类型不同，则按类型的英文字符排序，比如'function'排在'object'前面。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> employees=[]</span><br><span class=\"line\">employees[<span class=\"number\">0</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"George\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">32</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"March 12, 2014\"</span>&#125;</span><br><span class=\"line\">employees[<span class=\"number\">1</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Edward\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">17</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"June 2, 2023\"</span>&#125;</span><br><span class=\"line\">employees[<span class=\"number\">2</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Christine\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">58</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"December 20, 2036\"</span>&#125;</span><br><span class=\"line\">employees[<span class=\"number\">3</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Sarah\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">62</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"April 30, 2020\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">employees.sort(by(<span class=\"string\">'age'</span>));</span><br><span class=\"line\"><span class=\"comment\">//得到根据age属性排序的数组。</span></span><br><span class=\"line\"><span class=\"comment\">//[&#123;name:\"Edward\", age:17, retiredate:\"June 2, 2023\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;name:\"George\", age:32, retiredate:\"March 12, 2014\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;name:\"Christine\", age:58, retiredate:\"December 20, 2036\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;name:\"Sarah\", age:62, retiredate:\"April 30, 2020\"&#125;]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、高级by-函数\"><a href=\"#二、高级by-函数\" class=\"headerlink\" title=\"二、高级by()函数\"></a>二、高级by()函数</h2><p>当主要的键值产生一个匹配的时候，另一个compare方法（第二个参数）将被调用以决出高下。<br>举个例子，在比较两个对象的age属性时，age的值相等，现在我想要age相等的人，按照别的属性进行排序。于是我想增强<code>by()</code> ，现在我这样使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意外层by函数内有俩个参数，第二个参数就是备用的比较函数。</span><br><span class=\"line\">employees.sort(by(&apos;age&apos;,by(&apos;name&apos;)));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var by = function(name,minor)&#123;</span><br><span class=\"line\">    return function(o,p)&#123;</span><br><span class=\"line\">        var a,b;</span><br><span class=\"line\">        if(o &amp;&amp; p &amp;&amp; typeof o === &apos;object&apos; &amp;&amp; typeof p ===&apos;object&apos;)&#123;</span><br><span class=\"line\">            a = o[name];</span><br><span class=\"line\">            b = p[name];</span><br><span class=\"line\">            if(a === b)&#123;</span><br><span class=\"line\">\t            //如果前后元素相同时，用minor函数比较。</span><br><span class=\"line\">                return typeof minor === &apos;function&apos; ? minor(o,p):0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(typeof a === typeof b)&#123;</span><br><span class=\"line\">                return a &lt;b ? -1 : 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return typeof a &lt; typeof b ? -1 : 1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            throw(&quot;error&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"对象数组排序\"><a href=\"#对象数组排序\" class=\"headerlink\" title=\"对象数组排序\"></a>对象数组排序</h1><hr>","more":"<h2 id=\"一、按照对象的属性排序\"><a href=\"#一、按照对象的属性排序\" class=\"headerlink\" title=\"一、按照对象的属性排序\"></a>一、按照对象的属性排序</h2><p>我要一个函数，传入要对比的key，就能以这个key，把对象数组进行排序。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//示例代码</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> by = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, p</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> a, b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</span><br><span class=\"line\">\t\t\ta = o[key];</span><br><span class=\"line\">\t\t\tb = p[key];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (a === b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果a,b所属类型不同，则按类型的英文字符排序，比如'function'排在'object'前面。</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span>(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> employees=[]</span><br><span class=\"line\">employees[<span class=\"number\">0</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"George\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">32</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"March 12, 2014\"</span>&#125;</span><br><span class=\"line\">employees[<span class=\"number\">1</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Edward\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">17</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"June 2, 2023\"</span>&#125;</span><br><span class=\"line\">employees[<span class=\"number\">2</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Christine\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">58</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"December 20, 2036\"</span>&#125;</span><br><span class=\"line\">employees[<span class=\"number\">3</span>]=&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"Sarah\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">62</span>, <span class=\"attr\">retiredate</span>:<span class=\"string\">\"April 30, 2020\"</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">employees.sort(by(<span class=\"string\">'age'</span>));</span><br><span class=\"line\"><span class=\"comment\">//得到根据age属性排序的数组。</span></span><br><span class=\"line\"><span class=\"comment\">//[&#123;name:\"Edward\", age:17, retiredate:\"June 2, 2023\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;name:\"George\", age:32, retiredate:\"March 12, 2014\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;name:\"Christine\", age:58, retiredate:\"December 20, 2036\"&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;name:\"Sarah\", age:62, retiredate:\"April 30, 2020\"&#125;]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、高级by-函数\"><a href=\"#二、高级by-函数\" class=\"headerlink\" title=\"二、高级by()函数\"></a>二、高级by()函数</h2><p>当主要的键值产生一个匹配的时候，另一个compare方法（第二个参数）将被调用以决出高下。<br>举个例子，在比较两个对象的age属性时，age的值相等，现在我想要age相等的人，按照别的属性进行排序。于是我想增强<code>by()</code> ，现在我这样使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意外层by函数内有俩个参数，第二个参数就是备用的比较函数。</span><br><span class=\"line\">employees.sort(by(&apos;age&apos;,by(&apos;name&apos;)));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var by = function(name,minor)&#123;</span><br><span class=\"line\">    return function(o,p)&#123;</span><br><span class=\"line\">        var a,b;</span><br><span class=\"line\">        if(o &amp;&amp; p &amp;&amp; typeof o === &apos;object&apos; &amp;&amp; typeof p ===&apos;object&apos;)&#123;</span><br><span class=\"line\">            a = o[name];</span><br><span class=\"line\">            b = p[name];</span><br><span class=\"line\">            if(a === b)&#123;</span><br><span class=\"line\">\t            //如果前后元素相同时，用minor函数比较。</span><br><span class=\"line\">                return typeof minor === &apos;function&apos; ? minor(o,p):0;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(typeof a === typeof b)&#123;</span><br><span class=\"line\">                return a &lt;b ? -1 : 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return typeof a &lt; typeof b ? -1 : 1;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            throw(&quot;error&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript 观察者模式的通用实现","date":"2017-05-06T16:00:00.000Z","_content":"\n这篇文章主要是列举代码，关于一个经典的设计模式——观察者模式，又名发布-订阅模式的通用实现。\n<!--more-->\n\n```js\n//封装观察者模式，放进一个对象中，可复用。\nvar event = {\n\tclientList:[],\n\t//订阅的消息添加进缓存列表\n\tlisten: function(key, fn){\n\t\tif( !this.clientList[key]){\n\t\t\tthis.clientList[key] = [];\n\t\t}\n\t\tthis.clientList[key].push(fn);\n\t},\n\ttrigger: function(){\n\t\tvar key = Array.prototype.shift.call(arguments),\n\t\t\tfns = this.clientList[key];\n\t\tif(!fns || fns.length === 0){\n\t\t\treturn false;\n\t\t}\n\t\tfor(var i = 0, fn; fn = fns[i++];){\n\t\t\tfn.apply(this, arguments);\n\t\t}\n\t}，\n\tremove: function(key, fn){\n\t\tvar fns = ClientList[key];\n\t\tif( !fns ){\n\t\t\treturn false;\n\t\t}\n\t\tif(!fn){\n\t\t\tfns && fns.length = 0;\n\t\t}else{\n\t\t\tfor(var len = fns.length-1; len>=0; len--){\n\t\t\t\tvar _fn = fns[len};\n\t\t\t\tif(_fn === fn){\n\t\t\t\t\tfns.splice(len, 1);\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\t\t\n\t}\n}\n```\n```\n//所有对象都能动态安装 ‘观察者模式’\nvar installEvent = function(obj){\n\tfor (var i in event){\n\t\tobj[i] = event[i];\n\t}\n};\n```\n\n```\n//测试\nvar salesOffices = {};\ninstallEvent(salesOffices);\n\t//订阅\nsalesOffices.listen('squareMeter88', function(price){\n\tconsole.log('88平方米的价格='+price);\n});\nsalesOffices.listen('squareMeter110',function(price){\n\tconsole.log('110平方米的价格='+price);\n});\n\t//发布\nsalesOffices.trigger('squareMeter88',2000000);\t//输出：\"88平方米的价格=2000000\"\nsalesOffices.trigger('squareMeter110',3000000);\t//输出：\"110平方米的价格=3000000\"\t\n\n```\n","source":"_posts/2017-05-07 JavaScript观察者模式的通用实现.md","raw":"---\ntitle: JavaScript 观察者模式的通用实现\ncategories: 技术\ndate: 2017-05-07\ntags: JavaScript\n---\n\n这篇文章主要是列举代码，关于一个经典的设计模式——观察者模式，又名发布-订阅模式的通用实现。\n<!--more-->\n\n```js\n//封装观察者模式，放进一个对象中，可复用。\nvar event = {\n\tclientList:[],\n\t//订阅的消息添加进缓存列表\n\tlisten: function(key, fn){\n\t\tif( !this.clientList[key]){\n\t\t\tthis.clientList[key] = [];\n\t\t}\n\t\tthis.clientList[key].push(fn);\n\t},\n\ttrigger: function(){\n\t\tvar key = Array.prototype.shift.call(arguments),\n\t\t\tfns = this.clientList[key];\n\t\tif(!fns || fns.length === 0){\n\t\t\treturn false;\n\t\t}\n\t\tfor(var i = 0, fn; fn = fns[i++];){\n\t\t\tfn.apply(this, arguments);\n\t\t}\n\t}，\n\tremove: function(key, fn){\n\t\tvar fns = ClientList[key];\n\t\tif( !fns ){\n\t\t\treturn false;\n\t\t}\n\t\tif(!fn){\n\t\t\tfns && fns.length = 0;\n\t\t}else{\n\t\t\tfor(var len = fns.length-1; len>=0; len--){\n\t\t\t\tvar _fn = fns[len};\n\t\t\t\tif(_fn === fn){\n\t\t\t\t\tfns.splice(len, 1);\n\t\t\t\t}\t\n\t\t\t}\n\t\t}\t\t\n\t}\n}\n```\n```\n//所有对象都能动态安装 ‘观察者模式’\nvar installEvent = function(obj){\n\tfor (var i in event){\n\t\tobj[i] = event[i];\n\t}\n};\n```\n\n```\n//测试\nvar salesOffices = {};\ninstallEvent(salesOffices);\n\t//订阅\nsalesOffices.listen('squareMeter88', function(price){\n\tconsole.log('88平方米的价格='+price);\n});\nsalesOffices.listen('squareMeter110',function(price){\n\tconsole.log('110平方米的价格='+price);\n});\n\t//发布\nsalesOffices.trigger('squareMeter88',2000000);\t//输出：\"88平方米的价格=2000000\"\nsalesOffices.trigger('squareMeter110',3000000);\t//输出：\"110平方米的价格=3000000\"\t\n\n```\n","slug":"2017-05-07 JavaScript观察者模式的通用实现","published":1,"updated":"2019-02-20T13:32:22.928Z","_id":"cjstph3x4000688zbe5q4seau","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这篇文章主要是列举代码，关于一个经典的设计模式——观察者模式，又名发布-订阅模式的通用实现。<br><a id=\"more\"></a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装观察者模式，放进一个对象中，可复用。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> event = &#123;</span><br><span class=\"line\">\tclientList:[],</span><br><span class=\"line\">\t<span class=\"comment\">//订阅的消息添加进缓存列表</span></span><br><span class=\"line\">\tlisten: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !<span class=\"keyword\">this</span>.clientList[key])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.clientList[key] = [];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.clientList[key].push(fn);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ttrigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>),</span><br><span class=\"line\">\t\t\tfns = <span class=\"keyword\">this</span>.clientList[key];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!fns || fns.length === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, fn; fn = fns[i++];)&#123;</span><br><span class=\"line\">\t\t\tfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\tremove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fns = ClientList[key];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !fns )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!fn)&#123;</span><br><span class=\"line\">\t\t\tfns &amp;&amp; fns.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> len = fns.length<span class=\"number\">-1</span>; len&gt;=<span class=\"number\">0</span>; len--)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> _fn = fns[len&#125;;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(_fn === fn)&#123;</span><br><span class=\"line\">\t\t\t\t\tfns.splice(len, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//所有对象都能动态安装 ‘观察者模式’</span><br><span class=\"line\">var installEvent = function(obj)&#123;</span><br><span class=\"line\">\tfor (var i in event)&#123;</span><br><span class=\"line\">\t\tobj[i] = event[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//测试</span><br><span class=\"line\">var salesOffices = &#123;&#125;;</span><br><span class=\"line\">installEvent(salesOffices);</span><br><span class=\"line\">\t//订阅</span><br><span class=\"line\">salesOffices.listen(&apos;squareMeter88&apos;, function(price)&#123;</span><br><span class=\"line\">\tconsole.log(&apos;88平方米的价格=&apos;+price);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">salesOffices.listen(&apos;squareMeter110&apos;,function(price)&#123;</span><br><span class=\"line\">\tconsole.log(&apos;110平方米的价格=&apos;+price);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t//发布</span><br><span class=\"line\">salesOffices.trigger(&apos;squareMeter88&apos;,2000000);\t//输出：&quot;88平方米的价格=2000000&quot;</span><br><span class=\"line\">salesOffices.trigger(&apos;squareMeter110&apos;,3000000);\t//输出：&quot;110平方米的价格=3000000&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>这篇文章主要是列举代码，关于一个经典的设计模式——观察者模式，又名发布-订阅模式的通用实现。<br>","more":"</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//封装观察者模式，放进一个对象中，可复用。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> event = &#123;</span><br><span class=\"line\">\tclientList:[],</span><br><span class=\"line\">\t<span class=\"comment\">//订阅的消息添加进缓存列表</span></span><br><span class=\"line\">\tlisten: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !<span class=\"keyword\">this</span>.clientList[key])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.clientList[key] = [];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.clientList[key].push(fn);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\ttrigger: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> key = <span class=\"built_in\">Array</span>.prototype.shift.call(<span class=\"built_in\">arguments</span>),</span><br><span class=\"line\">\t\t\tfns = <span class=\"keyword\">this</span>.clientList[key];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!fns || fns.length === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, fn; fn = fns[i++];)&#123;</span><br><span class=\"line\">\t\t\tfn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;，</span><br><span class=\"line\">\tremove: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, fn</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fns = ClientList[key];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( !fns )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!fn)&#123;</span><br><span class=\"line\">\t\t\tfns &amp;&amp; fns.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> len = fns.length<span class=\"number\">-1</span>; len&gt;=<span class=\"number\">0</span>; len--)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> _fn = fns[len&#125;;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(_fn === fn)&#123;</span><br><span class=\"line\">\t\t\t\t\tfns.splice(len, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//所有对象都能动态安装 ‘观察者模式’</span><br><span class=\"line\">var installEvent = function(obj)&#123;</span><br><span class=\"line\">\tfor (var i in event)&#123;</span><br><span class=\"line\">\t\tobj[i] = event[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//测试</span><br><span class=\"line\">var salesOffices = &#123;&#125;;</span><br><span class=\"line\">installEvent(salesOffices);</span><br><span class=\"line\">\t//订阅</span><br><span class=\"line\">salesOffices.listen(&apos;squareMeter88&apos;, function(price)&#123;</span><br><span class=\"line\">\tconsole.log(&apos;88平方米的价格=&apos;+price);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">salesOffices.listen(&apos;squareMeter110&apos;,function(price)&#123;</span><br><span class=\"line\">\tconsole.log(&apos;110平方米的价格=&apos;+price);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">\t//发布</span><br><span class=\"line\">salesOffices.trigger(&apos;squareMeter88&apos;,2000000);\t//输出：&quot;88平方米的价格=2000000&quot;</span><br><span class=\"line\">salesOffices.trigger(&apos;squareMeter110&apos;,3000000);\t//输出：&quot;110平方米的价格=3000000&quot;</span><br></pre></td></tr></table></figure>"},{"title":"简述网络原理和优化","date":"2017-06-06T09:01:19.000Z","_content":"\n\n\n# 1. 一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\n<!--more-->\n## 1.1 浏览器处理请求\n浏览器开启一个线程处理这个请求，对URL分析判断，如果是HTTP协议，就按Web方式处理。\n\n## 1.2 浏览器处理URL\n调用浏览器内核中的对应方法，比如WebView中的loadUrl方法。\n\n## 1.3 DNS解析\n通过DNS解析，获取域名的IP地址，设置UA等信息发出第二个GET请求。\n\n## 1.4 建立连接\n进行HTTP协议回话，客户端发送报头（请求报头）；\n\n## 1.5 服务器系统响应\n进入到Web服务器上的Web Server， 如Apache 、Tomcat 、 Node.JS 等服务器。\n\n## 1.6 服务器程序处理\n进入部署好的后端应用，如PHP、Java、JavaScript、Python等，找到相应的请求处理。\n\n## 1.7 服务器处理完成，返回数据\n处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，如果一致，则返回304.\n\n## 1.8 浏览器开始下载HTML\n浏览器开始下载HTML文档(响应报头，状态码200)，同时使用缓存。\n\n## 1.9 DOM树建立，加载外部文件\n文档树开始建立，根据标记请求所需指定MIME类型的文件（比如CSS，JS），同时设置Cookie。\n\n## 1.10 页面渲染\n页面开始渲染DOM，JS根据DOM API操作DOM，执行事件绑定等，页面显示完成。\n\n# 2. HTTP状态码\n\n - 100  继续， 一般在发送post请求时， 已发送了http header之后，服务器将返回此信息，表示确认。\n - 200 正常返回信息\n - 201 请求成功并且服务器创建了新的资源\n - 202 服务器已接受请求，但尚未处理\n - 301 永久重定向\n - 302 临时重定向\n - 303 临时重定向，且总是使用GET请求新的URI\n - 304 资源未修改，自从上次请求后，请求的网页未修改过。\n\n - 400 请求格式错误，客户端不应当再犯同样的错误\n - 401 请求未授权\n - 403 禁止访问\n - 404 找不到资源\n \n - 500 服务器内部错误\n - 502 网关错误\n - 503 服务器暂时无法处理请求，可能是过载或者维护\n\n# 3. 前端性能优化\n\n## 3.1 减少http请求次数\nCSS雪碧图，JS、CSS代码压缩，图片压缩；\n\n网页Gzip，CDN托管，data缓存，分离图片服务器。\n\n## 3.2 前端模板优化\n精简HTML标签，避免带宽浪费。\n\n用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数。\n\n## 3.3 DOM操作\n用`innerHTML`代替DOM操作，减少DOM操作次数，优化JavaScript性能。\n\n缓存DOM节点查找的结果，减少IO读取操作。\n\n## 3.4 避免直接操作style\n当需要设置的样式很多时，设置className，而非直接操作style。\n\n## 3.5 少用全局变量","source":"_posts/2017-06-06 前端网络原理和优化.md","raw":"---\ntitle: 简述网络原理和优化\ncategories: 笔记\ndate: 2017-06-06 17:01:19\ntags: 学习笔记\n---\n\n\n\n# 1. 一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\n<!--more-->\n## 1.1 浏览器处理请求\n浏览器开启一个线程处理这个请求，对URL分析判断，如果是HTTP协议，就按Web方式处理。\n\n## 1.2 浏览器处理URL\n调用浏览器内核中的对应方法，比如WebView中的loadUrl方法。\n\n## 1.3 DNS解析\n通过DNS解析，获取域名的IP地址，设置UA等信息发出第二个GET请求。\n\n## 1.4 建立连接\n进行HTTP协议回话，客户端发送报头（请求报头）；\n\n## 1.5 服务器系统响应\n进入到Web服务器上的Web Server， 如Apache 、Tomcat 、 Node.JS 等服务器。\n\n## 1.6 服务器程序处理\n进入部署好的后端应用，如PHP、Java、JavaScript、Python等，找到相应的请求处理。\n\n## 1.7 服务器处理完成，返回数据\n处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，如果一致，则返回304.\n\n## 1.8 浏览器开始下载HTML\n浏览器开始下载HTML文档(响应报头，状态码200)，同时使用缓存。\n\n## 1.9 DOM树建立，加载外部文件\n文档树开始建立，根据标记请求所需指定MIME类型的文件（比如CSS，JS），同时设置Cookie。\n\n## 1.10 页面渲染\n页面开始渲染DOM，JS根据DOM API操作DOM，执行事件绑定等，页面显示完成。\n\n# 2. HTTP状态码\n\n - 100  继续， 一般在发送post请求时， 已发送了http header之后，服务器将返回此信息，表示确认。\n - 200 正常返回信息\n - 201 请求成功并且服务器创建了新的资源\n - 202 服务器已接受请求，但尚未处理\n - 301 永久重定向\n - 302 临时重定向\n - 303 临时重定向，且总是使用GET请求新的URI\n - 304 资源未修改，自从上次请求后，请求的网页未修改过。\n\n - 400 请求格式错误，客户端不应当再犯同样的错误\n - 401 请求未授权\n - 403 禁止访问\n - 404 找不到资源\n \n - 500 服务器内部错误\n - 502 网关错误\n - 503 服务器暂时无法处理请求，可能是过载或者维护\n\n# 3. 前端性能优化\n\n## 3.1 减少http请求次数\nCSS雪碧图，JS、CSS代码压缩，图片压缩；\n\n网页Gzip，CDN托管，data缓存，分离图片服务器。\n\n## 3.2 前端模板优化\n精简HTML标签，避免带宽浪费。\n\n用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数。\n\n## 3.3 DOM操作\n用`innerHTML`代替DOM操作，减少DOM操作次数，优化JavaScript性能。\n\n缓存DOM节点查找的结果，减少IO读取操作。\n\n## 3.4 避免直接操作style\n当需要设置的样式很多时，设置className，而非直接操作style。\n\n## 3.5 少用全局变量","slug":"2017-06-06 前端网络原理和优化","published":1,"updated":"2019-02-20T13:32:22.929Z","_id":"cjstph3xk000p88zboq6uxpb1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\"><a href=\"#1-一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\" class=\"headerlink\" title=\"1. 一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\"></a>1. 一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？</h1><a id=\"more\"></a>\n<h2 id=\"1-1-浏览器处理请求\"><a href=\"#1-1-浏览器处理请求\" class=\"headerlink\" title=\"1.1 浏览器处理请求\"></a>1.1 浏览器处理请求</h2><p>浏览器开启一个线程处理这个请求，对URL分析判断，如果是HTTP协议，就按Web方式处理。</p>\n<h2 id=\"1-2-浏览器处理URL\"><a href=\"#1-2-浏览器处理URL\" class=\"headerlink\" title=\"1.2 浏览器处理URL\"></a>1.2 浏览器处理URL</h2><p>调用浏览器内核中的对应方法，比如WebView中的loadUrl方法。</p>\n<h2 id=\"1-3-DNS解析\"><a href=\"#1-3-DNS解析\" class=\"headerlink\" title=\"1.3 DNS解析\"></a>1.3 DNS解析</h2><p>通过DNS解析，获取域名的IP地址，设置UA等信息发出第二个GET请求。</p>\n<h2 id=\"1-4-建立连接\"><a href=\"#1-4-建立连接\" class=\"headerlink\" title=\"1.4 建立连接\"></a>1.4 建立连接</h2><p>进行HTTP协议回话，客户端发送报头（请求报头）；</p>\n<h2 id=\"1-5-服务器系统响应\"><a href=\"#1-5-服务器系统响应\" class=\"headerlink\" title=\"1.5 服务器系统响应\"></a>1.5 服务器系统响应</h2><p>进入到Web服务器上的Web Server， 如Apache 、Tomcat 、 Node.JS 等服务器。</p>\n<h2 id=\"1-6-服务器程序处理\"><a href=\"#1-6-服务器程序处理\" class=\"headerlink\" title=\"1.6 服务器程序处理\"></a>1.6 服务器程序处理</h2><p>进入部署好的后端应用，如PHP、Java、JavaScript、Python等，找到相应的请求处理。</p>\n<h2 id=\"1-7-服务器处理完成，返回数据\"><a href=\"#1-7-服务器处理完成，返回数据\" class=\"headerlink\" title=\"1.7 服务器处理完成，返回数据\"></a>1.7 服务器处理完成，返回数据</h2><p>处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，如果一致，则返回304.</p>\n<h2 id=\"1-8-浏览器开始下载HTML\"><a href=\"#1-8-浏览器开始下载HTML\" class=\"headerlink\" title=\"1.8 浏览器开始下载HTML\"></a>1.8 浏览器开始下载HTML</h2><p>浏览器开始下载HTML文档(响应报头，状态码200)，同时使用缓存。</p>\n<h2 id=\"1-9-DOM树建立，加载外部文件\"><a href=\"#1-9-DOM树建立，加载外部文件\" class=\"headerlink\" title=\"1.9 DOM树建立，加载外部文件\"></a>1.9 DOM树建立，加载外部文件</h2><p>文档树开始建立，根据标记请求所需指定MIME类型的文件（比如CSS，JS），同时设置Cookie。</p>\n<h2 id=\"1-10-页面渲染\"><a href=\"#1-10-页面渲染\" class=\"headerlink\" title=\"1.10 页面渲染\"></a>1.10 页面渲染</h2><p>页面开始渲染DOM，JS根据DOM API操作DOM，执行事件绑定等，页面显示完成。</p>\n<h1 id=\"2-HTTP状态码\"><a href=\"#2-HTTP状态码\" class=\"headerlink\" title=\"2. HTTP状态码\"></a>2. HTTP状态码</h1><ul>\n<li>100  继续， 一般在发送post请求时， 已发送了http header之后，服务器将返回此信息，表示确认。</li>\n<li>200 正常返回信息</li>\n<li>201 请求成功并且服务器创建了新的资源</li>\n<li>202 服务器已接受请求，但尚未处理</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>303 临时重定向，且总是使用GET请求新的URI</li>\n<li><p>304 资源未修改，自从上次请求后，请求的网页未修改过。</p>\n</li>\n<li><p>400 请求格式错误，客户端不应当再犯同样的错误</p>\n</li>\n<li>401 请求未授权</li>\n<li>403 禁止访问</li>\n<li><p>404 找不到资源</p>\n</li>\n<li><p>500 服务器内部错误</p>\n</li>\n<li>502 网关错误</li>\n<li>503 服务器暂时无法处理请求，可能是过载或者维护</li>\n</ul>\n<h1 id=\"3-前端性能优化\"><a href=\"#3-前端性能优化\" class=\"headerlink\" title=\"3. 前端性能优化\"></a>3. 前端性能优化</h1><h2 id=\"3-1-减少http请求次数\"><a href=\"#3-1-减少http请求次数\" class=\"headerlink\" title=\"3.1 减少http请求次数\"></a>3.1 减少http请求次数</h2><p>CSS雪碧图，JS、CSS代码压缩，图片压缩；</p>\n<p>网页Gzip，CDN托管，data缓存，分离图片服务器。</p>\n<h2 id=\"3-2-前端模板优化\"><a href=\"#3-2-前端模板优化\" class=\"headerlink\" title=\"3.2 前端模板优化\"></a>3.2 前端模板优化</h2><p>精简HTML标签，避免带宽浪费。</p>\n<p>用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数。</p>\n<h2 id=\"3-3-DOM操作\"><a href=\"#3-3-DOM操作\" class=\"headerlink\" title=\"3.3 DOM操作\"></a>3.3 DOM操作</h2><p>用<code>innerHTML</code>代替DOM操作，减少DOM操作次数，优化JavaScript性能。</p>\n<p>缓存DOM节点查找的结果，减少IO读取操作。</p>\n<h2 id=\"3-4-避免直接操作style\"><a href=\"#3-4-避免直接操作style\" class=\"headerlink\" title=\"3.4 避免直接操作style\"></a>3.4 避免直接操作style</h2><p>当需要设置的样式很多时，设置className，而非直接操作style。</p>\n<h2 id=\"3-5-少用全局变量\"><a href=\"#3-5-少用全局变量\" class=\"headerlink\" title=\"3.5 少用全局变量\"></a>3.5 少用全局变量</h2>","site":{"data":{}},"excerpt":"<h1 id=\"1-一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\"><a href=\"#1-一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\" class=\"headerlink\" title=\"1. 一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？\"></a>1. 一个页面从输入URL到页面加载显示完成，这个过程都发生了什么？</h1>","more":"<h2 id=\"1-1-浏览器处理请求\"><a href=\"#1-1-浏览器处理请求\" class=\"headerlink\" title=\"1.1 浏览器处理请求\"></a>1.1 浏览器处理请求</h2><p>浏览器开启一个线程处理这个请求，对URL分析判断，如果是HTTP协议，就按Web方式处理。</p>\n<h2 id=\"1-2-浏览器处理URL\"><a href=\"#1-2-浏览器处理URL\" class=\"headerlink\" title=\"1.2 浏览器处理URL\"></a>1.2 浏览器处理URL</h2><p>调用浏览器内核中的对应方法，比如WebView中的loadUrl方法。</p>\n<h2 id=\"1-3-DNS解析\"><a href=\"#1-3-DNS解析\" class=\"headerlink\" title=\"1.3 DNS解析\"></a>1.3 DNS解析</h2><p>通过DNS解析，获取域名的IP地址，设置UA等信息发出第二个GET请求。</p>\n<h2 id=\"1-4-建立连接\"><a href=\"#1-4-建立连接\" class=\"headerlink\" title=\"1.4 建立连接\"></a>1.4 建立连接</h2><p>进行HTTP协议回话，客户端发送报头（请求报头）；</p>\n<h2 id=\"1-5-服务器系统响应\"><a href=\"#1-5-服务器系统响应\" class=\"headerlink\" title=\"1.5 服务器系统响应\"></a>1.5 服务器系统响应</h2><p>进入到Web服务器上的Web Server， 如Apache 、Tomcat 、 Node.JS 等服务器。</p>\n<h2 id=\"1-6-服务器程序处理\"><a href=\"#1-6-服务器程序处理\" class=\"headerlink\" title=\"1.6 服务器程序处理\"></a>1.6 服务器程序处理</h2><p>进入部署好的后端应用，如PHP、Java、JavaScript、Python等，找到相应的请求处理。</p>\n<h2 id=\"1-7-服务器处理完成，返回数据\"><a href=\"#1-7-服务器处理完成，返回数据\" class=\"headerlink\" title=\"1.7 服务器处理完成，返回数据\"></a>1.7 服务器处理完成，返回数据</h2><p>处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，如果一致，则返回304.</p>\n<h2 id=\"1-8-浏览器开始下载HTML\"><a href=\"#1-8-浏览器开始下载HTML\" class=\"headerlink\" title=\"1.8 浏览器开始下载HTML\"></a>1.8 浏览器开始下载HTML</h2><p>浏览器开始下载HTML文档(响应报头，状态码200)，同时使用缓存。</p>\n<h2 id=\"1-9-DOM树建立，加载外部文件\"><a href=\"#1-9-DOM树建立，加载外部文件\" class=\"headerlink\" title=\"1.9 DOM树建立，加载外部文件\"></a>1.9 DOM树建立，加载外部文件</h2><p>文档树开始建立，根据标记请求所需指定MIME类型的文件（比如CSS，JS），同时设置Cookie。</p>\n<h2 id=\"1-10-页面渲染\"><a href=\"#1-10-页面渲染\" class=\"headerlink\" title=\"1.10 页面渲染\"></a>1.10 页面渲染</h2><p>页面开始渲染DOM，JS根据DOM API操作DOM，执行事件绑定等，页面显示完成。</p>\n<h1 id=\"2-HTTP状态码\"><a href=\"#2-HTTP状态码\" class=\"headerlink\" title=\"2. HTTP状态码\"></a>2. HTTP状态码</h1><ul>\n<li>100  继续， 一般在发送post请求时， 已发送了http header之后，服务器将返回此信息，表示确认。</li>\n<li>200 正常返回信息</li>\n<li>201 请求成功并且服务器创建了新的资源</li>\n<li>202 服务器已接受请求，但尚未处理</li>\n<li>301 永久重定向</li>\n<li>302 临时重定向</li>\n<li>303 临时重定向，且总是使用GET请求新的URI</li>\n<li><p>304 资源未修改，自从上次请求后，请求的网页未修改过。</p>\n</li>\n<li><p>400 请求格式错误，客户端不应当再犯同样的错误</p>\n</li>\n<li>401 请求未授权</li>\n<li>403 禁止访问</li>\n<li><p>404 找不到资源</p>\n</li>\n<li><p>500 服务器内部错误</p>\n</li>\n<li>502 网关错误</li>\n<li>503 服务器暂时无法处理请求，可能是过载或者维护</li>\n</ul>\n<h1 id=\"3-前端性能优化\"><a href=\"#3-前端性能优化\" class=\"headerlink\" title=\"3. 前端性能优化\"></a>3. 前端性能优化</h1><h2 id=\"3-1-减少http请求次数\"><a href=\"#3-1-减少http请求次数\" class=\"headerlink\" title=\"3.1 减少http请求次数\"></a>3.1 减少http请求次数</h2><p>CSS雪碧图，JS、CSS代码压缩，图片压缩；</p>\n<p>网页Gzip，CDN托管，data缓存，分离图片服务器。</p>\n<h2 id=\"3-2-前端模板优化\"><a href=\"#3-2-前端模板优化\" class=\"headerlink\" title=\"3.2 前端模板优化\"></a>3.2 前端模板优化</h2><p>精简HTML标签，避免带宽浪费。</p>\n<p>用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数。</p>\n<h2 id=\"3-3-DOM操作\"><a href=\"#3-3-DOM操作\" class=\"headerlink\" title=\"3.3 DOM操作\"></a>3.3 DOM操作</h2><p>用<code>innerHTML</code>代替DOM操作，减少DOM操作次数，优化JavaScript性能。</p>\n<p>缓存DOM节点查找的结果，减少IO读取操作。</p>\n<h2 id=\"3-4-避免直接操作style\"><a href=\"#3-4-避免直接操作style\" class=\"headerlink\" title=\"3.4 避免直接操作style\"></a>3.4 避免直接操作style</h2><p>当需要设置的样式很多时，设置className，而非直接操作style。</p>\n<h2 id=\"3-5-少用全局变量\"><a href=\"#3-5-少用全局变量\" class=\"headerlink\" title=\"3.5 少用全局变量\"></a>3.5 少用全局变量</h2>"},{"title":"如何应对CSRF攻击","date":"2017-05-22T16:00:00.000Z","keywords":"前端技术 博客笔记 CSRF 网络安全","description":"本文详细介绍了CSRF攻击，并列举了业界当前的防范方法。","_content":"\n---\n作为Web安全数一数二的隐患，CSRF一直让开发人员头疼。本文详细介绍了CSRF攻击的概念，危害，案例和解决方案，为网站安全优化理清思路。\n\n<!--more-->\n# 一、CSRF的来龙去脉\n\n## 1. 什么是CSRF？\n\nCSRF（Cross Site Request Forgery, **跨站域请求伪造**）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。\n其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。然而，对于大多数人来说，CSRF 却依然是一个陌生的概念。即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。\n\n---\n## 2. CSRF攻击实例\nCSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。\n\n比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求\n>  http://bank.example/withdraw?account=bob&amount=1000000&for=bob2\n\n 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。\n\n通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。\n\nMallory 可以自己发送一个请求给银行：\n> http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory\n\n但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。\n\n>  src=”http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory ”\n\n并且通过广告等**诱使 Bob 来访问他的网站**。\n\n当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而**这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器**。\n\n大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。\n\n但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 **session 尚未过期**，浏览器的 cookie 之中含有 Bob 的认证信息。\n\n这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时**毫不知情**。\n\n等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。\n\n## 3. CSRF攻击的对象\n\n在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。\n\n从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie 的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。\n\n> 因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。\n\n所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。\n\n比如银行系统中**转账**的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。\n\n\n\n# 二、防御 CSRF 的几种策略\n\n在业界目前防御 CSRF 攻击主要有三种策略：\n\n - 验证 HTTP Referer 字段；\n - 在请求地址中添加 token 并验证；\n - 在 HTTP 头中自定义属性并验证。\n\n## 1. 验证 HTTP Referer 字段\n### 1.1 什么是Referer？\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 **Referer**，它记录了该 **HTTP 请求的来源地址**。\n\n在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问\n> http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory\n\n用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。\n\n这时，该转帐请求的 Referer 值就会是**转账按钮所在的页面的 URL**，通常是以 bank.example 域名开头的地址。\n\n而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。\n### 1.2 如何验证Referer？\n因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。\n### 1.3 Referer验证的优缺点\n优点：这种方法简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一**增加一个拦截器来检查 Referer 的值**就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。\n\n缺点：\n\n 1. Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于Referer的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。\n > 使用验证值的方法，**就是把安全性都依赖于第三方（即浏览器）来保障**，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行CSRF 攻击。\n\n 2. 如果用户为了保护隐私，而设置浏览器使其在发送请求时**不再提供 Referer**。当他们正常访问银行网站时，网站会因为请求Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n\n## 2. 在请求地址中添加 token 并验证\n### 2.1 黑客总是能找到漏洞\nCSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。\n\n### 2.2 那我们就加一把钥匙\n要抵御 CSRF，关键在于**在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。**可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\n\n这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对。\n\n但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。 而对于 POST 请求来说，要在 form 的最后加上 <input type=”hidden” name=”csrftoken” value=”tokenvalue”/>，这样就把 token 以参数的形式加入请求了。\n### 2.3 使用token的缺点：\n①. 在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是**对于在页面加载之后动态生成的 html 代码，这种方法就没有作用**，还需要程序员在编码时手动添加 token。\n\n②. 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。\n\n为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。\n\n## 3. 在 HTTP 头中自定义属性并验证\n### 3.1 把密钥放到HTTP请求头中\n这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。\n\n通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。\n\n这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n\n### 3.2 缺点：\n然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。\n\n------\n\n# 三、代码实例(java)：\n\n## 1. 使用Filter验证Referer\n\n``` java\n\t//从HTTP头部取得Referer值\n\t String referer = request.getHeader(\"Referer\");\n\t //判断Referer是否以bank.example开头\n\t if((refirer != null) && (referer.trim().startsWith(\"bank.example\"))){\n\t vhain.doFilter(request, response);\n\t }else{\n\trequest.getRequestDispatcher(\"error.jsp\").forward(request,response);\n\t}\n```\n\n以上代码先取得Referer值，然后进行判断，当其非空并以bank.example开头时，则继续请求，否则的话可能是CSRF攻击，转到error.jsp页面。\n\n## 2.进一步验证请求中的token\n``` java\nHttpServletRequest req = (HttpServletRequest)request;\nHttpSession s = req.getSession();\n//从session中，得到csrftoken属性\nString sToken = (String)s.getAttribute(\"csrftoken\");\nif(sToken == null){\n\t//产生新的token放入session中\n\tsToken = generateToken();\n\ts.setAttribute(\"csrftoken\", sToken);\n\tchain.doFilter(request, response);\n}else{\n\t//从HTTP头中取得csrftoken\n\tString xhrToken = req.getHeader(\"csrftoken\");\n\t//从请求参数中取得csrftoken\n\tString pToken = req.getParameter(\"csrftoken\");\n\tif(sToken != null && xhrToken != null && sToken.equals(xhrToken)){\n\t\tchain.doFilter(request, response);\n\t}else{\n\trequest.getRequestDispatcher(\"error.jsp\").forward(request,response);\n\t}\n}\n```\n\n## 3.在客户端对请求附加token\n``` javascript\nfunction appendTOken(){\n\tupdateForms();\n\tupdateTags();\n}\nfunction updateForms(){\n\t//获取所有form元素\n\tvar forms = document.getElementsByTagName('form');\n\tfor (i = 0; i < forms.length; i++){\n\t\tvar url = forms[i].action;\n\n\t\t//如果这个form的action值为空，则不附加csrftoken\n\t\tif(url == null || url == \"\") continue;\n\n\t\t//动态生成input元素，加到 form 之后\n\t\tvar e = docement.createElement(\"input\");\n\t\te.name = \"csrftoken\";\n\t\te.value = token;\n\t\te.type = \"hidden\";\n\t\tforms[i].appendChild(e);\n\t}\n}\n\nfunction updateTags(){\n\tvar all = document.getElementsByTagName('a');\n\tvar len = all.length;\n\n\t//遍历所有a元素\n\tfor(var i = 0; i< len; i++){\n\t\tvar e = all[i];\n\t\tupdateTag(e, \"href\" , token);\n\t}\n}\n\nfunction updateTag(element, attr, token){\n\tvar location = element.getAttribute(attr);\n\tif(location != null && location != '' ''){\n\t\tvar fragmentIndex = location.indexOf(\"#\");\n\t\tvar fragment = null;\n\t\tif(fragmentIndex != -1){\n\t\t\t//url中含有#锚标记\n\t\t\tfragment = location.substring(fragmentIndex);\n\t\t\tlocation = location.substring(0, fragmentIndex);\n\t\t}\n\n\n\t\tvar index = location.indexOf('?');\n\t\tif(index !== -1){\n\t\t\t//url中已含有其他参数\n\t\t\tlocation = location + '&csrftoken=' + token;\n\t\t}else{\n\t\t\t//url中没有其他参数\n\t\t\tlocation = location + '?csrftoken=' + token;\n\t\t}\n\t\tif(fragment != null){\n\t\t\tlocation += fragment;\n\t\t}\n\t\telement.setAttribute(attr, location);\n\t}\n}\n```\n\n在客户端html中，主要有两个地方需要加上token，一个是表单form，另一个就是a标签。上面这段代码，首先遍历所有的form, 在form最后添加一段**隐藏字段**，把csrftoken放入其中。然后，代码遍历所有的a标签，在其href属性中加入csrftoken参数。 注意对于 a.href 来说，可能该属性已经有参数，或者有锚标记。因此需要分情况讨论，以不同的格式把 csrftoken 加入其中。\n\n## 4. 在 HTTP 头中自定义属性\n\n     var plainXhr = dojo.xhr;\n\n     // 重写 dojo.xhr 方法\n     dojo.xhr = function(method,args,hasBody) {\n        // 确保 header 对象存在\n        args.headers = args.header || {};\n\n        tokenValue = '<%=request.getSession(false).getAttribute(\"csrftoken\")%>';\n        var token = dojo.getObject(\"tokenValue\");\n\n        // 把 csrftoken 属性放到头中\n        args.headers[\"csrftoken\"] = (token) ? token : \"  \";\n        return plainXhr(method,args,hasBody);\n     };\n\n这里改写了 dojo.xhr 的方法，首先确保 dojo.xhr 中存在 HTTP 头，然后在 args.headers 中添加 csrftoken 字段，并把 token 值从 session 里拿出放入字段中。\n\n# 四、如何选择CSRF防御方法？\n\n目前业界应对 CSRF 攻击有一些克制方法，但是每种方法都有利弊，没有一种方法是完美的。如何选择合适的方法非常重要。\n\n如果网站是一个现有系统，想要**在最短时间内获得一定程度的 CSRF 的保护**，那么**验证 Referer** 的方法是最方便的，要想增加安全性的话，可以选择不支持低版本浏览器，毕竟就目前来说，IE7+, FF3+ 这类高版本浏览器的 Referer 值还无法被篡改。\n\n如果系统必须支持 IE6，并且仍然需要高安全性。那么就要使用 token 来进行验证，在大部分情况下，使用 XmlHttpRequest 并不合适，token 只能以参数的形式放于请求之中，若你的系统不支持用户自己发布信息，那这种程度的防护已经足够，否则的话，你仍然难以防范 token 被黑客窃取并发动攻击。\n在这种情况下，你需要**小心规划你网站提供的各种服务**，从中间找出那些允许用户自己发布信息的部分，把它们与其他服务分开，使用不同的 token 进行保护，这样可以有效抵御黑客对于你关键服务的攻击，把危害降到最低。毕竟，删除别人一个帖子比直接从别人账号中转走大笔存款严重程度要轻的多。\n\n如果是开发一个全新的系统，则抵御 CSRF 的选择要大得多。笔者建议**对于重要的服务，可以尽量使用 XMLHttpRequest 来访问**，这样增加 token 要容易很多。另外尽量避免在 js 代码中使用复杂逻辑来构造常规的同步请求来访问需要 CSRF 保护的资源，比如 window.location 和 document.createElement(“a”) 之类，这样也可以减少在附加 token 时产生的不必要的麻烦。\n\n最后，要记住 CSRF 不是黑客唯一的攻击手段，无论你 CSRF 防范有多么严密，如果你系统有其他安全漏洞，比如跨站域脚本攻击 XSS，那么黑客就可以绕过你的安全防护，展开包括 CSRF 在内的各种攻击，你的防线将如同虚设。\n\n# 五、总结\n\n可见，CSRF 是一种危害非常大的攻击，又很难以防范。目前几种防御策略虽然可以很大程度上抵御 CSRF 的攻击，但并没有一种完美的解决方案。一些新的方案正在研究之中，比如对于每次请求都使用不同的动态口令，把 Referer 和 token 方案结合起来，甚至尝试修改 HTTP 规范，但是这些新的方案尚不成熟，要正式投入使用并被业界广为接受还需时日。在这之前，我们只有充分重视 CSRF，根据系统的实际情况选择最合适的策略，这样才能把 CSRF 的危害降到最低。\n\n---\n>  [参考链接：IBM的技术博客](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)\n","source":"_posts/2017-05-23 深入研究CSRF.md","raw":"title: 如何应对CSRF攻击\ndate: 2017-5-23\ncategories: 技术\ntags: [前端,安全]\nkeywords: 前端技术 博客笔记 CSRF 网络安全\ndescription: 本文详细介绍了CSRF攻击，并列举了业界当前的防范方法。\n\n# CSRF攻击的应对之道\n\n---\n\n---\n作为Web安全数一数二的隐患，CSRF一直让开发人员头疼。本文详细介绍了CSRF攻击的概念，危害，案例和解决方案，为网站安全优化理清思路。\n\n<!--more-->\n# 一、CSRF的来龙去脉\n\n## 1. 什么是CSRF？\n\nCSRF（Cross Site Request Forgery, **跨站域请求伪造**）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。\n其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。然而，对于大多数人来说，CSRF 却依然是一个陌生的概念。即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。\n\n---\n## 2. CSRF攻击实例\nCSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。\n\n比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求\n>  http://bank.example/withdraw?account=bob&amount=1000000&for=bob2\n\n 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。\n\n通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。\n\nMallory 可以自己发送一个请求给银行：\n> http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory\n\n但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。\n\n>  src=”http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory ”\n\n并且通过广告等**诱使 Bob 来访问他的网站**。\n\n当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而**这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器**。\n\n大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。\n\n但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 **session 尚未过期**，浏览器的 cookie 之中含有 Bob 的认证信息。\n\n这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时**毫不知情**。\n\n等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。\n\n## 3. CSRF攻击的对象\n\n在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。\n\n从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie 的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。\n\n> 因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。\n\n所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。\n\n比如银行系统中**转账**的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。\n\n\n\n# 二、防御 CSRF 的几种策略\n\n在业界目前防御 CSRF 攻击主要有三种策略：\n\n - 验证 HTTP Referer 字段；\n - 在请求地址中添加 token 并验证；\n - 在 HTTP 头中自定义属性并验证。\n\n## 1. 验证 HTTP Referer 字段\n### 1.1 什么是Referer？\n根据 HTTP 协议，在 HTTP 头中有一个字段叫 **Referer**，它记录了该 **HTTP 请求的来源地址**。\n\n在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问\n> http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory\n\n用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。\n\n这时，该转帐请求的 Referer 值就会是**转账按钮所在的页面的 URL**，通常是以 bank.example 域名开头的地址。\n\n而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。\n### 1.2 如何验证Referer？\n因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。\n### 1.3 Referer验证的优缺点\n优点：这种方法简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一**增加一个拦截器来检查 Referer 的值**就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。\n\n缺点：\n\n 1. Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于Referer的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。\n > 使用验证值的方法，**就是把安全性都依赖于第三方（即浏览器）来保障**，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行CSRF 攻击。\n\n 2. 如果用户为了保护隐私，而设置浏览器使其在发送请求时**不再提供 Referer**。当他们正常访问银行网站时，网站会因为请求Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。\n\n## 2. 在请求地址中添加 token 并验证\n### 2.1 黑客总是能找到漏洞\nCSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。\n\n### 2.2 那我们就加一把钥匙\n要抵御 CSRF，关键在于**在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。**可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。\n\n这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对。\n\n但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。 而对于 POST 请求来说，要在 form 的最后加上 <input type=”hidden” name=”csrftoken” value=”tokenvalue”/>，这样就把 token 以参数的形式加入请求了。\n### 2.3 使用token的缺点：\n①. 在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是**对于在页面加载之后动态生成的 html 代码，这种方法就没有作用**，还需要程序员在编码时手动添加 token。\n\n②. 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。\n\n为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。\n\n## 3. 在 HTTP 头中自定义属性并验证\n### 3.1 把密钥放到HTTP请求头中\n这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。\n\n通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。\n\n这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n\n### 3.2 缺点：\n然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。\n\n------\n\n# 三、代码实例(java)：\n\n## 1. 使用Filter验证Referer\n\n``` java\n\t//从HTTP头部取得Referer值\n\t String referer = request.getHeader(\"Referer\");\n\t //判断Referer是否以bank.example开头\n\t if((refirer != null) && (referer.trim().startsWith(\"bank.example\"))){\n\t vhain.doFilter(request, response);\n\t }else{\n\trequest.getRequestDispatcher(\"error.jsp\").forward(request,response);\n\t}\n```\n\n以上代码先取得Referer值，然后进行判断，当其非空并以bank.example开头时，则继续请求，否则的话可能是CSRF攻击，转到error.jsp页面。\n\n## 2.进一步验证请求中的token\n``` java\nHttpServletRequest req = (HttpServletRequest)request;\nHttpSession s = req.getSession();\n//从session中，得到csrftoken属性\nString sToken = (String)s.getAttribute(\"csrftoken\");\nif(sToken == null){\n\t//产生新的token放入session中\n\tsToken = generateToken();\n\ts.setAttribute(\"csrftoken\", sToken);\n\tchain.doFilter(request, response);\n}else{\n\t//从HTTP头中取得csrftoken\n\tString xhrToken = req.getHeader(\"csrftoken\");\n\t//从请求参数中取得csrftoken\n\tString pToken = req.getParameter(\"csrftoken\");\n\tif(sToken != null && xhrToken != null && sToken.equals(xhrToken)){\n\t\tchain.doFilter(request, response);\n\t}else{\n\trequest.getRequestDispatcher(\"error.jsp\").forward(request,response);\n\t}\n}\n```\n\n## 3.在客户端对请求附加token\n``` javascript\nfunction appendTOken(){\n\tupdateForms();\n\tupdateTags();\n}\nfunction updateForms(){\n\t//获取所有form元素\n\tvar forms = document.getElementsByTagName('form');\n\tfor (i = 0; i < forms.length; i++){\n\t\tvar url = forms[i].action;\n\n\t\t//如果这个form的action值为空，则不附加csrftoken\n\t\tif(url == null || url == \"\") continue;\n\n\t\t//动态生成input元素，加到 form 之后\n\t\tvar e = docement.createElement(\"input\");\n\t\te.name = \"csrftoken\";\n\t\te.value = token;\n\t\te.type = \"hidden\";\n\t\tforms[i].appendChild(e);\n\t}\n}\n\nfunction updateTags(){\n\tvar all = document.getElementsByTagName('a');\n\tvar len = all.length;\n\n\t//遍历所有a元素\n\tfor(var i = 0; i< len; i++){\n\t\tvar e = all[i];\n\t\tupdateTag(e, \"href\" , token);\n\t}\n}\n\nfunction updateTag(element, attr, token){\n\tvar location = element.getAttribute(attr);\n\tif(location != null && location != '' ''){\n\t\tvar fragmentIndex = location.indexOf(\"#\");\n\t\tvar fragment = null;\n\t\tif(fragmentIndex != -1){\n\t\t\t//url中含有#锚标记\n\t\t\tfragment = location.substring(fragmentIndex);\n\t\t\tlocation = location.substring(0, fragmentIndex);\n\t\t}\n\n\n\t\tvar index = location.indexOf('?');\n\t\tif(index !== -1){\n\t\t\t//url中已含有其他参数\n\t\t\tlocation = location + '&csrftoken=' + token;\n\t\t}else{\n\t\t\t//url中没有其他参数\n\t\t\tlocation = location + '?csrftoken=' + token;\n\t\t}\n\t\tif(fragment != null){\n\t\t\tlocation += fragment;\n\t\t}\n\t\telement.setAttribute(attr, location);\n\t}\n}\n```\n\n在客户端html中，主要有两个地方需要加上token，一个是表单form，另一个就是a标签。上面这段代码，首先遍历所有的form, 在form最后添加一段**隐藏字段**，把csrftoken放入其中。然后，代码遍历所有的a标签，在其href属性中加入csrftoken参数。 注意对于 a.href 来说，可能该属性已经有参数，或者有锚标记。因此需要分情况讨论，以不同的格式把 csrftoken 加入其中。\n\n## 4. 在 HTTP 头中自定义属性\n\n     var plainXhr = dojo.xhr;\n\n     // 重写 dojo.xhr 方法\n     dojo.xhr = function(method,args,hasBody) {\n        // 确保 header 对象存在\n        args.headers = args.header || {};\n\n        tokenValue = '<%=request.getSession(false).getAttribute(\"csrftoken\")%>';\n        var token = dojo.getObject(\"tokenValue\");\n\n        // 把 csrftoken 属性放到头中\n        args.headers[\"csrftoken\"] = (token) ? token : \"  \";\n        return plainXhr(method,args,hasBody);\n     };\n\n这里改写了 dojo.xhr 的方法，首先确保 dojo.xhr 中存在 HTTP 头，然后在 args.headers 中添加 csrftoken 字段，并把 token 值从 session 里拿出放入字段中。\n\n# 四、如何选择CSRF防御方法？\n\n目前业界应对 CSRF 攻击有一些克制方法，但是每种方法都有利弊，没有一种方法是完美的。如何选择合适的方法非常重要。\n\n如果网站是一个现有系统，想要**在最短时间内获得一定程度的 CSRF 的保护**，那么**验证 Referer** 的方法是最方便的，要想增加安全性的话，可以选择不支持低版本浏览器，毕竟就目前来说，IE7+, FF3+ 这类高版本浏览器的 Referer 值还无法被篡改。\n\n如果系统必须支持 IE6，并且仍然需要高安全性。那么就要使用 token 来进行验证，在大部分情况下，使用 XmlHttpRequest 并不合适，token 只能以参数的形式放于请求之中，若你的系统不支持用户自己发布信息，那这种程度的防护已经足够，否则的话，你仍然难以防范 token 被黑客窃取并发动攻击。\n在这种情况下，你需要**小心规划你网站提供的各种服务**，从中间找出那些允许用户自己发布信息的部分，把它们与其他服务分开，使用不同的 token 进行保护，这样可以有效抵御黑客对于你关键服务的攻击，把危害降到最低。毕竟，删除别人一个帖子比直接从别人账号中转走大笔存款严重程度要轻的多。\n\n如果是开发一个全新的系统，则抵御 CSRF 的选择要大得多。笔者建议**对于重要的服务，可以尽量使用 XMLHttpRequest 来访问**，这样增加 token 要容易很多。另外尽量避免在 js 代码中使用复杂逻辑来构造常规的同步请求来访问需要 CSRF 保护的资源，比如 window.location 和 document.createElement(“a”) 之类，这样也可以减少在附加 token 时产生的不必要的麻烦。\n\n最后，要记住 CSRF 不是黑客唯一的攻击手段，无论你 CSRF 防范有多么严密，如果你系统有其他安全漏洞，比如跨站域脚本攻击 XSS，那么黑客就可以绕过你的安全防护，展开包括 CSRF 在内的各种攻击，你的防线将如同虚设。\n\n# 五、总结\n\n可见，CSRF 是一种危害非常大的攻击，又很难以防范。目前几种防御策略虽然可以很大程度上抵御 CSRF 的攻击，但并没有一种完美的解决方案。一些新的方案正在研究之中，比如对于每次请求都使用不同的动态口令，把 Referer 和 token 方案结合起来，甚至尝试修改 HTTP 规范，但是这些新的方案尚不成熟，要正式投入使用并被业界广为接受还需时日。在这之前，我们只有充分重视 CSRF，根据系统的实际情况选择最合适的策略，这样才能把 CSRF 的危害降到最低。\n\n---\n>  [参考链接：IBM的技术博客](https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/)\n","slug":"2017-05-23 深入研究CSRF","published":1,"updated":"2019-02-20T13:32:22.929Z","_id":"cjstph3xl000q88zbktb4b5lp","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>作为Web安全数一数二的隐患，CSRF一直让开发人员头疼。本文详细介绍了CSRF攻击的概念，危害，案例和解决方案，为网站安全优化理清思路。</p>\n<a id=\"more\"></a>\n<h1 id=\"一、CSRF的来龙去脉\"><a href=\"#一、CSRF的来龙去脉\" class=\"headerlink\" title=\"一、CSRF的来龙去脉\"></a>一、CSRF的来龙去脉</h1><h2 id=\"1-什么是CSRF？\"><a href=\"#1-什么是CSRF？\" class=\"headerlink\" title=\"1. 什么是CSRF？\"></a>1. 什么是CSRF？</h2><p>CSRF（Cross Site Request Forgery, <strong>跨站域请求伪造</strong>）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。<br>其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。然而，对于大多数人来说，CSRF 却依然是一个陌生的概念。即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。</p>\n<hr>\n<h2 id=\"2-CSRF攻击实例\"><a href=\"#2-CSRF攻击实例\" class=\"headerlink\" title=\"2. CSRF攻击实例\"></a>2. CSRF攻击实例</h2><p>CSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。</p>\n<p>比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求</p>\n<blockquote>\n<p> <a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a></p>\n</blockquote>\n<p> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。</p>\n<p>通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p>\n<p>Mallory 可以自己发送一个请求给银行：</p>\n<blockquote>\n<p><a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a></p>\n</blockquote>\n<p>但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p>\n<blockquote>\n<p> src=”<a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”</p>\n</blockquote>\n<p>并且通过广告等<strong>诱使 Bob 来访问他的网站</strong>。</p>\n<p>当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而<strong>这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器</strong>。</p>\n<p>大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。</p>\n<p>但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 <strong>session 尚未过期</strong>，浏览器的 cookie 之中含有 Bob 的认证信息。</p>\n<p>这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时<strong>毫不知情</strong>。</p>\n<p>等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p>\n<h2 id=\"3-CSRF攻击的对象\"><a href=\"#3-CSRF攻击的对象\" class=\"headerlink\" title=\"3. CSRF攻击的对象\"></a>3. CSRF攻击的对象</h2><p>在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。</p>\n<p>从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie 的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。</p>\n<blockquote>\n<p>因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。</p>\n</blockquote>\n<p>所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。</p>\n<p>比如银行系统中<strong>转账</strong>的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。</p>\n<h1 id=\"二、防御-CSRF-的几种策略\"><a href=\"#二、防御-CSRF-的几种策略\" class=\"headerlink\" title=\"二、防御 CSRF 的几种策略\"></a>二、防御 CSRF 的几种策略</h1><p>在业界目前防御 CSRF 攻击主要有三种策略：</p>\n<ul>\n<li>验证 HTTP Referer 字段；</li>\n<li>在请求地址中添加 token 并验证；</li>\n<li>在 HTTP 头中自定义属性并验证。</li>\n</ul>\n<h2 id=\"1-验证-HTTP-Referer-字段\"><a href=\"#1-验证-HTTP-Referer-字段\" class=\"headerlink\" title=\"1. 验证 HTTP Referer 字段\"></a>1. 验证 HTTP Referer 字段</h2><h3 id=\"1-1-什么是Referer？\"><a href=\"#1-1-什么是Referer？\" class=\"headerlink\" title=\"1.1 什么是Referer？\"></a>1.1 什么是Referer？</h3><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 <strong>Referer</strong>，它记录了该 <strong>HTTP 请求的来源地址</strong>。</p>\n<p>在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问</p>\n<blockquote>\n<p><a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a></p>\n</blockquote>\n<p>用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。</p>\n<p>这时，该转帐请求的 Referer 值就会是<strong>转账按钮所在的页面的 URL</strong>，通常是以 bank.example 域名开头的地址。</p>\n<p>而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。</p>\n<h3 id=\"1-2-如何验证Referer？\"><a href=\"#1-2-如何验证Referer？\" class=\"headerlink\" title=\"1.2 如何验证Referer？\"></a>1.2 如何验证Referer？</h3><p>因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>\n<h3 id=\"1-3-Referer验证的优缺点\"><a href=\"#1-3-Referer验证的优缺点\" class=\"headerlink\" title=\"1.3 Referer验证的优缺点\"></a>1.3 Referer验证的优缺点</h3><p>优点：这种方法简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一<strong>增加一个拦截器来检查 Referer 的值</strong>就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>\n<p>缺点：</p>\n<ol>\n<li><p>Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于Referer的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。</p>\n<blockquote>\n<p>使用验证值的方法，<strong>就是把安全性都依赖于第三方（即浏览器）来保障</strong>，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行CSRF 攻击。</p>\n</blockquote>\n</li>\n<li><p>如果用户为了保护隐私，而设置浏览器使其在发送请求时<strong>不再提供 Referer</strong>。当他们正常访问银行网站时，网站会因为请求Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n</li>\n</ol>\n<h2 id=\"2-在请求地址中添加-token-并验证\"><a href=\"#2-在请求地址中添加-token-并验证\" class=\"headerlink\" title=\"2. 在请求地址中添加 token 并验证\"></a>2. 在请求地址中添加 token 并验证</h2><h3 id=\"2-1-黑客总是能找到漏洞\"><a href=\"#2-1-黑客总是能找到漏洞\" class=\"headerlink\" title=\"2.1 黑客总是能找到漏洞\"></a>2.1 黑客总是能找到漏洞</h3><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。</p>\n<h3 id=\"2-2-那我们就加一把钥匙\"><a href=\"#2-2-那我们就加一把钥匙\" class=\"headerlink\" title=\"2.2 那我们就加一把钥匙\"></a>2.2 那我们就加一把钥匙</h3><p>要抵御 CSRF，关键在于<strong>在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。</strong>可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>\n<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对。</p>\n<p>但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href=\"http://url?csrftoken=tokenvalue。\" target=\"_blank\" rel=\"noopener\">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"”hidden”\" name=\"”csrftoken”\" value=\"”tokenvalue”/\">，这样就把 token 以参数的形式加入请求了。</p>\n<h3 id=\"2-3-使用token的缺点：\"><a href=\"#2-3-使用token的缺点：\" class=\"headerlink\" title=\"2.3 使用token的缺点：\"></a>2.3 使用token的缺点：</h3><p>①. 在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是<strong>对于在页面加载之后动态生成的 html 代码，这种方法就没有作用</strong>，还需要程序员在编码时手动添加 token。</p>\n<p>②. 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。</p>\n<p>为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>\n<h2 id=\"3-在-HTTP-头中自定义属性并验证\"><a href=\"#3-在-HTTP-头中自定义属性并验证\" class=\"headerlink\" title=\"3. 在 HTTP 头中自定义属性并验证\"></a>3. 在 HTTP 头中自定义属性并验证</h2><h3 id=\"3-1-把密钥放到HTTP请求头中\"><a href=\"#3-1-把密钥放到HTTP请求头中\" class=\"headerlink\" title=\"3.1 把密钥放到HTTP请求头中\"></a>3.1 把密钥放到HTTP请求头中</h3><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。</p>\n<p>通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。</p>\n<p>这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>\n<h3 id=\"3-2-缺点：\"><a href=\"#3-2-缺点：\" class=\"headerlink\" title=\"3.2 缺点：\"></a>3.2 缺点：</h3><p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>\n<hr>\n<h1 id=\"三、代码实例-java-：\"><a href=\"#三、代码实例-java-：\" class=\"headerlink\" title=\"三、代码实例(java)：\"></a>三、代码实例(java)：</h1><h2 id=\"1-使用Filter验证Referer\"><a href=\"#1-使用Filter验证Referer\" class=\"headerlink\" title=\"1. 使用Filter验证Referer\"></a>1. 使用Filter验证Referer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从HTTP头部取得Referer值</span></span><br><span class=\"line\"> String referer = request.getHeader(<span class=\"string\">\"Referer\"</span>);</span><br><span class=\"line\"> <span class=\"comment\">//判断Referer是否以bank.example开头</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>((refirer != <span class=\"keyword\">null</span>) &amp;&amp; (referer.trim().startsWith(<span class=\"string\">\"bank.example\"</span>)))&#123;</span><br><span class=\"line\"> vhain.doFilter(request, response);</span><br><span class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">request.getRequestDispatcher(<span class=\"string\">\"error.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码先取得Referer值，然后进行判断，当其非空并以bank.example开头时，则继续请求，否则的话可能是CSRF攻击，转到error.jsp页面。</p>\n<h2 id=\"2-进一步验证请求中的token\"><a href=\"#2-进一步验证请求中的token\" class=\"headerlink\" title=\"2.进一步验证请求中的token\"></a>2.进一步验证请求中的token</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletRequest req = (HttpServletRequest)request;</span><br><span class=\"line\">HttpSession s = req.getSession();</span><br><span class=\"line\"><span class=\"comment\">//从session中，得到csrftoken属性</span></span><br><span class=\"line\">String sToken = (String)s.getAttribute(<span class=\"string\">\"csrftoken\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(sToken == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//产生新的token放入session中</span></span><br><span class=\"line\">\tsToken = generateToken();</span><br><span class=\"line\">\ts.setAttribute(<span class=\"string\">\"csrftoken\"</span>, sToken);</span><br><span class=\"line\">\tchain.doFilter(request, response);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//从HTTP头中取得csrftoken</span></span><br><span class=\"line\">\tString xhrToken = req.getHeader(<span class=\"string\">\"csrftoken\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//从请求参数中取得csrftoken</span></span><br><span class=\"line\">\tString pToken = req.getParameter(<span class=\"string\">\"csrftoken\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sToken != <span class=\"keyword\">null</span> &amp;&amp; xhrToken != <span class=\"keyword\">null</span> &amp;&amp; sToken.equals(xhrToken))&#123;</span><br><span class=\"line\">\t\tchain.doFilter(request, response);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\trequest.getRequestDispatcher(<span class=\"string\">\"error.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-在客户端对请求附加token\"><a href=\"#3-在客户端对请求附加token\" class=\"headerlink\" title=\"3.在客户端对请求附加token\"></a>3.在客户端对请求附加token</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendTOken</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tupdateForms();</span><br><span class=\"line\">\tupdateTags();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateForms</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取所有form元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> forms = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'form'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; forms.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> url = forms[i].action;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果这个form的action值为空，则不附加csrftoken</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(url == <span class=\"literal\">null</span> || url == <span class=\"string\">\"\"</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//动态生成input元素，加到 form 之后</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> e = docement.createElement(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">\t\te.name = <span class=\"string\">\"csrftoken\"</span>;</span><br><span class=\"line\">\t\te.value = token;</span><br><span class=\"line\">\t\te.type = <span class=\"string\">\"hidden\"</span>;</span><br><span class=\"line\">\t\tforms[i].appendChild(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTags</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> all = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> len = all.length;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有a元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; len; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> e = all[i];</span><br><span class=\"line\">\t\tupdateTag(e, <span class=\"string\">\"href\"</span> , token);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTag</span>(<span class=\"params\">element, attr, token</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> location = element.getAttribute(attr);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(location != <span class=\"literal\">null</span> &amp;&amp; location != <span class=\"string\">''</span> <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fragmentIndex = location.indexOf(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fragment = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fragmentIndex != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//url中含有#锚标记</span></span><br><span class=\"line\">\t\t\tfragment = location.substring(fragmentIndex);</span><br><span class=\"line\">\t\t\tlocation = location.substring(<span class=\"number\">0</span>, fragmentIndex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = location.indexOf(<span class=\"string\">'?'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index !== <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//url中已含有其他参数</span></span><br><span class=\"line\">\t\t\tlocation = location + <span class=\"string\">'&amp;csrftoken='</span> + token;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//url中没有其他参数</span></span><br><span class=\"line\">\t\t\tlocation = location + <span class=\"string\">'?csrftoken='</span> + token;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fragment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tlocation += fragment;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telement.setAttribute(attr, location);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在客户端html中，主要有两个地方需要加上token，一个是表单form，另一个就是a标签。上面这段代码，首先遍历所有的form, 在form最后添加一段<strong>隐藏字段</strong>，把csrftoken放入其中。然后，代码遍历所有的a标签，在其href属性中加入csrftoken参数。 注意对于 a.href 来说，可能该属性已经有参数，或者有锚标记。因此需要分情况讨论，以不同的格式把 csrftoken 加入其中。</p>\n<h2 id=\"4-在-HTTP-头中自定义属性\"><a href=\"#4-在-HTTP-头中自定义属性\" class=\"headerlink\" title=\"4. 在 HTTP 头中自定义属性\"></a>4. 在 HTTP 头中自定义属性</h2><pre><code>var plainXhr = dojo.xhr;\n\n// 重写 dojo.xhr 方法\ndojo.xhr = function(method,args,hasBody) {\n   // 确保 header 对象存在\n   args.headers = args.header || {};\n\n   tokenValue = &apos;&lt;%=request.getSession(false).getAttribute(&quot;csrftoken&quot;)%&gt;&apos;;\n   var token = dojo.getObject(&quot;tokenValue&quot;);\n\n   // 把 csrftoken 属性放到头中\n   args.headers[&quot;csrftoken&quot;] = (token) ? token : &quot;  &quot;;\n   return plainXhr(method,args,hasBody);\n};\n</code></pre><p>这里改写了 dojo.xhr 的方法，首先确保 dojo.xhr 中存在 HTTP 头，然后在 args.headers 中添加 csrftoken 字段，并把 token 值从 session 里拿出放入字段中。</p>\n<h1 id=\"四、如何选择CSRF防御方法？\"><a href=\"#四、如何选择CSRF防御方法？\" class=\"headerlink\" title=\"四、如何选择CSRF防御方法？\"></a>四、如何选择CSRF防御方法？</h1><p>目前业界应对 CSRF 攻击有一些克制方法，但是每种方法都有利弊，没有一种方法是完美的。如何选择合适的方法非常重要。</p>\n<p>如果网站是一个现有系统，想要<strong>在最短时间内获得一定程度的 CSRF 的保护</strong>，那么<strong>验证 Referer</strong> 的方法是最方便的，要想增加安全性的话，可以选择不支持低版本浏览器，毕竟就目前来说，IE7+, FF3+ 这类高版本浏览器的 Referer 值还无法被篡改。</p>\n<p>如果系统必须支持 IE6，并且仍然需要高安全性。那么就要使用 token 来进行验证，在大部分情况下，使用 XmlHttpRequest 并不合适，token 只能以参数的形式放于请求之中，若你的系统不支持用户自己发布信息，那这种程度的防护已经足够，否则的话，你仍然难以防范 token 被黑客窃取并发动攻击。<br>在这种情况下，你需要<strong>小心规划你网站提供的各种服务</strong>，从中间找出那些允许用户自己发布信息的部分，把它们与其他服务分开，使用不同的 token 进行保护，这样可以有效抵御黑客对于你关键服务的攻击，把危害降到最低。毕竟，删除别人一个帖子比直接从别人账号中转走大笔存款严重程度要轻的多。</p>\n<p>如果是开发一个全新的系统，则抵御 CSRF 的选择要大得多。笔者建议<strong>对于重要的服务，可以尽量使用 XMLHttpRequest 来访问</strong>，这样增加 token 要容易很多。另外尽量避免在 js 代码中使用复杂逻辑来构造常规的同步请求来访问需要 CSRF 保护的资源，比如 window.location 和 document.createElement(“a”) 之类，这样也可以减少在附加 token 时产生的不必要的麻烦。</p>\n<p>最后，要记住 CSRF 不是黑客唯一的攻击手段，无论你 CSRF 防范有多么严密，如果你系统有其他安全漏洞，比如跨站域脚本攻击 XSS，那么黑客就可以绕过你的安全防护，展开包括 CSRF 在内的各种攻击，你的防线将如同虚设。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><p>可见，CSRF 是一种危害非常大的攻击，又很难以防范。目前几种防御策略虽然可以很大程度上抵御 CSRF 的攻击，但并没有一种完美的解决方案。一些新的方案正在研究之中，比如对于每次请求都使用不同的动态口令，把 Referer 和 token 方案结合起来，甚至尝试修改 HTTP 规范，但是这些新的方案尚不成熟，要正式投入使用并被业界广为接受还需时日。在这之前，我们只有充分重视 CSRF，根据系统的实际情况选择最合适的策略，这样才能把 CSRF 的危害降到最低。</p>\n<hr>\n<blockquote>\n<p> <a href=\"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/\" target=\"_blank\" rel=\"noopener\">参考链接：IBM的技术博客</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<hr>\n<p>作为Web安全数一数二的隐患，CSRF一直让开发人员头疼。本文详细介绍了CSRF攻击的概念，危害，案例和解决方案，为网站安全优化理清思路。</p>","more":"<h1 id=\"一、CSRF的来龙去脉\"><a href=\"#一、CSRF的来龙去脉\" class=\"headerlink\" title=\"一、CSRF的来龙去脉\"></a>一、CSRF的来龙去脉</h1><h2 id=\"1-什么是CSRF？\"><a href=\"#1-什么是CSRF？\" class=\"headerlink\" title=\"1. 什么是CSRF？\"></a>1. 什么是CSRF？</h2><p>CSRF（Cross Site Request Forgery, <strong>跨站域请求伪造</strong>）是一种网络的攻击方式，它在 2007 年曾被列为互联网 20 大安全隐患之一。<br>其他安全隐患，比如 SQL 脚本注入，跨站域脚本攻击等在近年来已经逐渐为众人熟知，很多网站也都针对他们进行了防御。然而，对于大多数人来说，CSRF 却依然是一个陌生的概念。即便是大名鼎鼎的 Gmail, 在 2007 年底也存在着 CSRF 漏洞，从而被黑客攻击而使 Gmail 的用户造成巨大的损失。</p>\n<hr>\n<h2 id=\"2-CSRF攻击实例\"><a href=\"#2-CSRF攻击实例\" class=\"headerlink\" title=\"2. CSRF攻击实例\"></a>2. CSRF攻击实例</h2><p>CSRF 攻击可以在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击站点，从而在并未授权的情况下执行在权限保护之下的操作。</p>\n<p>比如说，受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求</p>\n<blockquote>\n<p> <a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2</a></p>\n</blockquote>\n<p> 可以使 Bob 把 1000000 的存款转到 bob2 的账号下。</p>\n<p>通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该 session 的用户 Bob 已经成功登陆。</p>\n<p>Mallory 可以自己发送一个请求给银行：</p>\n<blockquote>\n<p><a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a></p>\n</blockquote>\n<p>但是这个请求来自 Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p>\n<blockquote>\n<p> src=”<a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a> ”</p>\n</blockquote>\n<p>并且通过广告等<strong>诱使 Bob 来访问他的网站</strong>。</p>\n<p>当 Bob 访问该网站时，上述 url 就会从 Bob 的浏览器发向银行，而<strong>这个请求会附带 Bob 浏览器中的 cookie 一起发向银行服务器</strong>。</p>\n<p>大多数情况下，该请求会失败，因为他要求 Bob 的认证信息。</p>\n<p>但是，如果 Bob 当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的 <strong>session 尚未过期</strong>，浏览器的 cookie 之中含有 Bob 的认证信息。</p>\n<p>这时，悲剧发生了，这个 url 请求就会得到响应，钱将从 Bob 的账号转移到 Mallory 的账号，而 Bob 当时<strong>毫不知情</strong>。</p>\n<p>等以后 Bob 发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而 Mallory 则可以拿到钱后逍遥法外。</p>\n<h2 id=\"3-CSRF攻击的对象\"><a href=\"#3-CSRF攻击的对象\" class=\"headerlink\" title=\"3. CSRF攻击的对象\"></a>3. CSRF攻击的对象</h2><p>在讨论如何抵御 CSRF 之前，先要明确 CSRF 攻击的对象，也就是要保护的对象。</p>\n<p>从以上的例子可知，CSRF 攻击是黑客借助受害者的 cookie 骗取服务器的信任，但是黑客并不能拿到 cookie，也看不到 cookie 的内容。另外，对于服务器返回的结果，由于浏览器同源策略的限制，黑客也无法进行解析。</p>\n<blockquote>\n<p>因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。</p>\n</blockquote>\n<p>所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。</p>\n<p>比如银行系统中<strong>转账</strong>的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询余额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。</p>\n<h1 id=\"二、防御-CSRF-的几种策略\"><a href=\"#二、防御-CSRF-的几种策略\" class=\"headerlink\" title=\"二、防御 CSRF 的几种策略\"></a>二、防御 CSRF 的几种策略</h1><p>在业界目前防御 CSRF 攻击主要有三种策略：</p>\n<ul>\n<li>验证 HTTP Referer 字段；</li>\n<li>在请求地址中添加 token 并验证；</li>\n<li>在 HTTP 头中自定义属性并验证。</li>\n</ul>\n<h2 id=\"1-验证-HTTP-Referer-字段\"><a href=\"#1-验证-HTTP-Referer-字段\" class=\"headerlink\" title=\"1. 验证 HTTP Referer 字段\"></a>1. 验证 HTTP Referer 字段</h2><h3 id=\"1-1-什么是Referer？\"><a href=\"#1-1-什么是Referer？\" class=\"headerlink\" title=\"1.1 什么是Referer？\"></a>1.1 什么是Referer？</h3><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 <strong>Referer</strong>，它记录了该 <strong>HTTP 请求的来源地址</strong>。</p>\n<p>在通常情况下，访问一个安全受限页面的请求来自于同一个网站，比如需要访问</p>\n<blockquote>\n<p><a href=\"http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory\" target=\"_blank\" rel=\"noopener\">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory</a></p>\n</blockquote>\n<p>用户必须先登陆 bank.example，然后通过点击页面上的按钮来触发转账事件。</p>\n<p>这时，该转帐请求的 Referer 值就会是<strong>转账按钮所在的页面的 URL</strong>，通常是以 bank.example 域名开头的地址。</p>\n<p>而如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。</p>\n<h3 id=\"1-2-如何验证Referer？\"><a href=\"#1-2-如何验证Referer？\" class=\"headerlink\" title=\"1.2 如何验证Referer？\"></a>1.2 如何验证Referer？</h3><p>因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p>\n<h3 id=\"1-3-Referer验证的优缺点\"><a href=\"#1-3-Referer验证的优缺点\" class=\"headerlink\" title=\"1.3 Referer验证的优缺点\"></a>1.3 Referer验证的优缺点</h3><p>优点：这种方法简单易行，网站的普通开发人员不需要操心 CSRF 的漏洞，只需要在最后给所有安全敏感的请求统一<strong>增加一个拦截器来检查 Referer 的值</strong>就可以。特别是对于当前现有的系统，不需要改变当前系统的任何已有代码和逻辑，没有风险，非常便捷。</p>\n<p>缺点：</p>\n<ol>\n<li><p>Referer 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于Referer的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。</p>\n<blockquote>\n<p>使用验证值的方法，<strong>就是把安全性都依赖于第三方（即浏览器）来保障</strong>，从理论上来讲，这样并不安全。事实上，对于某些浏览器，比如 IE6 或 FF2，目前已经有一些方法可以篡改 Referer 值。如果 bank.example 网站支持 IE6 浏览器，黑客完全可以把用户浏览器的 Referer 值设为以 bank.example 域名开头的地址，这样就可以通过验证，从而进行CSRF 攻击。</p>\n</blockquote>\n</li>\n<li><p>如果用户为了保护隐私，而设置浏览器使其在发送请求时<strong>不再提供 Referer</strong>。当他们正常访问银行网站时，网站会因为请求Referer 值而认为是 CSRF 攻击，拒绝合法用户的访问。</p>\n</li>\n</ol>\n<h2 id=\"2-在请求地址中添加-token-并验证\"><a href=\"#2-在请求地址中添加-token-并验证\" class=\"headerlink\" title=\"2. 在请求地址中添加 token 并验证\"></a>2. 在请求地址中添加 token 并验证</h2><h3 id=\"2-1-黑客总是能找到漏洞\"><a href=\"#2-1-黑客总是能找到漏洞\" class=\"headerlink\" title=\"2.1 黑客总是能找到漏洞\"></a>2.1 黑客总是能找到漏洞</h3><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 cookie 中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的 cookie 来通过安全验证。</p>\n<h3 id=\"2-2-那我们就加一把钥匙\"><a href=\"#2-2-那我们就加一把钥匙\" class=\"headerlink\" title=\"2.2 那我们就加一把钥匙\"></a>2.2 那我们就加一把钥匙</h3><p>要抵御 CSRF，关键在于<strong>在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。</strong>可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有 token 或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。</p>\n<p>这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于 session 之中，然后在每次请求时把 token 从 session 中拿出，与请求中的 token 进行比对。</p>\n<p>但这种方法的难点在于如何把 token 以参数的形式加入请求。对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href=\"http://url?csrftoken=tokenvalue。\" target=\"_blank\" rel=\"noopener\">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"”hidden”\" name=\"”csrftoken”\" value=\"”tokenvalue”/\">，这样就把 token 以参数的形式加入请求了。</p>\n<h3 id=\"2-3-使用token的缺点：\"><a href=\"#2-3-使用token的缺点：\" class=\"headerlink\" title=\"2.3 使用token的缺点：\"></a>2.3 使用token的缺点：</h3><p>①. 在一个网站中，可以接受请求的地方非常多，要对于每一个请求都加上 token 是很麻烦的，并且很容易漏掉，通常使用的方法就是在每次页面加载时，使用 javascript 遍历整个 dom 树，对于 dom 中所有的 a 和 form 标签后加入 token。这样可以解决大部分的请求，但是<strong>对于在页面加载之后动态生成的 html 代码，这种方法就没有作用</strong>，还需要程序员在编码时手动添加 token。</p>\n<p>②. 该方法还有一个缺点是难以保证 token 本身的安全。特别是在一些论坛之类支持用户自己发表内容的网站，黑客可以在上面发布自己个人网站的地址。由于系统也会在这个地址后面加上 token，黑客可以在自己的网站上得到这个 token，并马上就可以发动 CSRF 攻击。</p>\n<p>为了避免这一点，系统可以在添加 token 的时候增加一个判断，如果这个链接是链到自己本站的，就在后面添加 token，如果是通向外网则不加。不过，即使这个 csrftoken 不以参数的形式附加在请求之中，黑客的网站也同样可以通过 Referer 来得到这个 token 值以发动 CSRF 攻击。这也是一些用户喜欢手动关闭浏览器 Referer 功能的原因。</p>\n<h2 id=\"3-在-HTTP-头中自定义属性并验证\"><a href=\"#3-在-HTTP-头中自定义属性并验证\" class=\"headerlink\" title=\"3. 在 HTTP 头中自定义属性并验证\"></a>3. 在 HTTP 头中自定义属性并验证</h2><h3 id=\"3-1-把密钥放到HTTP请求头中\"><a href=\"#3-1-把密钥放到HTTP请求头中\" class=\"headerlink\" title=\"3.1 把密钥放到HTTP请求头中\"></a>3.1 把密钥放到HTTP请求头中</h3><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。</p>\n<p>通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。</p>\n<p>这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p>\n<h3 id=\"3-2-缺点：\"><a href=\"#3-2-缺点：\" class=\"headerlink\" title=\"3.2 缺点：\"></a>3.2 缺点：</h3><p>然而这种方法的局限性非常大。XMLHttpRequest 请求通常用于 Ajax 方法中对于页面局部的异步刷新，并非所有的请求都适合用这个类来发起，而且通过该类请求得到的页面不能被浏览器所记录下，从而进行前进，后退，刷新，收藏等操作，给用户带来不便。另外，对于没有进行 CSRF 防护的遗留系统来说，要采用这种方法来进行防护，要把所有请求都改为 XMLHttpRequest 请求，这样几乎是要重写整个网站，这代价无疑是不能接受的。</p>\n<hr>\n<h1 id=\"三、代码实例-java-：\"><a href=\"#三、代码实例-java-：\" class=\"headerlink\" title=\"三、代码实例(java)：\"></a>三、代码实例(java)：</h1><h2 id=\"1-使用Filter验证Referer\"><a href=\"#1-使用Filter验证Referer\" class=\"headerlink\" title=\"1. 使用Filter验证Referer\"></a>1. 使用Filter验证Referer</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从HTTP头部取得Referer值</span></span><br><span class=\"line\"> String referer = request.getHeader(<span class=\"string\">\"Referer\"</span>);</span><br><span class=\"line\"> <span class=\"comment\">//判断Referer是否以bank.example开头</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span>((refirer != <span class=\"keyword\">null</span>) &amp;&amp; (referer.trim().startsWith(<span class=\"string\">\"bank.example\"</span>)))&#123;</span><br><span class=\"line\"> vhain.doFilter(request, response);</span><br><span class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">request.getRequestDispatcher(<span class=\"string\">\"error.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码先取得Referer值，然后进行判断，当其非空并以bank.example开头时，则继续请求，否则的话可能是CSRF攻击，转到error.jsp页面。</p>\n<h2 id=\"2-进一步验证请求中的token\"><a href=\"#2-进一步验证请求中的token\" class=\"headerlink\" title=\"2.进一步验证请求中的token\"></a>2.进一步验证请求中的token</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpServletRequest req = (HttpServletRequest)request;</span><br><span class=\"line\">HttpSession s = req.getSession();</span><br><span class=\"line\"><span class=\"comment\">//从session中，得到csrftoken属性</span></span><br><span class=\"line\">String sToken = (String)s.getAttribute(<span class=\"string\">\"csrftoken\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(sToken == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//产生新的token放入session中</span></span><br><span class=\"line\">\tsToken = generateToken();</span><br><span class=\"line\">\ts.setAttribute(<span class=\"string\">\"csrftoken\"</span>, sToken);</span><br><span class=\"line\">\tchain.doFilter(request, response);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//从HTTP头中取得csrftoken</span></span><br><span class=\"line\">\tString xhrToken = req.getHeader(<span class=\"string\">\"csrftoken\"</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//从请求参数中取得csrftoken</span></span><br><span class=\"line\">\tString pToken = req.getParameter(<span class=\"string\">\"csrftoken\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sToken != <span class=\"keyword\">null</span> &amp;&amp; xhrToken != <span class=\"keyword\">null</span> &amp;&amp; sToken.equals(xhrToken))&#123;</span><br><span class=\"line\">\t\tchain.doFilter(request, response);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\trequest.getRequestDispatcher(<span class=\"string\">\"error.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-在客户端对请求附加token\"><a href=\"#3-在客户端对请求附加token\" class=\"headerlink\" title=\"3.在客户端对请求附加token\"></a>3.在客户端对请求附加token</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appendTOken</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tupdateForms();</span><br><span class=\"line\">\tupdateTags();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateForms</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//获取所有form元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> forms = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'form'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; forms.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> url = forms[i].action;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//如果这个form的action值为空，则不附加csrftoken</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(url == <span class=\"literal\">null</span> || url == <span class=\"string\">\"\"</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//动态生成input元素，加到 form 之后</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> e = docement.createElement(<span class=\"string\">\"input\"</span>);</span><br><span class=\"line\">\t\te.name = <span class=\"string\">\"csrftoken\"</span>;</span><br><span class=\"line\">\t\te.value = token;</span><br><span class=\"line\">\t\te.type = <span class=\"string\">\"hidden\"</span>;</span><br><span class=\"line\">\t\tforms[i].appendChild(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTags</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> all = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'a'</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> len = all.length;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//遍历所有a元素</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i&lt; len; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> e = all[i];</span><br><span class=\"line\">\t\tupdateTag(e, <span class=\"string\">\"href\"</span> , token);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateTag</span>(<span class=\"params\">element, attr, token</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> location = element.getAttribute(attr);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(location != <span class=\"literal\">null</span> &amp;&amp; location != <span class=\"string\">''</span> <span class=\"string\">''</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fragmentIndex = location.indexOf(<span class=\"string\">\"#\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> fragment = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fragmentIndex != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//url中含有#锚标记</span></span><br><span class=\"line\">\t\t\tfragment = location.substring(fragmentIndex);</span><br><span class=\"line\">\t\t\tlocation = location.substring(<span class=\"number\">0</span>, fragmentIndex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = location.indexOf(<span class=\"string\">'?'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(index !== <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//url中已含有其他参数</span></span><br><span class=\"line\">\t\t\tlocation = location + <span class=\"string\">'&amp;csrftoken='</span> + token;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//url中没有其他参数</span></span><br><span class=\"line\">\t\t\tlocation = location + <span class=\"string\">'?csrftoken='</span> + token;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fragment != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t\tlocation += fragment;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telement.setAttribute(attr, location);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在客户端html中，主要有两个地方需要加上token，一个是表单form，另一个就是a标签。上面这段代码，首先遍历所有的form, 在form最后添加一段<strong>隐藏字段</strong>，把csrftoken放入其中。然后，代码遍历所有的a标签，在其href属性中加入csrftoken参数。 注意对于 a.href 来说，可能该属性已经有参数，或者有锚标记。因此需要分情况讨论，以不同的格式把 csrftoken 加入其中。</p>\n<h2 id=\"4-在-HTTP-头中自定义属性\"><a href=\"#4-在-HTTP-头中自定义属性\" class=\"headerlink\" title=\"4. 在 HTTP 头中自定义属性\"></a>4. 在 HTTP 头中自定义属性</h2><pre><code>var plainXhr = dojo.xhr;\n\n// 重写 dojo.xhr 方法\ndojo.xhr = function(method,args,hasBody) {\n   // 确保 header 对象存在\n   args.headers = args.header || {};\n\n   tokenValue = &apos;&lt;%=request.getSession(false).getAttribute(&quot;csrftoken&quot;)%&gt;&apos;;\n   var token = dojo.getObject(&quot;tokenValue&quot;);\n\n   // 把 csrftoken 属性放到头中\n   args.headers[&quot;csrftoken&quot;] = (token) ? token : &quot;  &quot;;\n   return plainXhr(method,args,hasBody);\n};\n</code></pre><p>这里改写了 dojo.xhr 的方法，首先确保 dojo.xhr 中存在 HTTP 头，然后在 args.headers 中添加 csrftoken 字段，并把 token 值从 session 里拿出放入字段中。</p>\n<h1 id=\"四、如何选择CSRF防御方法？\"><a href=\"#四、如何选择CSRF防御方法？\" class=\"headerlink\" title=\"四、如何选择CSRF防御方法？\"></a>四、如何选择CSRF防御方法？</h1><p>目前业界应对 CSRF 攻击有一些克制方法，但是每种方法都有利弊，没有一种方法是完美的。如何选择合适的方法非常重要。</p>\n<p>如果网站是一个现有系统，想要<strong>在最短时间内获得一定程度的 CSRF 的保护</strong>，那么<strong>验证 Referer</strong> 的方法是最方便的，要想增加安全性的话，可以选择不支持低版本浏览器，毕竟就目前来说，IE7+, FF3+ 这类高版本浏览器的 Referer 值还无法被篡改。</p>\n<p>如果系统必须支持 IE6，并且仍然需要高安全性。那么就要使用 token 来进行验证，在大部分情况下，使用 XmlHttpRequest 并不合适，token 只能以参数的形式放于请求之中，若你的系统不支持用户自己发布信息，那这种程度的防护已经足够，否则的话，你仍然难以防范 token 被黑客窃取并发动攻击。<br>在这种情况下，你需要<strong>小心规划你网站提供的各种服务</strong>，从中间找出那些允许用户自己发布信息的部分，把它们与其他服务分开，使用不同的 token 进行保护，这样可以有效抵御黑客对于你关键服务的攻击，把危害降到最低。毕竟，删除别人一个帖子比直接从别人账号中转走大笔存款严重程度要轻的多。</p>\n<p>如果是开发一个全新的系统，则抵御 CSRF 的选择要大得多。笔者建议<strong>对于重要的服务，可以尽量使用 XMLHttpRequest 来访问</strong>，这样增加 token 要容易很多。另外尽量避免在 js 代码中使用复杂逻辑来构造常规的同步请求来访问需要 CSRF 保护的资源，比如 window.location 和 document.createElement(“a”) 之类，这样也可以减少在附加 token 时产生的不必要的麻烦。</p>\n<p>最后，要记住 CSRF 不是黑客唯一的攻击手段，无论你 CSRF 防范有多么严密，如果你系统有其他安全漏洞，比如跨站域脚本攻击 XSS，那么黑客就可以绕过你的安全防护，展开包括 CSRF 在内的各种攻击，你的防线将如同虚设。</p>\n<h1 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h1><p>可见，CSRF 是一种危害非常大的攻击，又很难以防范。目前几种防御策略虽然可以很大程度上抵御 CSRF 的攻击，但并没有一种完美的解决方案。一些新的方案正在研究之中，比如对于每次请求都使用不同的动态口令，把 Referer 和 token 方案结合起来，甚至尝试修改 HTTP 规范，但是这些新的方案尚不成熟，要正式投入使用并被业界广为接受还需时日。在这之前，我们只有充分重视 CSRF，根据系统的实际情况选择最合适的策略，这样才能把 CSRF 的危害降到最低。</p>\n<hr>\n<blockquote>\n<p> <a href=\"https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/\" target=\"_blank\" rel=\"noopener\">参考链接：IBM的技术博客</a></p>\n</blockquote>"},{"title":"React项目中的高频ES6语法","date":"2017-07-08T08:06:44.000Z","keywords":"前端 React","_content":"\n\n---\n在学习React过程中，注意到无论是GitHub上的Demo还是React相关文档，ES6语法都有大量使用。如果不了解其中一些语法，学习曲线就会越来越陡峭。但是要系统学习ES6，又会消耗大量时间。\n\n在这篇博客里，我把一些常用的ES6语法做一些总结，以更快更好地理解React中的概念和用法。\n\n<!--more-->\n\n在线练习ES6的工具：[ES6 fiddle](http://www.es6fiddle.net)\n\n--- \n\n## 1. let & const\nES6的两个新关键字，主要是引入了块级作用域，不存在变量提升，不允许重复定义等特性，减少了ES5中很容易踩到的地雷。const用来定义常量，不允许后期修改赋值。\n参考文档：[阮一峰的博客](http://es6.ruanyifeng.com/#docs/let)\n\n## 2.解构赋值\n\n - 常规用法：\n\n``` js\n\tlet {x} = {x:1, y:2}\n\tlet { PropTypes } = React\n```\n\t\n这里是对象的解构赋值，等同于`let PropTypes = React.PropTypes`\n> 这里其实包含了两步：\n> \n> 1. 声明变量PropTypes;\n> 2. 给其赋值为React.PropTypes。\n\n所以等效于这样的写法：\n\n\t```\n\t    let PropTypes\n\t    { PropTypes } = React;\n\t```\n\n - 可以同时写多个变量：\n \n``` js\n    let { PropTypes, Component } = React;\n```\n\n - 如果想定义的变量名和属性名不一样：\n \n``` js\n    //声明x1变量，赋值为1. \n    //x是模式，不是变量也不会被赋值\n    let { x : x1 } = { x:1, y:2 }\n```\n  \n\n - **对象， 数组， 字符串等都有解构赋值的用法。**\n \n - 参考文档：[解构赋值](http://es6.ruanyifeng.com/#docs/destructuring)\n\n## 3.对象的拓展\n### 3.1 属性的简洁表达式\n\n    let x = '123';\n    //等同于：let obj = { x: x, y: '33}\n    let obj = {x, y: '33' };\n   \n### 3.2 方法名的简写\n```\n    let User = {\n\t    method (){   //等同于method: function(){...}\n\t\t    //...\n\t    }\n    }\n```\n\n### 3.3属性名表达式\n\n``` js\n    let key = 'id';\n    let obj = {\n\t\t    [key] : '1010', //注意方括号\n\t\t    ['use' + 'name' ]: 'x'\n\t}\n```\n\n把表达式写在 [] 中， 表达式的值作为字段名称：\n\n``` js\n    let obj = {\n\t    id : '1010',\n\t    usename: 'x'\n\t}\n```\n**注意**：属性名表达式与属性名简写不能同时使用：\n\n``` js\n    let key = 'id';\n    let id = '1010';\n    let obj ={\n\t    [key]\n\t}  //Error!\n```\n\n## 4. ES6 Class语法\n使用ES6语法定义一个React组件：\n\n``` jsx\nexport class Counter extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {count: props.initialCount};\n\t\tthis.tick = this.tick.bind(this);\n\t}\n\n\ttick(){\n\t\tthis.setState({count: this.state.count + 1});\n\t}\n\trender(){\n\t\t\treturn (\n\t\t\t\t<div onClick = {this.tick}\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nCounter.propTypes = { initialCount : Reart.PropTypes.number };\n\nCounter.defaultProps = { initialCount: 0 };\n```\n\n**注意**：\n\n1. ES6的继承语法： extends关键字；\n2. 各个方法使用了方法简写，如tick(){}和render(){}, 方法之间不加 “,”；\n3. `constructor` 是构造函数， 可以替代getInitialState ； \n4. 构造函数内需要调用父类的构造函数：`super(props)` , 否则就会报错。因为子类没有自身的`this` 对象，需要从父类继承。\n5. `this.tick = this.tick.bind(this)`中， 使用**bind**来绑定执行作用域（使用React.createClass是自动绑定的), 也可以在render中监听事件的位置，使用bind(this):\n\t\n\t``` jsx\n    <div onClick= {this.tick.bind(this)}>\n\t      Clicks: {this.state.count}\n    </div>\n\t```    \n**官方建议统一写在constructor中，这样子该方法就只需绑定一次。**\n6. 除了使用bind, 还可以使用箭头函数：\n``` jsx\n\t<div onClick = {() => this.tick()}>\n\t\tClicks: {this.state.count}\n\t</div>\n```\n> 箭头函数的特性：\n> 函数体内的this就是定义是的对象， 而非调用时所在的对象。箭头函数的this指向是固定的， 而普通函数是可变的。\n\n## 5. 箭头函数 \n\n - ES6允许使用 `=>` 来定义函数：\n\n\t``` js\n\tlet f = v => v+2\n\t//等同于\n\tlet f = function(v){\n\t\treturn v + 2;\n\t}\t\n\t```\n\n - 如果有多个参数：\n\n\t``` js\n\t\tlet f = (x ,y) => x + y;\n\t``` \n\n - 函数有多条语句， 用大括号包装：\n\n\t``` js\n\t\tlet f = (x,y) => {\n\t\t\tx = x + 11;\n\t\t\ty = y + 33;\n\t\t\treturn x + y;\n\t\t}\t\n\t```\n\n> 箭头函数的this指向能保持不变， 不是因为内部有绑定机制， 而是因为，**箭头函数没有自己的this， 导致代码内的this就是外层代码块的this。**\n\n - 参考文档： [箭头函数](#)\n\n## 6. export & import\n - export用于输出模块对外的接口， import用于导入其他模块提供的功能。 \n \n``` js\nexport let client = \"App\"\t//输出变量\nexport function mul(x, y){\t//输出函数\n\treturn x + y;\n}\nexport class Toast(){}\t\t//输出类\t\n```\n\n - 也可以统一输出：\n \n``` js\n\t//文件名： Util.js\n\tlet client = 'App';\n\tfunction mul (x , y){\n\t\treturn x + y;\n\t}\n\texport { client, mul }\t\n```\n\n- 那么别的组件就要这样导入它：\n\n``` js\n\timport {client, mul} from './Util.js'\n```\n\n- 还可以打包导入：\n``` js\n\timport * as U from './Util.js'\n\tU.client //使用U\n```\n\n- 常用的 `export default` 命令， 用于输出默认的方法， 变量或类：\n``` js\n\texport default React.createClass({\n\t\t//...\n\t})\t\n```\n- 引入的时候就更方便， 可以随意指定名称：\n``` js\n\timport Tab from 'tab'; \n```\n- 参考文档：[export&import](#)\n\n## 7. 对象的拓展运算符: “...”\n拓展运算符在Redux的示例Demo中很常见。\n\n- 拓展运算符可以用来合并两个对象：\n``` js\n\t//state = { name: 'y' }\n\treturn {...state, name: 'x', id: 101 }\n\t//返回 { name: 'x', id: 101 }\n```\n\t> 上面代码有两个过程:1.去除state对象的所有可比案例属性， 拷贝到当前对象上；\n\t\t\t\t\t  2.如果自定义的属性在后面， 拓展运算符的同名属性会被覆盖。\n\n- 这种用法等同于 Object.assign:\n\n``` js\n\t//assign字面意思为分配\n\tObject.assign({}, state, {name: 'x', id:101})\n``` \n\n- 使用拓展运算符需要安装`transform-object-rest-spread`插件， 然后在babel中配置。 配置如下：\n\n``` js\ntest: /\\.js$/,\nexclude: /node_modules/,\nloader: 'babel',\nquery:{\n    presets: ['react', 'es2015'],\n    plugins: [\"transform-object-rest-spread\"]\n}\n```\n\n- 参考文档：[ES6拓展运算符](#)\n\n---\nThe End.\n","source":"_posts/2017-07-08 React项目中的高频ES6语法.md","raw":"---\ntitle: React项目中的高频ES6语法\ndate: 2017-07-08 16:06:44\ncategories: 技术\nkeywords: 前端 React\n---\n\n\n---\n在学习React过程中，注意到无论是GitHub上的Demo还是React相关文档，ES6语法都有大量使用。如果不了解其中一些语法，学习曲线就会越来越陡峭。但是要系统学习ES6，又会消耗大量时间。\n\n在这篇博客里，我把一些常用的ES6语法做一些总结，以更快更好地理解React中的概念和用法。\n\n<!--more-->\n\n在线练习ES6的工具：[ES6 fiddle](http://www.es6fiddle.net)\n\n--- \n\n## 1. let & const\nES6的两个新关键字，主要是引入了块级作用域，不存在变量提升，不允许重复定义等特性，减少了ES5中很容易踩到的地雷。const用来定义常量，不允许后期修改赋值。\n参考文档：[阮一峰的博客](http://es6.ruanyifeng.com/#docs/let)\n\n## 2.解构赋值\n\n - 常规用法：\n\n``` js\n\tlet {x} = {x:1, y:2}\n\tlet { PropTypes } = React\n```\n\t\n这里是对象的解构赋值，等同于`let PropTypes = React.PropTypes`\n> 这里其实包含了两步：\n> \n> 1. 声明变量PropTypes;\n> 2. 给其赋值为React.PropTypes。\n\n所以等效于这样的写法：\n\n\t```\n\t    let PropTypes\n\t    { PropTypes } = React;\n\t```\n\n - 可以同时写多个变量：\n \n``` js\n    let { PropTypes, Component } = React;\n```\n\n - 如果想定义的变量名和属性名不一样：\n \n``` js\n    //声明x1变量，赋值为1. \n    //x是模式，不是变量也不会被赋值\n    let { x : x1 } = { x:1, y:2 }\n```\n  \n\n - **对象， 数组， 字符串等都有解构赋值的用法。**\n \n - 参考文档：[解构赋值](http://es6.ruanyifeng.com/#docs/destructuring)\n\n## 3.对象的拓展\n### 3.1 属性的简洁表达式\n\n    let x = '123';\n    //等同于：let obj = { x: x, y: '33}\n    let obj = {x, y: '33' };\n   \n### 3.2 方法名的简写\n```\n    let User = {\n\t    method (){   //等同于method: function(){...}\n\t\t    //...\n\t    }\n    }\n```\n\n### 3.3属性名表达式\n\n``` js\n    let key = 'id';\n    let obj = {\n\t\t    [key] : '1010', //注意方括号\n\t\t    ['use' + 'name' ]: 'x'\n\t}\n```\n\n把表达式写在 [] 中， 表达式的值作为字段名称：\n\n``` js\n    let obj = {\n\t    id : '1010',\n\t    usename: 'x'\n\t}\n```\n**注意**：属性名表达式与属性名简写不能同时使用：\n\n``` js\n    let key = 'id';\n    let id = '1010';\n    let obj ={\n\t    [key]\n\t}  //Error!\n```\n\n## 4. ES6 Class语法\n使用ES6语法定义一个React组件：\n\n``` jsx\nexport class Counter extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {count: props.initialCount};\n\t\tthis.tick = this.tick.bind(this);\n\t}\n\n\ttick(){\n\t\tthis.setState({count: this.state.count + 1});\n\t}\n\trender(){\n\t\t\treturn (\n\t\t\t\t<div onClick = {this.tick}\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nCounter.propTypes = { initialCount : Reart.PropTypes.number };\n\nCounter.defaultProps = { initialCount: 0 };\n```\n\n**注意**：\n\n1. ES6的继承语法： extends关键字；\n2. 各个方法使用了方法简写，如tick(){}和render(){}, 方法之间不加 “,”；\n3. `constructor` 是构造函数， 可以替代getInitialState ； \n4. 构造函数内需要调用父类的构造函数：`super(props)` , 否则就会报错。因为子类没有自身的`this` 对象，需要从父类继承。\n5. `this.tick = this.tick.bind(this)`中， 使用**bind**来绑定执行作用域（使用React.createClass是自动绑定的), 也可以在render中监听事件的位置，使用bind(this):\n\t\n\t``` jsx\n    <div onClick= {this.tick.bind(this)}>\n\t      Clicks: {this.state.count}\n    </div>\n\t```    \n**官方建议统一写在constructor中，这样子该方法就只需绑定一次。**\n6. 除了使用bind, 还可以使用箭头函数：\n``` jsx\n\t<div onClick = {() => this.tick()}>\n\t\tClicks: {this.state.count}\n\t</div>\n```\n> 箭头函数的特性：\n> 函数体内的this就是定义是的对象， 而非调用时所在的对象。箭头函数的this指向是固定的， 而普通函数是可变的。\n\n## 5. 箭头函数 \n\n - ES6允许使用 `=>` 来定义函数：\n\n\t``` js\n\tlet f = v => v+2\n\t//等同于\n\tlet f = function(v){\n\t\treturn v + 2;\n\t}\t\n\t```\n\n - 如果有多个参数：\n\n\t``` js\n\t\tlet f = (x ,y) => x + y;\n\t``` \n\n - 函数有多条语句， 用大括号包装：\n\n\t``` js\n\t\tlet f = (x,y) => {\n\t\t\tx = x + 11;\n\t\t\ty = y + 33;\n\t\t\treturn x + y;\n\t\t}\t\n\t```\n\n> 箭头函数的this指向能保持不变， 不是因为内部有绑定机制， 而是因为，**箭头函数没有自己的this， 导致代码内的this就是外层代码块的this。**\n\n - 参考文档： [箭头函数](#)\n\n## 6. export & import\n - export用于输出模块对外的接口， import用于导入其他模块提供的功能。 \n \n``` js\nexport let client = \"App\"\t//输出变量\nexport function mul(x, y){\t//输出函数\n\treturn x + y;\n}\nexport class Toast(){}\t\t//输出类\t\n```\n\n - 也可以统一输出：\n \n``` js\n\t//文件名： Util.js\n\tlet client = 'App';\n\tfunction mul (x , y){\n\t\treturn x + y;\n\t}\n\texport { client, mul }\t\n```\n\n- 那么别的组件就要这样导入它：\n\n``` js\n\timport {client, mul} from './Util.js'\n```\n\n- 还可以打包导入：\n``` js\n\timport * as U from './Util.js'\n\tU.client //使用U\n```\n\n- 常用的 `export default` 命令， 用于输出默认的方法， 变量或类：\n``` js\n\texport default React.createClass({\n\t\t//...\n\t})\t\n```\n- 引入的时候就更方便， 可以随意指定名称：\n``` js\n\timport Tab from 'tab'; \n```\n- 参考文档：[export&import](#)\n\n## 7. 对象的拓展运算符: “...”\n拓展运算符在Redux的示例Demo中很常见。\n\n- 拓展运算符可以用来合并两个对象：\n``` js\n\t//state = { name: 'y' }\n\treturn {...state, name: 'x', id: 101 }\n\t//返回 { name: 'x', id: 101 }\n```\n\t> 上面代码有两个过程:1.去除state对象的所有可比案例属性， 拷贝到当前对象上；\n\t\t\t\t\t  2.如果自定义的属性在后面， 拓展运算符的同名属性会被覆盖。\n\n- 这种用法等同于 Object.assign:\n\n``` js\n\t//assign字面意思为分配\n\tObject.assign({}, state, {name: 'x', id:101})\n``` \n\n- 使用拓展运算符需要安装`transform-object-rest-spread`插件， 然后在babel中配置。 配置如下：\n\n``` js\ntest: /\\.js$/,\nexclude: /node_modules/,\nloader: 'babel',\nquery:{\n    presets: ['react', 'es2015'],\n    plugins: [\"transform-object-rest-spread\"]\n}\n```\n\n- 参考文档：[ES6拓展运算符](#)\n\n---\nThe End.\n","slug":"2017-07-08 React项目中的高频ES6语法","published":1,"updated":"2019-02-20T13:32:22.930Z","_id":"cjstph3xo000t88zbw718rnfc","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<p>在学习React过程中，注意到无论是GitHub上的Demo还是React相关文档，ES6语法都有大量使用。如果不了解其中一些语法，学习曲线就会越来越陡峭。但是要系统学习ES6，又会消耗大量时间。</p>\n<p>在这篇博客里，我把一些常用的ES6语法做一些总结，以更快更好地理解React中的概念和用法。</p>\n<a id=\"more\"></a>\n<p>在线练习ES6的工具：<a href=\"http://www.es6fiddle.net\" target=\"_blank\" rel=\"noopener\">ES6 fiddle</a></p>\n<hr>\n<h2 id=\"1-let-amp-const\"><a href=\"#1-let-amp-const\" class=\"headerlink\" title=\"1. let &amp; const\"></a>1. let &amp; const</h2><p>ES6的两个新关键字，主要是引入了块级作用域，不存在变量提升，不允许重复定义等特性，减少了ES5中很容易踩到的地雷。const用来定义常量，不允许后期修改赋值。<br>参考文档：<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">阮一峰的博客</a></p>\n<h2 id=\"2-解构赋值\"><a href=\"#2-解构赋值\" class=\"headerlink\" title=\"2.解构赋值\"></a>2.解构赋值</h2><ul>\n<li>常规用法：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;x&#125; = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; PropTypes &#125; = React</span><br></pre></td></tr></table></figure>\n<p>这里是对象的解构赋值，等同于<code>let PropTypes = React.PropTypes</code></p>\n<blockquote>\n<p>这里其实包含了两步：</p>\n<ol>\n<li>声明变量PropTypes;</li>\n<li>给其赋值为React.PropTypes。</li>\n</ol>\n</blockquote>\n<p>所以等效于这样的写法：</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let PropTypes</span><br><span class=\"line\">&#123; PropTypes &#125; = React;</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>可以同时写多个变量：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; PropTypes, Component &#125; = React;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果想定义的变量名和属性名不一样：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明x1变量，赋值为1. </span></span><br><span class=\"line\"><span class=\"comment\">//x是模式，不是变量也不会被赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">x</span> : x1 &#125; = &#123; <span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>对象， 数组， 字符串等都有解构赋值的用法。</strong></p>\n</li>\n<li><p>参考文档：<a href=\"http://es6.ruanyifeng.com/#docs/destructuring\" target=\"_blank\" rel=\"noopener\">解构赋值</a></p>\n</li>\n</ul>\n<h2 id=\"3-对象的拓展\"><a href=\"#3-对象的拓展\" class=\"headerlink\" title=\"3.对象的拓展\"></a>3.对象的拓展</h2><h3 id=\"3-1-属性的简洁表达式\"><a href=\"#3-1-属性的简洁表达式\" class=\"headerlink\" title=\"3.1 属性的简洁表达式\"></a>3.1 属性的简洁表达式</h3><pre><code>let x = &apos;123&apos;;\n//等同于：let obj = { x: x, y: &apos;33}\nlet obj = {x, y: &apos;33&apos; };\n</code></pre><h3 id=\"3-2-方法名的简写\"><a href=\"#3-2-方法名的简写\" class=\"headerlink\" title=\"3.2 方法名的简写\"></a>3.2 方法名的简写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let User = &#123;</span><br><span class=\"line\"> method ()&#123;   //等同于method: function()&#123;...&#125;</span><br><span class=\"line\">  //...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3属性名表达式\"><a href=\"#3-3属性名表达式\" class=\"headerlink\" title=\"3.3属性名表达式\"></a>3.3属性名表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> key = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t    [key] : <span class=\"string\">'1010'</span>, <span class=\"comment\">//注意方括号</span></span><br><span class=\"line\">\t    [<span class=\"string\">'use'</span> + <span class=\"string\">'name'</span> ]: <span class=\"string\">'x'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把表达式写在 [] 中， 表达式的值作为字段名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    id : <span class=\"string\">'1010'</span>,</span><br><span class=\"line\">    usename: <span class=\"string\">'x'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：属性名表达式与属性名简写不能同时使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> key = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> id = <span class=\"string\">'1010'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> obj =&#123;</span><br><span class=\"line\">    [key]</span><br><span class=\"line\">&#125;  <span class=\"comment\">//Error!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-ES6-Class语法\"><a href=\"#4-ES6-Class语法\" class=\"headerlink\" title=\"4. ES6 Class语法\"></a>4. ES6 Class语法</h2><p>使用ES6语法定义一个React组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">count</span>: props.initialCount&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.tick = <span class=\"keyword\">this</span>.tick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttick()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">count</span>: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t\t&lt;div onClick = &#123;<span class=\"keyword\">this</span>.tick&#125;</span><br><span class=\"line\">\t\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t);</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Counter.propTypes = &#123; initialCount : Reart.PropTypes.number &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Counter.defaultProps = &#123; initialCount: 0 &#125;;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>ES6的继承语法： extends关键字；</li>\n<li>各个方法使用了方法简写，如tick(){}和render(){}, 方法之间不加 “,”；</li>\n<li><code>constructor</code> 是构造函数， 可以替代getInitialState ； </li>\n<li>构造函数内需要调用父类的构造函数：<code>super(props)</code> , 否则就会报错。因为子类没有自身的<code>this</code> 对象，需要从父类继承。</li>\n<li><p><code>this.tick = this.tick.bind(this)</code>中， 使用<strong>bind</strong>来绑定执行作用域（使用React.createClass是自动绑定的), 也可以在render中监听事件的位置，使用bind(this):</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div onClick= &#123;<span class=\"keyword\">this</span>.tick.bind(<span class=\"keyword\">this</span>)&#125;&gt;</span><br><span class=\"line\">\t      Clicks: &#123;<span class=\"keyword\">this</span>.state.count&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t```    </span></span><br><span class=\"line\"><span class=\"regexp\">**官方建议统一写在constructor中，这样子该方法就只需绑定一次。**</span></span><br><span class=\"line\"><span class=\"regexp\">6. 除了使用bind, 还可以使用箭头函数：</span></span><br><span class=\"line\"><span class=\"regexp\">``` jsx</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;div onClick = &#123;() =&gt; this.tick()&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tClicks: &#123;this.state.count&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>箭头函数的特性：<br>函数体内的this就是定义是的对象， 而非调用时所在的对象。箭头函数的this指向是固定的， 而普通函数是可变的。</p>\n</blockquote>\n<h2 id=\"5-箭头函数\"><a href=\"#5-箭头函数\" class=\"headerlink\" title=\"5. 箭头函数\"></a>5. 箭头函数</h2><ul>\n<li><p>ES6允许使用 <code>=&gt;</code> 来定义函数：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v+<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果有多个参数：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">let</span> f = <span class=\"function\">(<span class=\"params\">x ,y</span>) =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- 函数有多条语句， 用大括号包装：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> f = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tx = x + <span class=\"number\">11</span>;</span><br><span class=\"line\">\t\ty = y + <span class=\"number\">33</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>箭头函数的this指向能保持不变， 不是因为内部有绑定机制， 而是因为，<strong>箭头函数没有自己的this， 导致代码内的this就是外层代码块的this。</strong></p>\n</blockquote>\n<ul>\n<li>参考文档： <a href=\"#\">箭头函数</a></li>\n</ul>\n<h2 id=\"6-export-amp-import\"><a href=\"#6-export-amp-import\" class=\"headerlink\" title=\"6. export &amp; import\"></a>6. export &amp; import</h2><ul>\n<li>export用于输出模块对外的接口， import用于导入其他模块提供的功能。 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> client = <span class=\"string\">\"App\"</span>\t<span class=\"comment\">//输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mul</span>(<span class=\"params\">x, y</span>)</span>&#123;\t<span class=\"comment\">//输出函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toast</span>()</span>&#123;&#125;\t\t<span class=\"comment\">//输出类</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>也可以统一输出：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名： Util.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> client = <span class=\"string\">'App'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mul</span> (<span class=\"params\">x , y</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; client, mul &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>那么别的组件就要这样导入它：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;client, mul&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Util.js'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>还可以打包导入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> U <span class=\"keyword\">from</span> <span class=\"string\">'./Util.js'</span></span><br><span class=\"line\">U.client <span class=\"comment\">//使用U</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用的 <code>export default</code> 命令， 用于输出默认的方法， 变量或类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入的时候就更方便， 可以随意指定名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Tab <span class=\"keyword\">from</span> <span class=\"string\">'tab'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参考文档：<a href=\"#\">export&amp;import</a></p>\n</li>\n</ul>\n<h2 id=\"7-对象的拓展运算符-“…”\"><a href=\"#7-对象的拓展运算符-“…”\" class=\"headerlink\" title=\"7. 对象的拓展运算符: “…”\"></a>7. 对象的拓展运算符: “…”</h2><p>拓展运算符在Redux的示例Demo中很常见。</p>\n<ul>\n<li><p>拓展运算符可以用来合并两个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//state = &#123; name: 'y' &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">name</span>: <span class=\"string\">'x'</span>, <span class=\"attr\">id</span>: <span class=\"number\">101</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">//返回 &#123; name: 'x', id: 101 &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码有两个过程:1.去除state对象的所有可比案例属性， 拷贝到当前对象上；</p>\n<pre><code>2.如果自定义的属性在后面， 拓展运算符的同名属性会被覆盖。\n</code></pre></blockquote>\n</li>\n<li><p>这种用法等同于 Object.assign:</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//assign字面意思为分配</span></span><br><span class=\"line\">\t<span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'x'</span>, <span class=\"attr\">id</span>:<span class=\"number\">101</span>&#125;)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- 使用拓展运算符需要安装`</span>transform-object-rest-spread<span class=\"string\">`插件， 然后在babel中配置。 配置如下：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\">test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">query:&#123;</span><br><span class=\"line\">    presets: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>],</span><br><span class=\"line\">    plugins: [<span class=\"string\">\"transform-object-rest-spread\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考文档：<a href=\"#\">ES6拓展运算符</a></li>\n</ul>\n<hr>\n<p>The End.</p>\n","site":{"data":{}},"excerpt":"<hr>\n<p>在学习React过程中，注意到无论是GitHub上的Demo还是React相关文档，ES6语法都有大量使用。如果不了解其中一些语法，学习曲线就会越来越陡峭。但是要系统学习ES6，又会消耗大量时间。</p>\n<p>在这篇博客里，我把一些常用的ES6语法做一些总结，以更快更好地理解React中的概念和用法。</p>","more":"<p>在线练习ES6的工具：<a href=\"http://www.es6fiddle.net\" target=\"_blank\" rel=\"noopener\">ES6 fiddle</a></p>\n<hr>\n<h2 id=\"1-let-amp-const\"><a href=\"#1-let-amp-const\" class=\"headerlink\" title=\"1. let &amp; const\"></a>1. let &amp; const</h2><p>ES6的两个新关键字，主要是引入了块级作用域，不存在变量提升，不允许重复定义等特性，减少了ES5中很容易踩到的地雷。const用来定义常量，不允许后期修改赋值。<br>参考文档：<a href=\"http://es6.ruanyifeng.com/#docs/let\" target=\"_blank\" rel=\"noopener\">阮一峰的博客</a></p>\n<h2 id=\"2-解构赋值\"><a href=\"#2-解构赋值\" class=\"headerlink\" title=\"2.解构赋值\"></a>2.解构赋值</h2><ul>\n<li>常规用法：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;x&#125; = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; PropTypes &#125; = React</span><br></pre></td></tr></table></figure>\n<p>这里是对象的解构赋值，等同于<code>let PropTypes = React.PropTypes</code></p>\n<blockquote>\n<p>这里其实包含了两步：</p>\n<ol>\n<li>声明变量PropTypes;</li>\n<li>给其赋值为React.PropTypes。</li>\n</ol>\n</blockquote>\n<p>所以等效于这样的写法：</p>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let PropTypes</span><br><span class=\"line\">&#123; PropTypes &#125; = React;</span><br></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>可以同时写多个变量：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; PropTypes, Component &#125; = React;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果想定义的变量名和属性名不一样：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明x1变量，赋值为1. </span></span><br><span class=\"line\"><span class=\"comment\">//x是模式，不是变量也不会被赋值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">x</span> : x1 &#125; = &#123; <span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>:<span class=\"number\">2</span> &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>对象， 数组， 字符串等都有解构赋值的用法。</strong></p>\n</li>\n<li><p>参考文档：<a href=\"http://es6.ruanyifeng.com/#docs/destructuring\" target=\"_blank\" rel=\"noopener\">解构赋值</a></p>\n</li>\n</ul>\n<h2 id=\"3-对象的拓展\"><a href=\"#3-对象的拓展\" class=\"headerlink\" title=\"3.对象的拓展\"></a>3.对象的拓展</h2><h3 id=\"3-1-属性的简洁表达式\"><a href=\"#3-1-属性的简洁表达式\" class=\"headerlink\" title=\"3.1 属性的简洁表达式\"></a>3.1 属性的简洁表达式</h3><pre><code>let x = &apos;123&apos;;\n//等同于：let obj = { x: x, y: &apos;33}\nlet obj = {x, y: &apos;33&apos; };\n</code></pre><h3 id=\"3-2-方法名的简写\"><a href=\"#3-2-方法名的简写\" class=\"headerlink\" title=\"3.2 方法名的简写\"></a>3.2 方法名的简写</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let User = &#123;</span><br><span class=\"line\"> method ()&#123;   //等同于method: function()&#123;...&#125;</span><br><span class=\"line\">  //...</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3属性名表达式\"><a href=\"#3-3属性名表达式\" class=\"headerlink\" title=\"3.3属性名表达式\"></a>3.3属性名表达式</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> key = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t    [key] : <span class=\"string\">'1010'</span>, <span class=\"comment\">//注意方括号</span></span><br><span class=\"line\">\t    [<span class=\"string\">'use'</span> + <span class=\"string\">'name'</span> ]: <span class=\"string\">'x'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把表达式写在 [] 中， 表达式的值作为字段名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    id : <span class=\"string\">'1010'</span>,</span><br><span class=\"line\">    usename: <span class=\"string\">'x'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：属性名表达式与属性名简写不能同时使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"keyword\">let</span> key = <span class=\"string\">'id'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> id = <span class=\"string\">'1010'</span>;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> obj =&#123;</span><br><span class=\"line\">    [key]</span><br><span class=\"line\">&#125;  <span class=\"comment\">//Error!</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-ES6-Class语法\"><a href=\"#4-ES6-Class语法\" class=\"headerlink\" title=\"4. ES6 Class语法\"></a>4. ES6 Class语法</h2><p>使用ES6语法定义一个React组件：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(props)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(props);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">count</span>: props.initialCount&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.tick = <span class=\"keyword\">this</span>.tick.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttick()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">count</span>: <span class=\"keyword\">this</span>.state.count + <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trender()&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (</span><br><span class=\"line\">\t\t\t\t&lt;div onClick = &#123;<span class=\"keyword\">this</span>.tick&#125;</span><br><span class=\"line\">\t\t\t\t&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\t\t);</span></span><br><span class=\"line\"><span class=\"regexp\">\t&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Counter.propTypes = &#123; initialCount : Reart.PropTypes.number &#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">Counter.defaultProps = &#123; initialCount: 0 &#125;;</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong>：</p>\n<ol>\n<li>ES6的继承语法： extends关键字；</li>\n<li>各个方法使用了方法简写，如tick(){}和render(){}, 方法之间不加 “,”；</li>\n<li><code>constructor</code> 是构造函数， 可以替代getInitialState ； </li>\n<li>构造函数内需要调用父类的构造函数：<code>super(props)</code> , 否则就会报错。因为子类没有自身的<code>this</code> 对象，需要从父类继承。</li>\n<li><p><code>this.tick = this.tick.bind(this)</code>中， 使用<strong>bind</strong>来绑定执行作用域（使用React.createClass是自动绑定的), 也可以在render中监听事件的位置，使用bind(this):</p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;div onClick= &#123;<span class=\"keyword\">this</span>.tick.bind(<span class=\"keyword\">this</span>)&#125;&gt;</span><br><span class=\"line\">\t      Clicks: &#123;<span class=\"keyword\">this</span>.state.count&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t```    </span></span><br><span class=\"line\"><span class=\"regexp\">**官方建议统一写在constructor中，这样子该方法就只需绑定一次。**</span></span><br><span class=\"line\"><span class=\"regexp\">6. 除了使用bind, 还可以使用箭头函数：</span></span><br><span class=\"line\"><span class=\"regexp\">``` jsx</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;div onClick = &#123;() =&gt; this.tick()&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">\t\tClicks: &#123;this.state.count&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">\t&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>箭头函数的特性：<br>函数体内的this就是定义是的对象， 而非调用时所在的对象。箭头函数的this指向是固定的， 而普通函数是可变的。</p>\n</blockquote>\n<h2 id=\"5-箭头函数\"><a href=\"#5-箭头函数\" class=\"headerlink\" title=\"5. 箭头函数\"></a>5. 箭头函数</h2><ul>\n<li><p>ES6允许使用 <code>=&gt;</code> 来定义函数：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v+<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">v</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果有多个参数：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"keyword\">let</span> f = <span class=\"function\">(<span class=\"params\">x ,y</span>) =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- 函数有多条语句， 用大括号包装：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> f = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tx = x + <span class=\"number\">11</span>;</span><br><span class=\"line\">\t\ty = y + <span class=\"number\">33</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>箭头函数的this指向能保持不变， 不是因为内部有绑定机制， 而是因为，<strong>箭头函数没有自己的this， 导致代码内的this就是外层代码块的this。</strong></p>\n</blockquote>\n<ul>\n<li>参考文档： <a href=\"#\">箭头函数</a></li>\n</ul>\n<h2 id=\"6-export-amp-import\"><a href=\"#6-export-amp-import\" class=\"headerlink\" title=\"6. export &amp; import\"></a>6. export &amp; import</h2><ul>\n<li>export用于输出模块对外的接口， import用于导入其他模块提供的功能。 </li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> client = <span class=\"string\">\"App\"</span>\t<span class=\"comment\">//输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mul</span>(<span class=\"params\">x, y</span>)</span>&#123;\t<span class=\"comment\">//输出函数</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Toast</span>()</span>&#123;&#125;\t\t<span class=\"comment\">//输出类</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>也可以统一输出：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名： Util.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> client = <span class=\"string\">'App'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mul</span> (<span class=\"params\">x , y</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; client, mul &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>那么别的组件就要这样导入它：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;client, mul&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./Util.js'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>还可以打包导入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> U <span class=\"keyword\">from</span> <span class=\"string\">'./Util.js'</span></span><br><span class=\"line\">U.client <span class=\"comment\">//使用U</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用的 <code>export default</code> 命令， 用于输出默认的方法， 变量或类：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> React.createClass(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>引入的时候就更方便， 可以随意指定名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Tab <span class=\"keyword\">from</span> <span class=\"string\">'tab'</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参考文档：<a href=\"#\">export&amp;import</a></p>\n</li>\n</ul>\n<h2 id=\"7-对象的拓展运算符-“…”\"><a href=\"#7-对象的拓展运算符-“…”\" class=\"headerlink\" title=\"7. 对象的拓展运算符: “…”\"></a>7. 对象的拓展运算符: “…”</h2><p>拓展运算符在Redux的示例Demo中很常见。</p>\n<ul>\n<li><p>拓展运算符可以用来合并两个对象：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//state = &#123; name: 'y' &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> &#123;...state, <span class=\"attr\">name</span>: <span class=\"string\">'x'</span>, <span class=\"attr\">id</span>: <span class=\"number\">101</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">//返回 &#123; name: 'x', id: 101 &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码有两个过程:1.去除state对象的所有可比案例属性， 拷贝到当前对象上；</p>\n<pre><code>2.如果自定义的属性在后面， 拓展运算符的同名属性会被覆盖。\n</code></pre></blockquote>\n</li>\n<li><p>这种用法等同于 Object.assign:</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"comment\">//assign字面意思为分配</span></span><br><span class=\"line\">\t<span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'x'</span>, <span class=\"attr\">id</span>:<span class=\"number\">101</span>&#125;)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">- 使用拓展运算符需要安装`</span>transform-object-rest-spread<span class=\"string\">`插件， 然后在babel中配置。 配置如下：</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span> js</span><br><span class=\"line\">test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">query:&#123;</span><br><span class=\"line\">    presets: [<span class=\"string\">'react'</span>, <span class=\"string\">'es2015'</span>],</span><br><span class=\"line\">    plugins: [<span class=\"string\">\"transform-object-rest-spread\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考文档：<a href=\"#\">ES6拓展运算符</a></li>\n</ul>\n<hr>\n<p>The End.</p>"},{"title":"更好用的border-box","date":"2017-10-22T16:00:00.000Z","_content":"\n英文原文来自CSS-tricks: [Inheriting box-sizing Probably Slightly Better Best-Practice](https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/)\n\n我是把`box-sizing`重置为`border-box`的忠实粉丝，甚至于我们有一个“年度特别日子”。但是这里有一个细小的调整，而且看起来是个不错的思路。\n<!--more-->\n这是微调的版本：\n``` css\n    html{\n\t    box-sizing: border-box;\n\t}\n\t*, *:before, *:after{\n\t\tbox-sizing:inherit;\n\t}\t\n```\n\n感谢[Job Neal的继承思想](http://blog.teamtreehouse.com/box-sizing-secret-simple-css-layouts#comment-50223)，他说：\n> This will give you the same result ,and make it easier to change the box-sizing in plugins or other components that leverage other behavior.\n> 这会给你同样的结果，而且使得在插件中或其他组件中更容易改变 box-sizing 的值，而不会影响别的表现。\n\n进一步解释，打个比方，你有一个组件，它本被设计为默认的`box-sizing` 为 `content-box`. 你只想要使用，又不搞砸它。\n\n``` css\n\t.component{\n\t\t/*旨在以默认的box-sizing工作*/\n\t\t/*在你的页面中， 你可以把它重置为normal */\n\t\tbox-sizing: content-box;\n\t}\t\n```\n\n但问题是，这样实际上并不重置整个组件。也许在组件内部有一个`<header>`，期望它在一个`content-box`中。如果这个选择器在你的CSS中，老办法就是做一个 box-sizing **reset**...\n\n```css\n*{\n\tbox-sizing: border-box;\n}\n```\n\n然后这个header不是你想要的`content-box`, 而是 `border-box`. 就像：\n```html\n<div class= \"component\"> <!-- I'm content box -->\n\t<header> <!-- I'm border-box still>\n\t</header>\n</div>\t\n```\n为了更简单直观地做到**reset**，你可以使用文章顶部的继承的代码段，继承的值就会被保留。\n``` css\n    html{\n\t    box-sizing: border-box;\n\t}\n\t*, *:before, *:after{\n\t\tbox-sizing:inherit;\n\t}\t\n```\n\n---\n这并不是一个很庞大的东西。你可能已经在使用 box-sizing reset 的老办法，并且从没踩到这个坑。但是，只要我们推广一个“最佳实践”风格的片段，我们也可以慢慢把它变成最好的。\n","source":"_posts/2017-10-23 更好用的border-box.md","raw":"---\ntitle: 更好用的border-box\ndate: 2017-10-23\ncategories: 技术\ntags: [前端,CSS]\n---\n\n英文原文来自CSS-tricks: [Inheriting box-sizing Probably Slightly Better Best-Practice](https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/)\n\n我是把`box-sizing`重置为`border-box`的忠实粉丝，甚至于我们有一个“年度特别日子”。但是这里有一个细小的调整，而且看起来是个不错的思路。\n<!--more-->\n这是微调的版本：\n``` css\n    html{\n\t    box-sizing: border-box;\n\t}\n\t*, *:before, *:after{\n\t\tbox-sizing:inherit;\n\t}\t\n```\n\n感谢[Job Neal的继承思想](http://blog.teamtreehouse.com/box-sizing-secret-simple-css-layouts#comment-50223)，他说：\n> This will give you the same result ,and make it easier to change the box-sizing in plugins or other components that leverage other behavior.\n> 这会给你同样的结果，而且使得在插件中或其他组件中更容易改变 box-sizing 的值，而不会影响别的表现。\n\n进一步解释，打个比方，你有一个组件，它本被设计为默认的`box-sizing` 为 `content-box`. 你只想要使用，又不搞砸它。\n\n``` css\n\t.component{\n\t\t/*旨在以默认的box-sizing工作*/\n\t\t/*在你的页面中， 你可以把它重置为normal */\n\t\tbox-sizing: content-box;\n\t}\t\n```\n\n但问题是，这样实际上并不重置整个组件。也许在组件内部有一个`<header>`，期望它在一个`content-box`中。如果这个选择器在你的CSS中，老办法就是做一个 box-sizing **reset**...\n\n```css\n*{\n\tbox-sizing: border-box;\n}\n```\n\n然后这个header不是你想要的`content-box`, 而是 `border-box`. 就像：\n```html\n<div class= \"component\"> <!-- I'm content box -->\n\t<header> <!-- I'm border-box still>\n\t</header>\n</div>\t\n```\n为了更简单直观地做到**reset**，你可以使用文章顶部的继承的代码段，继承的值就会被保留。\n``` css\n    html{\n\t    box-sizing: border-box;\n\t}\n\t*, *:before, *:after{\n\t\tbox-sizing:inherit;\n\t}\t\n```\n\n---\n这并不是一个很庞大的东西。你可能已经在使用 box-sizing reset 的老办法，并且从没踩到这个坑。但是，只要我们推广一个“最佳实践”风格的片段，我们也可以慢慢把它变成最好的。\n","slug":"2017-10-23 更好用的border-box","published":1,"updated":"2019-02-20T13:32:22.931Z","_id":"cjstph3xq000u88zbwmu73g4g","comments":1,"layout":"post","photos":[],"link":"","content":"<p>英文原文来自CSS-tricks: <a href=\"https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\" target=\"_blank\" rel=\"noopener\">Inheriting box-sizing Probably Slightly Better Best-Practice</a></p>\n<p>我是把<code>box-sizing</code>重置为<code>border-box</code>的忠实粉丝，甚至于我们有一个“年度特别日子”。但是这里有一个细小的调整，而且看起来是个不错的思路。<br><a id=\"more\"></a><br>这是微调的版本：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>:inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>感谢<a href=\"http://blog.teamtreehouse.com/box-sizing-secret-simple-css-layouts#comment-50223\" target=\"_blank\" rel=\"noopener\">Job Neal的继承思想</a>，他说：</p>\n<blockquote>\n<p>This will give you the same result ,and make it easier to change the box-sizing in plugins or other components that leverage other behavior.<br>这会给你同样的结果，而且使得在插件中或其他组件中更容易改变 box-sizing 的值，而不会影响别的表现。</p>\n</blockquote>\n<p>进一步解释，打个比方，你有一个组件，它本被设计为默认的<code>box-sizing</code> 为 <code>content-box</code>. 你只想要使用，又不搞砸它。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.component</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*旨在以默认的box-sizing工作*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*在你的页面中， 你可以把它重置为normal */</span></span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但问题是，这样实际上并不重置整个组件。也许在组件内部有一个<code>&lt;header&gt;</code>，期望它在一个<code>content-box</code>中。如果这个选择器在你的CSS中，老办法就是做一个 box-sizing <strong>reset</strong>…</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后这个header不是你想要的<code>content-box</code>, 而是 <code>border-box</code>. 就像：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">\"component\"</span>&gt;</span> <span class=\"comment\">&lt;!-- I'm content box --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span> <span class=\"comment\">&lt;!-- I'm border-box still&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;/header&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为了更简单直观地做到<strong>reset</strong>，你可以使用文章顶部的继承的代码段，继承的值就会被保留。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>:inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>这并不是一个很庞大的东西。你可能已经在使用 box-sizing reset 的老办法，并且从没踩到这个坑。但是，只要我们推广一个“最佳实践”风格的片段，我们也可以慢慢把它变成最好的。</p>\n","site":{"data":{}},"excerpt":"<p>英文原文来自CSS-tricks: <a href=\"https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\" target=\"_blank\" rel=\"noopener\">Inheriting box-sizing Probably Slightly Better Best-Practice</a></p>\n<p>我是把<code>box-sizing</code>重置为<code>border-box</code>的忠实粉丝，甚至于我们有一个“年度特别日子”。但是这里有一个细小的调整，而且看起来是个不错的思路。<br>","more":"<br>这是微调的版本：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>:inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>感谢<a href=\"http://blog.teamtreehouse.com/box-sizing-secret-simple-css-layouts#comment-50223\" target=\"_blank\" rel=\"noopener\">Job Neal的继承思想</a>，他说：</p>\n<blockquote>\n<p>This will give you the same result ,and make it easier to change the box-sizing in plugins or other components that leverage other behavior.<br>这会给你同样的结果，而且使得在插件中或其他组件中更容易改变 box-sizing 的值，而不会影响别的表现。</p>\n</blockquote>\n<p>进一步解释，打个比方，你有一个组件，它本被设计为默认的<code>box-sizing</code> 为 <code>content-box</code>. 你只想要使用，又不搞砸它。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.component</span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">/*旨在以默认的box-sizing工作*/</span></span><br><span class=\"line\">\t<span class=\"comment\">/*在你的页面中， 你可以把它重置为normal */</span></span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>: content-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但问题是，这样实际上并不重置整个组件。也许在组件内部有一个<code>&lt;header&gt;</code>，期望它在一个<code>content-box</code>中。如果这个选择器在你的CSS中，老办法就是做一个 box-sizing <strong>reset</strong>…</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后这个header不是你想要的<code>content-box</code>, 而是 <code>border-box</code>. 就像：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>= <span class=\"string\">\"component\"</span>&gt;</span> <span class=\"comment\">&lt;!-- I'm content box --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span> <span class=\"comment\">&lt;!-- I'm border-box still&gt;</span></span><br><span class=\"line\"><span class=\"comment\">\t&lt;/header&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>为了更简单直观地做到<strong>reset</strong>，你可以使用文章顶部的继承的代码段，继承的值就会被保留。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">box-sizing</span>:inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>这并不是一个很庞大的东西。你可能已经在使用 box-sizing reset 的老办法，并且从没踩到这个坑。但是，只要我们推广一个“最佳实践”风格的片段，我们也可以慢慢把它变成最好的。</p>"},{"title":"2017-09-05-翻译了第一篇英文文档","date":"2017-09-05T12:10:33.000Z","_content":"\n9月4日翻译了MDN上的一篇英文文档，这是第一次尝试翻译，尝到了成就感.\n<!--more-->\n\nMDN是Web开发者的参考文档的官方网站——[MDN Web 文档](https://developer.mozilla.org/zh-CN/)，有大量开发者不断贡献和更新文档和教程。\n## 做了什么\n最近，在对JavaScript中this关键字的细节整理中，查阅MDN的中文文档，有些语句翻译的不错，但是还是存在部分疏漏。\n\n仔细一番MDN的一些中文文档，少数文档的部分语句有明显的语义和内容上的毛病。\n\n索性去看英文文档，豁然开朗，遂决定更新中文翻译文档。\n\n在9月4日翻译了MDN上JavaScript的this关键字的英文文档：[原版英文文档](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this)。\n\n1. 保留了部分原有翻译，纠正了大部分语义措辞漏洞，并更新了关于箭头函数的this指向。\n2. 部分语句参考了谷歌翻译，我承认谷歌翻译真的很NB。\n\n## 有什么总结\n\n1. 要彻底弄懂this的机制，首先你要准备好面向对象的基础，理解OOP的重要概念：\n - [JavaScript面向对象编程](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript)\n2. 然后记住，this是一个变量，它是一个指针，指向一个对象。再看我的文档:\n - [this关键字](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)\n3. 在过程中看不懂时，及时查阅相关API的文档:\n - [箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n - [Function.prototype.call()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n - [Function.prototype.apply()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n - [Function.prototype.bind()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n\n\n## 写在结尾\n在英文文档末尾的参考链接，有一篇写得非常精彩的博客：\n[Gentle-explanation-of-this-in-JavaScript, 温和解释JS中的this](https://rainsoft.io/gentle-explanation-of-this-in-javascript/)\n\n计划在不久将来，我会挤出时间认真翻译这篇英文博客。\n\nThe end.\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMTM3NTE2MTMyNl19\n-->","source":"_posts/2017-09-05 第一次翻译MDN文档.md","raw":"---\ntitle: 2017-09-05-翻译了第一篇英文文档\ndate: 2017-09-05 20:10:33\ntags: 日志\ncategories: 日志\n---\n\n9月4日翻译了MDN上的一篇英文文档，这是第一次尝试翻译，尝到了成就感.\n<!--more-->\n\nMDN是Web开发者的参考文档的官方网站——[MDN Web 文档](https://developer.mozilla.org/zh-CN/)，有大量开发者不断贡献和更新文档和教程。\n## 做了什么\n最近，在对JavaScript中this关键字的细节整理中，查阅MDN的中文文档，有些语句翻译的不错，但是还是存在部分疏漏。\n\n仔细一番MDN的一些中文文档，少数文档的部分语句有明显的语义和内容上的毛病。\n\n索性去看英文文档，豁然开朗，遂决定更新中文翻译文档。\n\n在9月4日翻译了MDN上JavaScript的this关键字的英文文档：[原版英文文档](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this)。\n\n1. 保留了部分原有翻译，纠正了大部分语义措辞漏洞，并更新了关于箭头函数的this指向。\n2. 部分语句参考了谷歌翻译，我承认谷歌翻译真的很NB。\n\n## 有什么总结\n\n1. 要彻底弄懂this的机制，首先你要准备好面向对象的基础，理解OOP的重要概念：\n - [JavaScript面向对象编程](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript)\n2. 然后记住，this是一个变量，它是一个指针，指向一个对象。再看我的文档:\n - [this关键字](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)\n3. 在过程中看不懂时，及时查阅相关API的文档:\n - [箭头函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n - [Function.prototype.call()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call)\n - [Function.prototype.apply()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply)\n - [Function.prototype.bind()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)\n\n\n## 写在结尾\n在英文文档末尾的参考链接，有一篇写得非常精彩的博客：\n[Gentle-explanation-of-this-in-JavaScript, 温和解释JS中的this](https://rainsoft.io/gentle-explanation-of-this-in-javascript/)\n\n计划在不久将来，我会挤出时间认真翻译这篇英文博客。\n\nThe end.\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMTM3NTE2MTMyNl19\n-->","slug":"2017-09-05 第一次翻译MDN文档","published":1,"updated":"2019-02-21T03:07:56.282Z","_id":"cjstph3xt000v88zbql7cq5sv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>9月4日翻译了MDN上的一篇英文文档，这是第一次尝试翻译，尝到了成就感.<br><a id=\"more\"></a></p>\n<p>MDN是Web开发者的参考文档的官方网站——<a href=\"https://developer.mozilla.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a>，有大量开发者不断贡献和更新文档和教程。</p>\n<h2 id=\"做了什么\"><a href=\"#做了什么\" class=\"headerlink\" title=\"做了什么\"></a>做了什么</h2><p>最近，在对JavaScript中this关键字的细节整理中，查阅MDN的中文文档，有些语句翻译的不错，但是还是存在部分疏漏。</p>\n<p>仔细一番MDN的一些中文文档，少数文档的部分语句有明显的语义和内容上的毛病。</p>\n<p>索性去看英文文档，豁然开朗，遂决定更新中文翻译文档。</p>\n<p>在9月4日翻译了MDN上JavaScript的this关键字的英文文档：<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">原版英文文档</a>。</p>\n<ol>\n<li>保留了部分原有翻译，纠正了大部分语义措辞漏洞，并更新了关于箭头函数的this指向。</li>\n<li>部分语句参考了谷歌翻译，我承认谷歌翻译真的很NB。</li>\n</ol>\n<h2 id=\"有什么总结\"><a href=\"#有什么总结\" class=\"headerlink\" title=\"有什么总结\"></a>有什么总结</h2><ol>\n<li>要彻底弄懂this的机制，首先你要准备好面向对象的基础，理解OOP的重要概念：<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript面向对象编程</a></li>\n</ul>\n</li>\n<li>然后记住，this是一个变量，它是一个指针，指向一个对象。再看我的文档:<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">this关键字</a></li>\n</ul>\n</li>\n<li>在过程中看不懂时，及时查阅相关API的文档:<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">Function.prototype.call()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">Function.prototype.apply()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">Function.prototype.bind()</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"写在结尾\"><a href=\"#写在结尾\" class=\"headerlink\" title=\"写在结尾\"></a>写在结尾</h2><p>在英文文档末尾的参考链接，有一篇写得非常精彩的博客：<br><a href=\"https://rainsoft.io/gentle-explanation-of-this-in-javascript/\" target=\"_blank\" rel=\"noopener\">Gentle-explanation-of-this-in-JavaScript, 温和解释JS中的this</a></p>\n<p>计划在不久将来，我会挤出时间认真翻译这篇英文博客。</p>\n<p>The end.<br><!--stackedit_data:\neyJoaXN0b3J5IjpbMTM3NTE2MTMyNl19\n--></p>\n","site":{"data":{}},"excerpt":"<p>9月4日翻译了MDN上的一篇英文文档，这是第一次尝试翻译，尝到了成就感.<br>","more":"</p>\n<p>MDN是Web开发者的参考文档的官方网站——<a href=\"https://developer.mozilla.org/zh-CN/\" target=\"_blank\" rel=\"noopener\">MDN Web 文档</a>，有大量开发者不断贡献和更新文档和教程。</p>\n<h2 id=\"做了什么\"><a href=\"#做了什么\" class=\"headerlink\" title=\"做了什么\"></a>做了什么</h2><p>最近，在对JavaScript中this关键字的细节整理中，查阅MDN的中文文档，有些语句翻译的不错，但是还是存在部分疏漏。</p>\n<p>仔细一番MDN的一些中文文档，少数文档的部分语句有明显的语义和内容上的毛病。</p>\n<p>索性去看英文文档，豁然开朗，遂决定更新中文翻译文档。</p>\n<p>在9月4日翻译了MDN上JavaScript的this关键字的英文文档：<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">原版英文文档</a>。</p>\n<ol>\n<li>保留了部分原有翻译，纠正了大部分语义措辞漏洞，并更新了关于箭头函数的this指向。</li>\n<li>部分语句参考了谷歌翻译，我承认谷歌翻译真的很NB。</li>\n</ol>\n<h2 id=\"有什么总结\"><a href=\"#有什么总结\" class=\"headerlink\" title=\"有什么总结\"></a>有什么总结</h2><ol>\n<li>要彻底弄懂this的机制，首先你要准备好面向对象的基础，理解OOP的重要概念：<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript\" target=\"_blank\" rel=\"noopener\">JavaScript面向对象编程</a></li>\n</ul>\n</li>\n<li>然后记住，this是一个变量，它是一个指针，指向一个对象。再看我的文档:<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener\">this关键字</a></li>\n</ul>\n</li>\n<li>在过程中看不懂时，及时查阅相关API的文档:<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">Function.prototype.call()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" target=\"_blank\" rel=\"noopener\">Function.prototype.apply()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" target=\"_blank\" rel=\"noopener\">Function.prototype.bind()</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"写在结尾\"><a href=\"#写在结尾\" class=\"headerlink\" title=\"写在结尾\"></a>写在结尾</h2><p>在英文文档末尾的参考链接，有一篇写得非常精彩的博客：<br><a href=\"https://rainsoft.io/gentle-explanation-of-this-in-javascript/\" target=\"_blank\" rel=\"noopener\">Gentle-explanation-of-this-in-JavaScript, 温和解释JS中的this</a></p>\n<p>计划在不久将来，我会挤出时间认真翻译这篇英文博客。</p>\n<p>The end.<br><!--stackedit_data:\neyJoaXN0b3J5IjpbMTM3NTE2MTMyNl19\n--></p>"},{"title":"Mac安装Sass万能方法","date":"2017-06-06T16:00:00.000Z","_content":"\n\n# Mac OSX系统下使用RVM修复安装Sass的错误\n\n这个万金油方法能解决大多数的gem安装问题。\n\n<!--more-->\n如果你使用通用的` gem install sass` 出现错误：\n\n```\nERROR:  While executing gem ... (Errno::EACCES)\n    Permission denied - /var/lib/gems\n```\n那么这篇文章也许能解决你的问题。\n    \n这个错误说明Ruby的权限有问题，要解决这个权限问题很麻烦，不过有一个方法可以跳过这个坑：\n\n**使用RVM(Ruby Version Manager)安装一个特定版本的Ruby，再安装sass。**\n\n\n\n> 以下步骤都在Terminal(终端)中完成!\n\n## 1. 安装Homebrew\n\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n## 2. 安装gpg\n安装RVM之前需要gpg，先别管它是什么。\n\n它是 **mpapis public key** 公钥用于验证安装包以确保安全。\n\n如果你想知道它到底是什么，点击这里[GNU-wiki百科](https://en.wikipedia.org/wiki/GNU_Privacy_Guard)。\n\n    brew install gnupg\n## 3. 安装gpg密钥\n\n    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n\n\n## 4. 安装RVM\n\n    \\curl -sSL https://get.rvm.io | bash -s stable --ruby\n\n## 5. 开始使用RVM\n\n### 1. 查看已有Ruby版本:\n\n```\n    rvm list\n```\n> 如果出现警告，如：\n> “Warning! PATH is not properly set up...” ，\n> 这是未添加RVM环境变量，请[参考解决方案](https://stackoverflow.com/questions/18276701/getting-warning-path-is-not-properly-set-up-when-doing-rvm-use-2-0-0-defaul).\n> 或者你直接Copy下面的指令：\n> \n```\n    [[ -s \"$HOME/.rvm/scripts/rvm\" ]] && source \"$HOME/.rvm/scripts/rvm\"\n```\n\n### 2. 检查Ruby版本列表：\n**不必输入下面的代码，这是输入`rvm list`后的结果！**\n```\nrvm rubies\n\n=* ruby-2.2.0 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n### 3. 安装特定版本Ruby：\n\n    rvm use ruby --default\n\n检查ruby位置：\n\n    which ruby\n如果显示了一行目录，则表示安装成功。\n\n    ruby -v\n\n## 6. 安装sass\n\n    gem install sass\n    \n    \n## 7. 安装完成！\n\n> 参考文章：[Ruby on Mac OSX with RVM](http://usabilityetc.com/articles/ruby-on-mac-os-x-with-rvm/)\n\n","source":"_posts/2017-06-07 Mac安装Sass万能方法.md","raw":"---\ntitle: Mac安装Sass万能方法\ncategories: 笔记\ndate: 2017-06-07 \ntags: 指南 笔记 Mac\n---\n\n\n# Mac OSX系统下使用RVM修复安装Sass的错误\n\n这个万金油方法能解决大多数的gem安装问题。\n\n<!--more-->\n如果你使用通用的` gem install sass` 出现错误：\n\n```\nERROR:  While executing gem ... (Errno::EACCES)\n    Permission denied - /var/lib/gems\n```\n那么这篇文章也许能解决你的问题。\n    \n这个错误说明Ruby的权限有问题，要解决这个权限问题很麻烦，不过有一个方法可以跳过这个坑：\n\n**使用RVM(Ruby Version Manager)安装一个特定版本的Ruby，再安装sass。**\n\n\n\n> 以下步骤都在Terminal(终端)中完成!\n\n## 1. 安装Homebrew\n\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\n\n## 2. 安装gpg\n安装RVM之前需要gpg，先别管它是什么。\n\n它是 **mpapis public key** 公钥用于验证安装包以确保安全。\n\n如果你想知道它到底是什么，点击这里[GNU-wiki百科](https://en.wikipedia.org/wiki/GNU_Privacy_Guard)。\n\n    brew install gnupg\n## 3. 安装gpg密钥\n\n    gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n\n\n## 4. 安装RVM\n\n    \\curl -sSL https://get.rvm.io | bash -s stable --ruby\n\n## 5. 开始使用RVM\n\n### 1. 查看已有Ruby版本:\n\n```\n    rvm list\n```\n> 如果出现警告，如：\n> “Warning! PATH is not properly set up...” ，\n> 这是未添加RVM环境变量，请[参考解决方案](https://stackoverflow.com/questions/18276701/getting-warning-path-is-not-properly-set-up-when-doing-rvm-use-2-0-0-defaul).\n> 或者你直接Copy下面的指令：\n> \n```\n    [[ -s \"$HOME/.rvm/scripts/rvm\" ]] && source \"$HOME/.rvm/scripts/rvm\"\n```\n\n### 2. 检查Ruby版本列表：\n**不必输入下面的代码，这是输入`rvm list`后的结果！**\n```\nrvm rubies\n\n=* ruby-2.2.0 [ x86_64 ]\n\n# => - current\n# =* - current && default\n#  * - default\n```\n\n### 3. 安装特定版本Ruby：\n\n    rvm use ruby --default\n\n检查ruby位置：\n\n    which ruby\n如果显示了一行目录，则表示安装成功。\n\n    ruby -v\n\n## 6. 安装sass\n\n    gem install sass\n    \n    \n## 7. 安装完成！\n\n> 参考文章：[Ruby on Mac OSX with RVM](http://usabilityetc.com/articles/ruby-on-mac-os-x-with-rvm/)\n\n","slug":"2017-06-07 Mac安装Sass万能方法","published":1,"updated":"2019-02-20T13:32:22.930Z","_id":"cjstph3xz000z88zbwysjfn6m","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Mac-OSX系统下使用RVM修复安装Sass的错误\"><a href=\"#Mac-OSX系统下使用RVM修复安装Sass的错误\" class=\"headerlink\" title=\"Mac OSX系统下使用RVM修复安装Sass的错误\"></a>Mac OSX系统下使用RVM修复安装Sass的错误</h1><p>这个万金油方法能解决大多数的gem安装问题。</p>\n<a id=\"more\"></a>\n<p>如果你使用通用的<code>gem install sass</code> 出现错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  While executing gem ... (Errno::EACCES)</span><br><span class=\"line\">    Permission denied - /var/lib/gems</span><br></pre></td></tr></table></figure>\n<p>那么这篇文章也许能解决你的问题。</p>\n<p>这个错误说明Ruby的权限有问题，要解决这个权限问题很麻烦，不过有一个方法可以跳过这个坑：</p>\n<p><strong>使用RVM(Ruby Version Manager)安装一个特定版本的Ruby，再安装sass。</strong></p>\n<blockquote>\n<p>以下步骤都在Terminal(终端)中完成!</p>\n</blockquote>\n<h2 id=\"1-安装Homebrew\"><a href=\"#1-安装Homebrew\" class=\"headerlink\" title=\"1. 安装Homebrew\"></a>1. 安装Homebrew</h2><pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n</code></pre><h2 id=\"2-安装gpg\"><a href=\"#2-安装gpg\" class=\"headerlink\" title=\"2. 安装gpg\"></a>2. 安装gpg</h2><p>安装RVM之前需要gpg，先别管它是什么。</p>\n<p>它是 <strong>mpapis public key</strong> 公钥用于验证安装包以确保安全。</p>\n<p>如果你想知道它到底是什么，点击这里<a href=\"https://en.wikipedia.org/wiki/GNU_Privacy_Guard\" target=\"_blank\" rel=\"noopener\">GNU-wiki百科</a>。</p>\n<pre><code>brew install gnupg\n</code></pre><h2 id=\"3-安装gpg密钥\"><a href=\"#3-安装gpg密钥\" class=\"headerlink\" title=\"3. 安装gpg密钥\"></a>3. 安装gpg密钥</h2><pre><code>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n</code></pre><h2 id=\"4-安装RVM\"><a href=\"#4-安装RVM\" class=\"headerlink\" title=\"4. 安装RVM\"></a>4. 安装RVM</h2><pre><code>\\curl -sSL https://get.rvm.io | bash -s stable --ruby\n</code></pre><h2 id=\"5-开始使用RVM\"><a href=\"#5-开始使用RVM\" class=\"headerlink\" title=\"5. 开始使用RVM\"></a>5. 开始使用RVM</h2><h3 id=\"1-查看已有Ruby版本\"><a href=\"#1-查看已有Ruby版本\" class=\"headerlink\" title=\"1. 查看已有Ruby版本:\"></a>1. 查看已有Ruby版本:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果出现警告，如：<br>“Warning! PATH is not properly set up…” ，<br>这是未添加RVM环境变量，请<a href=\"https://stackoverflow.com/questions/18276701/getting-warning-path-is-not-properly-set-up-when-doing-rvm-use-2-0-0-defaul\" target=\"_blank\" rel=\"noopener\">参考解决方案</a>.<br>或者你直接Copy下面的指令：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; source &quot;$HOME/.rvm/scripts/rvm&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-检查Ruby版本列表：\"><a href=\"#2-检查Ruby版本列表：\" class=\"headerlink\" title=\"2. 检查Ruby版本列表：\"></a>2. 检查Ruby版本列表：</h3><p><strong>不必输入下面的代码，这是输入<code>rvm list</code>后的结果！</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm rubies</span><br><span class=\"line\"></span><br><span class=\"line\">=* ruby-2.2.0 [ x86_64 ]</span><br><span class=\"line\"></span><br><span class=\"line\"># =&gt; - current</span><br><span class=\"line\"># =* - current &amp;&amp; default</span><br><span class=\"line\">#  * - default</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装特定版本Ruby：\"><a href=\"#3-安装特定版本Ruby：\" class=\"headerlink\" title=\"3. 安装特定版本Ruby：\"></a>3. 安装特定版本Ruby：</h3><pre><code>rvm use ruby --default\n</code></pre><p>检查ruby位置：</p>\n<pre><code>which ruby\n</code></pre><p>如果显示了一行目录，则表示安装成功。</p>\n<pre><code>ruby -v\n</code></pre><h2 id=\"6-安装sass\"><a href=\"#6-安装sass\" class=\"headerlink\" title=\"6. 安装sass\"></a>6. 安装sass</h2><pre><code>gem install sass\n</code></pre><h2 id=\"7-安装完成！\"><a href=\"#7-安装完成！\" class=\"headerlink\" title=\"7. 安装完成！\"></a>7. 安装完成！</h2><blockquote>\n<p>参考文章：<a href=\"http://usabilityetc.com/articles/ruby-on-mac-os-x-with-rvm/\" target=\"_blank\" rel=\"noopener\">Ruby on Mac OSX with RVM</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"Mac-OSX系统下使用RVM修复安装Sass的错误\"><a href=\"#Mac-OSX系统下使用RVM修复安装Sass的错误\" class=\"headerlink\" title=\"Mac OSX系统下使用RVM修复安装Sass的错误\"></a>Mac OSX系统下使用RVM修复安装Sass的错误</h1><p>这个万金油方法能解决大多数的gem安装问题。</p>","more":"<p>如果你使用通用的<code>gem install sass</code> 出现错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR:  While executing gem ... (Errno::EACCES)</span><br><span class=\"line\">    Permission denied - /var/lib/gems</span><br></pre></td></tr></table></figure>\n<p>那么这篇文章也许能解决你的问题。</p>\n<p>这个错误说明Ruby的权限有问题，要解决这个权限问题很麻烦，不过有一个方法可以跳过这个坑：</p>\n<p><strong>使用RVM(Ruby Version Manager)安装一个特定版本的Ruby，再安装sass。</strong></p>\n<blockquote>\n<p>以下步骤都在Terminal(终端)中完成!</p>\n</blockquote>\n<h2 id=\"1-安装Homebrew\"><a href=\"#1-安装Homebrew\" class=\"headerlink\" title=\"1. 安装Homebrew\"></a>1. 安装Homebrew</h2><pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n</code></pre><h2 id=\"2-安装gpg\"><a href=\"#2-安装gpg\" class=\"headerlink\" title=\"2. 安装gpg\"></a>2. 安装gpg</h2><p>安装RVM之前需要gpg，先别管它是什么。</p>\n<p>它是 <strong>mpapis public key</strong> 公钥用于验证安装包以确保安全。</p>\n<p>如果你想知道它到底是什么，点击这里<a href=\"https://en.wikipedia.org/wiki/GNU_Privacy_Guard\" target=\"_blank\" rel=\"noopener\">GNU-wiki百科</a>。</p>\n<pre><code>brew install gnupg\n</code></pre><h2 id=\"3-安装gpg密钥\"><a href=\"#3-安装gpg密钥\" class=\"headerlink\" title=\"3. 安装gpg密钥\"></a>3. 安装gpg密钥</h2><pre><code>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB\n</code></pre><h2 id=\"4-安装RVM\"><a href=\"#4-安装RVM\" class=\"headerlink\" title=\"4. 安装RVM\"></a>4. 安装RVM</h2><pre><code>\\curl -sSL https://get.rvm.io | bash -s stable --ruby\n</code></pre><h2 id=\"5-开始使用RVM\"><a href=\"#5-开始使用RVM\" class=\"headerlink\" title=\"5. 开始使用RVM\"></a>5. 开始使用RVM</h2><h3 id=\"1-查看已有Ruby版本\"><a href=\"#1-查看已有Ruby版本\" class=\"headerlink\" title=\"1. 查看已有Ruby版本:\"></a>1. 查看已有Ruby版本:</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm list</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果出现警告，如：<br>“Warning! PATH is not properly set up…” ，<br>这是未添加RVM环境变量，请<a href=\"https://stackoverflow.com/questions/18276701/getting-warning-path-is-not-properly-set-up-when-doing-rvm-use-2-0-0-defaul\" target=\"_blank\" rel=\"noopener\">参考解决方案</a>.<br>或者你直接Copy下面的指令：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; source &quot;$HOME/.rvm/scripts/rvm&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-检查Ruby版本列表：\"><a href=\"#2-检查Ruby版本列表：\" class=\"headerlink\" title=\"2. 检查Ruby版本列表：\"></a>2. 检查Ruby版本列表：</h3><p><strong>不必输入下面的代码，这是输入<code>rvm list</code>后的结果！</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rvm rubies</span><br><span class=\"line\"></span><br><span class=\"line\">=* ruby-2.2.0 [ x86_64 ]</span><br><span class=\"line\"></span><br><span class=\"line\"># =&gt; - current</span><br><span class=\"line\"># =* - current &amp;&amp; default</span><br><span class=\"line\">#  * - default</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-安装特定版本Ruby：\"><a href=\"#3-安装特定版本Ruby：\" class=\"headerlink\" title=\"3. 安装特定版本Ruby：\"></a>3. 安装特定版本Ruby：</h3><pre><code>rvm use ruby --default\n</code></pre><p>检查ruby位置：</p>\n<pre><code>which ruby\n</code></pre><p>如果显示了一行目录，则表示安装成功。</p>\n<pre><code>ruby -v\n</code></pre><h2 id=\"6-安装sass\"><a href=\"#6-安装sass\" class=\"headerlink\" title=\"6. 安装sass\"></a>6. 安装sass</h2><pre><code>gem install sass\n</code></pre><h2 id=\"7-安装完成！\"><a href=\"#7-安装完成！\" class=\"headerlink\" title=\"7. 安装完成！\"></a>7. 安装完成！</h2><blockquote>\n<p>参考文章：<a href=\"http://usabilityetc.com/articles/ruby-on-mac-os-x-with-rvm/\" target=\"_blank\" rel=\"noopener\">Ruby on Mac OSX with RVM</a></p>\n</blockquote>"},{"title":"Array.prototype.sort()的高级用法","date":"2018-01-27T16:00:00.000Z","update":"2018-04-17T16:00:00.000Z","_content":"\n# Array.prototype.sort()\n## 一、基本操作\n`sort()`方法的默认排序顺序是根据串Unicode码点。\n<!-- more -->\n\n```\nvar fruit = ['cherries', 'apples', 'bananas'];\nfruit.sort();\n//['apples', 'bananas', 'cherries']\n\nvar scores = [1, 10, 21, 2];\nscores.sort();\n//[1, 10, 2, 21]\n//这里的10竟然在2之前，因为在Unicode指针顺序中 '10' 在 '2' 之前。\n```\n\n## 二、进阶操作（compareFunction）\n这时我们需要一个比较函数，来得到我们所需要的排序。\n如果指明了`compareFunction`,那么数组会按照调用**该函数的返回值**排序。即a和b是两个将要被比较的元素：\n\n### 2.0 字符串排序\n```\nvar str_arr = ['cherries', 'apples', 'bananas'];\nfunction compareStr(a, b){\n\tif(a<b){\n\t\treturn -1;\n\t}\n\tif(a>b){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nstr_arr.sort(compareStr);\n// ['apples', 'bananas', 'cherries']\n```\n\n### 2.1 数字排序\n\n- 如果compareFunction(a, b)小于0，那么a会排到b之前；\n- 如果compareFunction(a, b)等于0 ,  那么位置不变；\n- 如果compareFunction(a, b)大于0，那么b会排到a之前；\n```\nfunction compareNumbers(a, b){\n\treturn a - b;\n}\n\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort(function(a, b){\n\treturn a - b;\n});\nconsole.log(numbers);\n\n//也可以写成：\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers);\n\n//输出：[1, 2, 3, 4, 5]\n```\n\n### 2.2 对象按照某个属性排序\n\n``` js\nvar items = [\n  { name: 'Edward', value: 21 },\n  { name: 'Sharpe', value: 37 },\n  { name: 'And', value: 45 },\n  { name: 'The', value: -12 },\n  { name: 'Magnetic' },\n  { name: 'Zeros', value: 37 }\n];\n\n//按value值排序\nitems.sort(function (a,b){\n\treturn (a,.value - b.value)\n});\n\n//按name值排序\nitems.sort(function(a, b){\n\tvar nameA = a.name.toUpperCase();\n\tvar nameB = b.name.toUpperCase();\n\tif(nameA < nameB){\n\t\treturn -1;\n\t}\n\tif(nameA > nameB){\n\t\treturn 1;\n\t}\n\treturn 0;\n});\n```\n\n## 三、高级操作：使用映射改善排序\n`compareFunction`可能需要对元素做多次映射以实现排序，尤其当compareFunction较为复杂，且元素较多的时候，某些compareFunction 可能会导致很高的负载。使用map辅助排序将会是个好主意。\n\n基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。\n\n```\n// 需要被排序的数组\nvar list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n\n// 对需要排序的数字和位置的临时存储, mapped为临时容器\nvar mapped = list.map(function(el, i) {\n  return { index: i, value: el.toLowerCase() };\n})\n\n// 按照多个值排序数组\nmapped.sort(function(a, b) {\n  return +(a.value > b.value) || +(a.value === b.value) - 1;\n});\n\n// 根据索引得到排序的结果\nvar result = mapped.map(function(el){\n  return list[el.index];\n});\n//result : [\"alpha\", \"bravo\", \"CHARLIE\", \"Delta\"]\n```\n\n<br><br><br><br><br><br><br><br><br><br><br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018-01-28 Array.prototype.sort的高级用法.md","raw":"---\n\ntitle: Array.prototype.sort()的高级用法\ncategories: 技术\ndate: 2018-01-28\nupdate: 2018-04-18\ntags: JavaScript\n\n---\n\n# Array.prototype.sort()\n## 一、基本操作\n`sort()`方法的默认排序顺序是根据串Unicode码点。\n<!-- more -->\n\n```\nvar fruit = ['cherries', 'apples', 'bananas'];\nfruit.sort();\n//['apples', 'bananas', 'cherries']\n\nvar scores = [1, 10, 21, 2];\nscores.sort();\n//[1, 10, 2, 21]\n//这里的10竟然在2之前，因为在Unicode指针顺序中 '10' 在 '2' 之前。\n```\n\n## 二、进阶操作（compareFunction）\n这时我们需要一个比较函数，来得到我们所需要的排序。\n如果指明了`compareFunction`,那么数组会按照调用**该函数的返回值**排序。即a和b是两个将要被比较的元素：\n\n### 2.0 字符串排序\n```\nvar str_arr = ['cherries', 'apples', 'bananas'];\nfunction compareStr(a, b){\n\tif(a<b){\n\t\treturn -1;\n\t}\n\tif(a>b){\n\t\treturn 1;\n\t}\n\treturn 0;\n}\nstr_arr.sort(compareStr);\n// ['apples', 'bananas', 'cherries']\n```\n\n### 2.1 数字排序\n\n- 如果compareFunction(a, b)小于0，那么a会排到b之前；\n- 如果compareFunction(a, b)等于0 ,  那么位置不变；\n- 如果compareFunction(a, b)大于0，那么b会排到a之前；\n```\nfunction compareNumbers(a, b){\n\treturn a - b;\n}\n\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort(function(a, b){\n\treturn a - b;\n});\nconsole.log(numbers);\n\n//也可以写成：\nvar numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers);\n\n//输出：[1, 2, 3, 4, 5]\n```\n\n### 2.2 对象按照某个属性排序\n\n``` js\nvar items = [\n  { name: 'Edward', value: 21 },\n  { name: 'Sharpe', value: 37 },\n  { name: 'And', value: 45 },\n  { name: 'The', value: -12 },\n  { name: 'Magnetic' },\n  { name: 'Zeros', value: 37 }\n];\n\n//按value值排序\nitems.sort(function (a,b){\n\treturn (a,.value - b.value)\n});\n\n//按name值排序\nitems.sort(function(a, b){\n\tvar nameA = a.name.toUpperCase();\n\tvar nameB = b.name.toUpperCase();\n\tif(nameA < nameB){\n\t\treturn -1;\n\t}\n\tif(nameA > nameB){\n\t\treturn 1;\n\t}\n\treturn 0;\n});\n```\n\n## 三、高级操作：使用映射改善排序\n`compareFunction`可能需要对元素做多次映射以实现排序，尤其当compareFunction较为复杂，且元素较多的时候，某些compareFunction 可能会导致很高的负载。使用map辅助排序将会是个好主意。\n\n基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。\n\n```\n// 需要被排序的数组\nvar list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n\n// 对需要排序的数字和位置的临时存储, mapped为临时容器\nvar mapped = list.map(function(el, i) {\n  return { index: i, value: el.toLowerCase() };\n})\n\n// 按照多个值排序数组\nmapped.sort(function(a, b) {\n  return +(a.value > b.value) || +(a.value === b.value) - 1;\n});\n\n// 根据索引得到排序的结果\nvar result = mapped.map(function(el){\n  return list[el.index];\n});\n//result : [\"alpha\", \"bravo\", \"CHARLIE\", \"Delta\"]\n```\n\n<br><br><br><br><br><br><br><br><br><br><br>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2018-01-28 Array.prototype.sort的高级用法","published":1,"updated":"2019-03-05T12:58:37.473Z","_id":"cjstph3y1001288zbo0szla5t","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort()\"></a>Array.prototype.sort()</h1><h2 id=\"一、基本操作\"><a href=\"#一、基本操作\" class=\"headerlink\" title=\"一、基本操作\"></a>一、基本操作</h2><p><code>sort()</code>方法的默认排序顺序是根据串Unicode码点。<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruit = [&apos;cherries&apos;, &apos;apples&apos;, &apos;bananas&apos;];</span><br><span class=\"line\">fruit.sort();</span><br><span class=\"line\">//[&apos;apples&apos;, &apos;bananas&apos;, &apos;cherries&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">var scores = [1, 10, 21, 2];</span><br><span class=\"line\">scores.sort();</span><br><span class=\"line\">//[1, 10, 2, 21]</span><br><span class=\"line\">//这里的10竟然在2之前，因为在Unicode指针顺序中 &apos;10&apos; 在 &apos;2&apos; 之前。</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、进阶操作（compareFunction）\"><a href=\"#二、进阶操作（compareFunction）\" class=\"headerlink\" title=\"二、进阶操作（compareFunction）\"></a>二、进阶操作（compareFunction）</h2><p>这时我们需要一个比较函数，来得到我们所需要的排序。<br>如果指明了<code>compareFunction</code>,那么数组会按照调用<strong>该函数的返回值</strong>排序。即a和b是两个将要被比较的元素：</p>\n<h3 id=\"2-0-字符串排序\"><a href=\"#2-0-字符串排序\" class=\"headerlink\" title=\"2.0 字符串排序\"></a>2.0 字符串排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str_arr = [&apos;cherries&apos;, &apos;apples&apos;, &apos;bananas&apos;];</span><br><span class=\"line\">function compareStr(a, b)&#123;</span><br><span class=\"line\">\tif(a&lt;b)&#123;</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(a&gt;b)&#123;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">str_arr.sort(compareStr);</span><br><span class=\"line\">// [&apos;apples&apos;, &apos;bananas&apos;, &apos;cherries&apos;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-数字排序\"><a href=\"#2-1-数字排序\" class=\"headerlink\" title=\"2.1 数字排序\"></a>2.1 数字排序</h3><ul>\n<li>如果compareFunction(a, b)小于0，那么a会排到b之前；</li>\n<li>如果compareFunction(a, b)等于0 ,  那么位置不变；</li>\n<li>如果compareFunction(a, b)大于0，那么b会排到a之前；<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compareNumbers(a, b)&#123;</span><br><span class=\"line\">\treturn a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var numbers = [4, 2, 5, 1, 3];</span><br><span class=\"line\">numbers.sort(function(a, b)&#123;</span><br><span class=\"line\">\treturn a - b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">//也可以写成：</span><br><span class=\"line\">var numbers = [4, 2, 5, 1, 3];</span><br><span class=\"line\">numbers.sort((a, b) =&gt; a - b);</span><br><span class=\"line\">console.log(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">//输出：[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-对象按照某个属性排序\"><a href=\"#2-2-对象按照某个属性排序\" class=\"headerlink\" title=\"2.2 对象按照某个属性排序\"></a>2.2 对象按照某个属性排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Edward'</span>, <span class=\"attr\">value</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sharpe'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'And'</span>, <span class=\"attr\">value</span>: <span class=\"number\">45</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'The'</span>, <span class=\"attr\">value</span>: <span class=\"number\">-12</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Magnetic'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Zeros'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按value值排序</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a,.value - b.value)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按name值排序</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nameA = a.name.toUpperCase();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nameB = b.name.toUpperCase();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(nameA &lt; nameB)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(nameA &gt; nameB)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、高级操作：使用映射改善排序\"><a href=\"#三、高级操作：使用映射改善排序\" class=\"headerlink\" title=\"三、高级操作：使用映射改善排序\"></a>三、高级操作：使用映射改善排序</h2><p><code>compareFunction</code>可能需要对元素做多次映射以实现排序，尤其当compareFunction较为复杂，且元素较多的时候，某些compareFunction 可能会导致很高的负载。使用map辅助排序将会是个好主意。</p>\n<p>基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要被排序的数组</span><br><span class=\"line\">var list = [&apos;Delta&apos;, &apos;alpha&apos;, &apos;CHARLIE&apos;, &apos;bravo&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 对需要排序的数字和位置的临时存储, mapped为临时容器</span><br><span class=\"line\">var mapped = list.map(function(el, i) &#123;</span><br><span class=\"line\">  return &#123; index: i, value: el.toLowerCase() &#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 按照多个值排序数组</span><br><span class=\"line\">mapped.sort(function(a, b) &#123;</span><br><span class=\"line\">  return +(a.value &gt; b.value) || +(a.value === b.value) - 1;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 根据索引得到排序的结果</span><br><span class=\"line\">var result = mapped.map(function(el)&#123;</span><br><span class=\"line\">  return list[el.index];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//result : [&quot;alpha&quot;, &quot;bravo&quot;, &quot;CHARLIE&quot;, &quot;Delta&quot;]</span><br></pre></td></tr></table></figure>\n<p><br><br><br><br><br><br><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Array-prototype-sort\"><a href=\"#Array-prototype-sort\" class=\"headerlink\" title=\"Array.prototype.sort()\"></a>Array.prototype.sort()</h1><h2 id=\"一、基本操作\"><a href=\"#一、基本操作\" class=\"headerlink\" title=\"一、基本操作\"></a>一、基本操作</h2><p><code>sort()</code>方法的默认排序顺序是根据串Unicode码点。<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruit = [&apos;cherries&apos;, &apos;apples&apos;, &apos;bananas&apos;];</span><br><span class=\"line\">fruit.sort();</span><br><span class=\"line\">//[&apos;apples&apos;, &apos;bananas&apos;, &apos;cherries&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">var scores = [1, 10, 21, 2];</span><br><span class=\"line\">scores.sort();</span><br><span class=\"line\">//[1, 10, 2, 21]</span><br><span class=\"line\">//这里的10竟然在2之前，因为在Unicode指针顺序中 &apos;10&apos; 在 &apos;2&apos; 之前。</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、进阶操作（compareFunction）\"><a href=\"#二、进阶操作（compareFunction）\" class=\"headerlink\" title=\"二、进阶操作（compareFunction）\"></a>二、进阶操作（compareFunction）</h2><p>这时我们需要一个比较函数，来得到我们所需要的排序。<br>如果指明了<code>compareFunction</code>,那么数组会按照调用<strong>该函数的返回值</strong>排序。即a和b是两个将要被比较的元素：</p>\n<h3 id=\"2-0-字符串排序\"><a href=\"#2-0-字符串排序\" class=\"headerlink\" title=\"2.0 字符串排序\"></a>2.0 字符串排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str_arr = [&apos;cherries&apos;, &apos;apples&apos;, &apos;bananas&apos;];</span><br><span class=\"line\">function compareStr(a, b)&#123;</span><br><span class=\"line\">\tif(a&lt;b)&#123;</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif(a&gt;b)&#123;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">str_arr.sort(compareStr);</span><br><span class=\"line\">// [&apos;apples&apos;, &apos;bananas&apos;, &apos;cherries&apos;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-1-数字排序\"><a href=\"#2-1-数字排序\" class=\"headerlink\" title=\"2.1 数字排序\"></a>2.1 数字排序</h3><ul>\n<li>如果compareFunction(a, b)小于0，那么a会排到b之前；</li>\n<li>如果compareFunction(a, b)等于0 ,  那么位置不变；</li>\n<li>如果compareFunction(a, b)大于0，那么b会排到a之前；<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function compareNumbers(a, b)&#123;</span><br><span class=\"line\">\treturn a - b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var numbers = [4, 2, 5, 1, 3];</span><br><span class=\"line\">numbers.sort(function(a, b)&#123;</span><br><span class=\"line\">\treturn a - b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">//也可以写成：</span><br><span class=\"line\">var numbers = [4, 2, 5, 1, 3];</span><br><span class=\"line\">numbers.sort((a, b) =&gt; a - b);</span><br><span class=\"line\">console.log(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\">//输出：[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-2-对象按照某个属性排序\"><a href=\"#2-2-对象按照某个属性排序\" class=\"headerlink\" title=\"2.2 对象按照某个属性排序\"></a>2.2 对象按照某个属性排序</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Edward'</span>, <span class=\"attr\">value</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sharpe'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'And'</span>, <span class=\"attr\">value</span>: <span class=\"number\">45</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'The'</span>, <span class=\"attr\">value</span>: <span class=\"number\">-12</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Magnetic'</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">name</span>: <span class=\"string\">'Zeros'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按value值排序</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a,.value - b.value)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按name值排序</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nameA = a.name.toUpperCase();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nameB = b.name.toUpperCase();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(nameA &lt; nameB)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(nameA &gt; nameB)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、高级操作：使用映射改善排序\"><a href=\"#三、高级操作：使用映射改善排序\" class=\"headerlink\" title=\"三、高级操作：使用映射改善排序\"></a>三、高级操作：使用映射改善排序</h2><p><code>compareFunction</code>可能需要对元素做多次映射以实现排序，尤其当compareFunction较为复杂，且元素较多的时候，某些compareFunction 可能会导致很高的负载。使用map辅助排序将会是个好主意。</p>\n<p>基本思想是首先将数组中的每个元素比较的实际值取出来，排序后再将数组恢复。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要被排序的数组</span><br><span class=\"line\">var list = [&apos;Delta&apos;, &apos;alpha&apos;, &apos;CHARLIE&apos;, &apos;bravo&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">// 对需要排序的数字和位置的临时存储, mapped为临时容器</span><br><span class=\"line\">var mapped = list.map(function(el, i) &#123;</span><br><span class=\"line\">  return &#123; index: i, value: el.toLowerCase() &#125;;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 按照多个值排序数组</span><br><span class=\"line\">mapped.sort(function(a, b) &#123;</span><br><span class=\"line\">  return +(a.value &gt; b.value) || +(a.value === b.value) - 1;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 根据索引得到排序的结果</span><br><span class=\"line\">var result = mapped.map(function(el)&#123;</span><br><span class=\"line\">  return list[el.index];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//result : [&quot;alpha&quot;, &quot;bravo&quot;, &quot;CHARLIE&quot;, &quot;Delta&quot;]</span><br></pre></td></tr></table></figure>\n<p><br><br><br><br><br><br><br><br><br><br><br></p>"},{"title":"2017-12-03 日记：村上春树的文摘","date":"2017-07-22T14:38:55.000Z","_content":"\n# 2017-12-03 日记\n\n村上春树，从29岁开始写作，从33岁开始坚持跑步。\n\n人生哪有那么多太晚，都是懒惰和恐惧的借口罢了。\n\n> 一些人不努力便得不到的东西，有些人却勿需努力便唾手可得。\n\n> 在学校里，我们学到的最重要的东西，就是“最重要的东西在学校里学不到”这个真理。\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMjEyNzUwMzM4Nl19\n-->","source":"_posts/2017-12-03 随笔.md","raw":"---\ntitle: 2017-12-03 日记：村上春树的文摘\ndate: 2017-07-22 22:38:55\ncategories: 随笔\ntags: 随笔\n---\n\n# 2017-12-03 日记\n\n村上春树，从29岁开始写作，从33岁开始坚持跑步。\n\n人生哪有那么多太晚，都是懒惰和恐惧的借口罢了。\n\n> 一些人不努力便得不到的东西，有些人却勿需努力便唾手可得。\n\n> 在学校里，我们学到的最重要的东西，就是“最重要的东西在学校里学不到”这个真理。\n<!--stackedit_data:\neyJoaXN0b3J5IjpbMjEyNzUwMzM4Nl19\n-->","slug":"2017-12-03 随笔","published":1,"updated":"2019-03-05T12:58:37.473Z","_id":"cjstph3y5001588zblmu0k2xy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2017-12-03-日记\"><a href=\"#2017-12-03-日记\" class=\"headerlink\" title=\"2017-12-03 日记\"></a>2017-12-03 日记</h1><p>村上春树，从29岁开始写作，从33岁开始坚持跑步。</p>\n<p>人生哪有那么多太晚，都是懒惰和恐惧的借口罢了。</p>\n<blockquote>\n<p>一些人不努力便得不到的东西，有些人却勿需努力便唾手可得。</p>\n</blockquote>\n<blockquote>\n<p>在学校里，我们学到的最重要的东西，就是“最重要的东西在学校里学不到”这个真理。<br><!--stackedit_data:\neyJoaXN0b3J5IjpbMjEyNzUwMzM4Nl19\n--></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2017-12-03-日记\"><a href=\"#2017-12-03-日记\" class=\"headerlink\" title=\"2017-12-03 日记\"></a>2017-12-03 日记</h1><p>村上春树，从29岁开始写作，从33岁开始坚持跑步。</p>\n<p>人生哪有那么多太晚，都是懒惰和恐惧的借口罢了。</p>\n<blockquote>\n<p>一些人不努力便得不到的东西，有些人却勿需努力便唾手可得。</p>\n</blockquote>\n<blockquote>\n<p>在学校里，我们学到的最重要的东西，就是“最重要的东西在学校里学不到”这个真理。<br><!--stackedit_data:\neyJoaXN0b3J5IjpbMjEyNzUwMzM4Nl19\n--></p>\n</blockquote>\n"},{"title":"Git Commit Message规范参考","date":"2019-01-23T16:00:00.000Z","update":"2019-01-23T16:00:00.000Z","_content":"\n> 注：在Git协作模式的团队中，Commit Message的规范对版本控制起着很重要的作用。本文引用自团队内部的规范，分享出来，一是为了贡献社区，二是为了加深印象。\n\n<!-- more -->\n\n## Commit Message规范\n\n在`git`开发流程中，每次`git commit`，都需要对该次`commit`添加描述信息，描述此次`commit`的具体改动内容。规范的`commit message`格式，可以让团队成员对每次改动内容进行快速了解，也可以方便`git log`时的浏览和筛选。\n\n目前社区使用最广的是 AngularJS 的规范：\n\n- [Google Docs 原文](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0)\n\n- [阮一峰博客对于commit message的介绍](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n### 简述\n\n一条完整的提交信息(`commit message`)一般来说包含`Header`和`Body`，其中`Header`是必须的，`Body`是可选的。\n\n对于大部分可以简单描述清楚的改动，只需要一个`Header`即可。\n\n而对于一些需要更详细说明、要分条列出的改动，我们在`Header`进行简述之外，还要在`Body`中详细描述。\n\n一般而言，`Header`长度不应超过50个字符，如果超过的话则考虑添加`Body`进行详述。\n\n我们通常使用的`git commit -m \"<Commit Message Header>\"`，就是只添加单行的`Header`信息。例如：\n\n```sh\n# 这里只添加了Header\ngit commit -m \"feat(官网主页): 将iOS的头部背景与Android统一，不再使用默认蓝色图片\"\n```\n\n如果需要添加`Body`详细信息，则使用`git commit`进入文本编辑器，再进行具体编辑。例如：\n\n```sh\n# 这里既添加了Header，又添加了Body\nchore(构建优化): 解决构建流程几个问题\n\n- 每次构建chunkhash会改变的问题\n- 内联和外链样式重复问题\n- 图片md5错误问题\n- 提取项目公共vendor\n```\n\n### 具体规范\n\n从上面的示例可以看到，`Header`的格式为：`<type>(<scope>): <subject>`。\n\n`Header`主要由`type`, `scope`和`subject`三部分组成：\n\n- `type`用来描述这次提交属于哪一类修改，比如是`完成需求`还是`修复BUG`。_（必需）_\n- `scope`用来描述这次提交涉及的范围，比如是`详情页`还是`礼包页`。对于一些没有明确范围的改动，可以忽略。_（可选）_\n- `subject`是这次提交的简单描述，具体做了什么。如果50字符内不能描述清楚，建议添加`Body`继续描述。_（必需）_\n\n### `type`类别\n\n常用：\n- `feat` - 新增需求、需求迭代、新功能等相关的提交\n- `fix` - BUG修复提交\n- `docs` - 文档相关的提交\n- `refactor` - 技术优化类的代码重构，不影响具体需求和逻辑，也不涉及BUG修复的修改，如：测速优化、性能优化、模块拆分等\n- `chore` - 代码维护相关的小改动，如：更新依赖库、构建工具及其配置的改动、代码格式调整等\n\n较不常用：\n- `workflow` - 开发工作流的改动，比如修改`package.json`中的`scripts`，比如增加或修改一些发布脚本\n- `test` - 测试相关的修改，比如增加测试用例。\n\n### Revert\n\n在需要回滚某些改动的时候，使用`revert: <reverted commit Header>`格式，也就是将回滚的那一条提交的`Header`作为`revert`后的内容。\n\n例如，之前进行了某些改动：\n\n```sh\nfix(礼包页): 修复了礼包页展示不完全的bug\n```\n\n之后发现这个改动会引起一些其他的bug，不得已需要回滚：\n\n```sh\nrevert: fix(礼包页): 修复了礼包页展示不完全的bug\n```\n\n### 注意事项\n\n- `scope`不是必须的，也没有具体的限定，但是有明显范围特征的尽量写上。（比如下面例子中的`(详情页)`）；\n- 注意描述要清晰，要针对改动本身，让其他成员在没有任何上下文的情况下，也能看懂改动了什么。\n- 不写废话（不过可以偶尔卖个萌😉）；\n- `typo`修正、代码格式调整之类的，在AngularJS标准里另分到`style`类别，我们统一放在`chore`当中。这些很细小的改动，描述可以不用特别详细；\n- 应保证`改动`和`commit`一一对应；\n- 一个`commit`只对应一处改动、一个需求或一个BUG，不要把多个改动集中混在一起提交。在同时修改了多个文件时，不要直接`git add .`，应该挑选相关的文件进行`add`和`commit`，再挑选另一部分文件进行`add`和`commit`；\n- 一处改动、一个需求或一个BUG，应尽量集中在同一个`commit`中，不要开发到中途先提交一次，开发完成再提交一次。\n\n```sh\n# Bad\nfix: bug修复\nfix: 修复了测试昨天发现的bug\nfeat: 完成了今天排期的需求\n\n# OK\nchore: 修正了几处拼写错误\n\n# Good\nfeat: 在新的主页新增了一个关闭按钮\nfix(详情页): 修复展开活动的sid为string的bug\n```\n\n<!--stackedit_data:\neyJoaXN0b3J5IjpbNTM2Nzc2MTU5XX0=\n-->","source":"_posts/2019-01-24 Git Commit Message规范参考.md","raw":"---\n\ntitle: Git Commit Message规范参考\n\ncategories: 软件工程\n\ndate: 2019-01-24\n\nupdate: 2019-01-24\n\ntags: ['规范', 'Git', '软件工程']\n\n---\n\n> 注：在Git协作模式的团队中，Commit Message的规范对版本控制起着很重要的作用。本文引用自团队内部的规范，分享出来，一是为了贡献社区，二是为了加深印象。\n\n<!-- more -->\n\n## Commit Message规范\n\n在`git`开发流程中，每次`git commit`，都需要对该次`commit`添加描述信息，描述此次`commit`的具体改动内容。规范的`commit message`格式，可以让团队成员对每次改动内容进行快速了解，也可以方便`git log`时的浏览和筛选。\n\n目前社区使用最广的是 AngularJS 的规范：\n\n- [Google Docs 原文](https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0)\n\n- [阮一峰博客对于commit message的介绍](http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html)\n\n### 简述\n\n一条完整的提交信息(`commit message`)一般来说包含`Header`和`Body`，其中`Header`是必须的，`Body`是可选的。\n\n对于大部分可以简单描述清楚的改动，只需要一个`Header`即可。\n\n而对于一些需要更详细说明、要分条列出的改动，我们在`Header`进行简述之外，还要在`Body`中详细描述。\n\n一般而言，`Header`长度不应超过50个字符，如果超过的话则考虑添加`Body`进行详述。\n\n我们通常使用的`git commit -m \"<Commit Message Header>\"`，就是只添加单行的`Header`信息。例如：\n\n```sh\n# 这里只添加了Header\ngit commit -m \"feat(官网主页): 将iOS的头部背景与Android统一，不再使用默认蓝色图片\"\n```\n\n如果需要添加`Body`详细信息，则使用`git commit`进入文本编辑器，再进行具体编辑。例如：\n\n```sh\n# 这里既添加了Header，又添加了Body\nchore(构建优化): 解决构建流程几个问题\n\n- 每次构建chunkhash会改变的问题\n- 内联和外链样式重复问题\n- 图片md5错误问题\n- 提取项目公共vendor\n```\n\n### 具体规范\n\n从上面的示例可以看到，`Header`的格式为：`<type>(<scope>): <subject>`。\n\n`Header`主要由`type`, `scope`和`subject`三部分组成：\n\n- `type`用来描述这次提交属于哪一类修改，比如是`完成需求`还是`修复BUG`。_（必需）_\n- `scope`用来描述这次提交涉及的范围，比如是`详情页`还是`礼包页`。对于一些没有明确范围的改动，可以忽略。_（可选）_\n- `subject`是这次提交的简单描述，具体做了什么。如果50字符内不能描述清楚，建议添加`Body`继续描述。_（必需）_\n\n### `type`类别\n\n常用：\n- `feat` - 新增需求、需求迭代、新功能等相关的提交\n- `fix` - BUG修复提交\n- `docs` - 文档相关的提交\n- `refactor` - 技术优化类的代码重构，不影响具体需求和逻辑，也不涉及BUG修复的修改，如：测速优化、性能优化、模块拆分等\n- `chore` - 代码维护相关的小改动，如：更新依赖库、构建工具及其配置的改动、代码格式调整等\n\n较不常用：\n- `workflow` - 开发工作流的改动，比如修改`package.json`中的`scripts`，比如增加或修改一些发布脚本\n- `test` - 测试相关的修改，比如增加测试用例。\n\n### Revert\n\n在需要回滚某些改动的时候，使用`revert: <reverted commit Header>`格式，也就是将回滚的那一条提交的`Header`作为`revert`后的内容。\n\n例如，之前进行了某些改动：\n\n```sh\nfix(礼包页): 修复了礼包页展示不完全的bug\n```\n\n之后发现这个改动会引起一些其他的bug，不得已需要回滚：\n\n```sh\nrevert: fix(礼包页): 修复了礼包页展示不完全的bug\n```\n\n### 注意事项\n\n- `scope`不是必须的，也没有具体的限定，但是有明显范围特征的尽量写上。（比如下面例子中的`(详情页)`）；\n- 注意描述要清晰，要针对改动本身，让其他成员在没有任何上下文的情况下，也能看懂改动了什么。\n- 不写废话（不过可以偶尔卖个萌😉）；\n- `typo`修正、代码格式调整之类的，在AngularJS标准里另分到`style`类别，我们统一放在`chore`当中。这些很细小的改动，描述可以不用特别详细；\n- 应保证`改动`和`commit`一一对应；\n- 一个`commit`只对应一处改动、一个需求或一个BUG，不要把多个改动集中混在一起提交。在同时修改了多个文件时，不要直接`git add .`，应该挑选相关的文件进行`add`和`commit`，再挑选另一部分文件进行`add`和`commit`；\n- 一处改动、一个需求或一个BUG，应尽量集中在同一个`commit`中，不要开发到中途先提交一次，开发完成再提交一次。\n\n```sh\n# Bad\nfix: bug修复\nfix: 修复了测试昨天发现的bug\nfeat: 完成了今天排期的需求\n\n# OK\nchore: 修正了几处拼写错误\n\n# Good\nfeat: 在新的主页新增了一个关闭按钮\nfix(详情页): 修复展开活动的sid为string的bug\n```\n\n<!--stackedit_data:\neyJoaXN0b3J5IjpbNTM2Nzc2MTU5XX0=\n-->","slug":"2019-01-24 Git Commit Message规范参考","published":1,"updated":"2019-02-20T13:32:22.932Z","_id":"cjstph3yc001n88zbyb7gfntb","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>注：在Git协作模式的团队中，Commit Message的规范对版本控制起着很重要的作用。本文引用自团队内部的规范，分享出来，一是为了贡献社区，二是为了加深印象。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Commit-Message规范\"><a href=\"#Commit-Message规范\" class=\"headerlink\" title=\"Commit Message规范\"></a>Commit Message规范</h2><p>在<code>git</code>开发流程中，每次<code>git commit</code>，都需要对该次<code>commit</code>添加描述信息，描述此次<code>commit</code>的具体改动内容。规范的<code>commit message</code>格式，可以让团队成员对每次改动内容进行快速了解，也可以方便<code>git log</code>时的浏览和筛选。</p>\n<p>目前社区使用最广的是 AngularJS 的规范：</p>\n<ul>\n<li><p><a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\" target=\"_blank\" rel=\"noopener\">Google Docs 原文</a></p>\n</li>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">阮一峰博客对于commit message的介绍</a></p>\n</li>\n</ul>\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>一条完整的提交信息(<code>commit message</code>)一般来说包含<code>Header</code>和<code>Body</code>，其中<code>Header</code>是必须的，<code>Body</code>是可选的。</p>\n<p>对于大部分可以简单描述清楚的改动，只需要一个<code>Header</code>即可。</p>\n<p>而对于一些需要更详细说明、要分条列出的改动，我们在<code>Header</code>进行简述之外，还要在<code>Body</code>中详细描述。</p>\n<p>一般而言，<code>Header</code>长度不应超过50个字符，如果超过的话则考虑添加<code>Body</code>进行详述。</p>\n<p>我们通常使用的<code>git commit -m &quot;&lt;Commit Message Header&gt;&quot;</code>，就是只添加单行的<code>Header</code>信息。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里只添加了Header</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"feat(官网主页): 将iOS的头部背景与Android统一，不再使用默认蓝色图片\"</span></span><br></pre></td></tr></table></figure>\n<p>如果需要添加<code>Body</code>详细信息，则使用<code>git commit</code>进入文本编辑器，再进行具体编辑。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里既添加了Header，又添加了Body</span></span><br><span class=\"line\">chore(构建优化): 解决构建流程几个问题</span><br><span class=\"line\"></span><br><span class=\"line\">- 每次构建chunkhash会改变的问题</span><br><span class=\"line\">- 内联和外链样式重复问题</span><br><span class=\"line\">- 图片md5错误问题</span><br><span class=\"line\">- 提取项目公共vendor</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体规范\"><a href=\"#具体规范\" class=\"headerlink\" title=\"具体规范\"></a>具体规范</h3><p>从上面的示例可以看到，<code>Header</code>的格式为：<code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code>。</p>\n<p><code>Header</code>主要由<code>type</code>, <code>scope</code>和<code>subject</code>三部分组成：</p>\n<ul>\n<li><code>type</code>用来描述这次提交属于哪一类修改，比如是<code>完成需求</code>还是<code>修复BUG</code>。<em>（必需）</em></li>\n<li><code>scope</code>用来描述这次提交涉及的范围，比如是<code>详情页</code>还是<code>礼包页</code>。对于一些没有明确范围的改动，可以忽略。<em>（可选）</em></li>\n<li><code>subject</code>是这次提交的简单描述，具体做了什么。如果50字符内不能描述清楚，建议添加<code>Body</code>继续描述。<em>（必需）</em></li>\n</ul>\n<h3 id=\"type类别\"><a href=\"#type类别\" class=\"headerlink\" title=\"type类别\"></a><code>type</code>类别</h3><p>常用：</p>\n<ul>\n<li><code>feat</code> - 新增需求、需求迭代、新功能等相关的提交</li>\n<li><code>fix</code> - BUG修复提交</li>\n<li><code>docs</code> - 文档相关的提交</li>\n<li><code>refactor</code> - 技术优化类的代码重构，不影响具体需求和逻辑，也不涉及BUG修复的修改，如：测速优化、性能优化、模块拆分等</li>\n<li><code>chore</code> - 代码维护相关的小改动，如：更新依赖库、构建工具及其配置的改动、代码格式调整等</li>\n</ul>\n<p>较不常用：</p>\n<ul>\n<li><code>workflow</code> - 开发工作流的改动，比如修改<code>package.json</code>中的<code>scripts</code>，比如增加或修改一些发布脚本</li>\n<li><code>test</code> - 测试相关的修改，比如增加测试用例。</li>\n</ul>\n<h3 id=\"Revert\"><a href=\"#Revert\" class=\"headerlink\" title=\"Revert\"></a>Revert</h3><p>在需要回滚某些改动的时候，使用<code>revert: &lt;reverted commit Header&gt;</code>格式，也就是将回滚的那一条提交的<code>Header</code>作为<code>revert</code>后的内容。</p>\n<p>例如，之前进行了某些改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fix(礼包页): 修复了礼包页展示不完全的bug</span><br></pre></td></tr></table></figure>\n<p>之后发现这个改动会引起一些其他的bug，不得已需要回滚：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: fix(礼包页): 修复了礼包页展示不完全的bug</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><code>scope</code>不是必须的，也没有具体的限定，但是有明显范围特征的尽量写上。（比如下面例子中的<code>(详情页)</code>）；</li>\n<li>注意描述要清晰，要针对改动本身，让其他成员在没有任何上下文的情况下，也能看懂改动了什么。</li>\n<li>不写废话（不过可以偶尔卖个萌😉）；</li>\n<li><code>typo</code>修正、代码格式调整之类的，在AngularJS标准里另分到<code>style</code>类别，我们统一放在<code>chore</code>当中。这些很细小的改动，描述可以不用特别详细；</li>\n<li>应保证<code>改动</code>和<code>commit</code>一一对应；</li>\n<li>一个<code>commit</code>只对应一处改动、一个需求或一个BUG，不要把多个改动集中混在一起提交。在同时修改了多个文件时，不要直接<code>git add .</code>，应该挑选相关的文件进行<code>add</code>和<code>commit</code>，再挑选另一部分文件进行<code>add</code>和<code>commit</code>；</li>\n<li>一处改动、一个需求或一个BUG，应尽量集中在同一个<code>commit</code>中，不要开发到中途先提交一次，开发完成再提交一次。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\">fix: bug修复</span><br><span class=\"line\">fix: 修复了测试昨天发现的bug</span><br><span class=\"line\">feat: 完成了今天排期的需求</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OK</span></span><br><span class=\"line\">chore: 修正了几处拼写错误</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\">feat: 在新的主页新增了一个关闭按钮</span><br><span class=\"line\">fix(详情页): 修复展开活动的sid为string的bug</span><br></pre></td></tr></table></figure>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbNTM2Nzc2MTU5XX0=\n-->","site":{"data":{}},"excerpt":"<blockquote>\n<p>注：在Git协作模式的团队中，Commit Message的规范对版本控制起着很重要的作用。本文引用自团队内部的规范，分享出来，一是为了贡献社区，二是为了加深印象。</p>\n</blockquote>","more":"<h2 id=\"Commit-Message规范\"><a href=\"#Commit-Message规范\" class=\"headerlink\" title=\"Commit Message规范\"></a>Commit Message规范</h2><p>在<code>git</code>开发流程中，每次<code>git commit</code>，都需要对该次<code>commit</code>添加描述信息，描述此次<code>commit</code>的具体改动内容。规范的<code>commit message</code>格式，可以让团队成员对每次改动内容进行快速了解，也可以方便<code>git log</code>时的浏览和筛选。</p>\n<p>目前社区使用最广的是 AngularJS 的规范：</p>\n<ul>\n<li><p><a href=\"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0\" target=\"_blank\" rel=\"noopener\">Google Docs 原文</a></p>\n</li>\n<li><p><a href=\"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html\" target=\"_blank\" rel=\"noopener\">阮一峰博客对于commit message的介绍</a></p>\n</li>\n</ul>\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>一条完整的提交信息(<code>commit message</code>)一般来说包含<code>Header</code>和<code>Body</code>，其中<code>Header</code>是必须的，<code>Body</code>是可选的。</p>\n<p>对于大部分可以简单描述清楚的改动，只需要一个<code>Header</code>即可。</p>\n<p>而对于一些需要更详细说明、要分条列出的改动，我们在<code>Header</code>进行简述之外，还要在<code>Body</code>中详细描述。</p>\n<p>一般而言，<code>Header</code>长度不应超过50个字符，如果超过的话则考虑添加<code>Body</code>进行详述。</p>\n<p>我们通常使用的<code>git commit -m &quot;&lt;Commit Message Header&gt;&quot;</code>，就是只添加单行的<code>Header</code>信息。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里只添加了Header</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"feat(官网主页): 将iOS的头部背景与Android统一，不再使用默认蓝色图片\"</span></span><br></pre></td></tr></table></figure>\n<p>如果需要添加<code>Body</code>详细信息，则使用<code>git commit</code>进入文本编辑器，再进行具体编辑。例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这里既添加了Header，又添加了Body</span></span><br><span class=\"line\">chore(构建优化): 解决构建流程几个问题</span><br><span class=\"line\"></span><br><span class=\"line\">- 每次构建chunkhash会改变的问题</span><br><span class=\"line\">- 内联和外链样式重复问题</span><br><span class=\"line\">- 图片md5错误问题</span><br><span class=\"line\">- 提取项目公共vendor</span><br></pre></td></tr></table></figure>\n<h3 id=\"具体规范\"><a href=\"#具体规范\" class=\"headerlink\" title=\"具体规范\"></a>具体规范</h3><p>从上面的示例可以看到，<code>Header</code>的格式为：<code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</code>。</p>\n<p><code>Header</code>主要由<code>type</code>, <code>scope</code>和<code>subject</code>三部分组成：</p>\n<ul>\n<li><code>type</code>用来描述这次提交属于哪一类修改，比如是<code>完成需求</code>还是<code>修复BUG</code>。<em>（必需）</em></li>\n<li><code>scope</code>用来描述这次提交涉及的范围，比如是<code>详情页</code>还是<code>礼包页</code>。对于一些没有明确范围的改动，可以忽略。<em>（可选）</em></li>\n<li><code>subject</code>是这次提交的简单描述，具体做了什么。如果50字符内不能描述清楚，建议添加<code>Body</code>继续描述。<em>（必需）</em></li>\n</ul>\n<h3 id=\"type类别\"><a href=\"#type类别\" class=\"headerlink\" title=\"type类别\"></a><code>type</code>类别</h3><p>常用：</p>\n<ul>\n<li><code>feat</code> - 新增需求、需求迭代、新功能等相关的提交</li>\n<li><code>fix</code> - BUG修复提交</li>\n<li><code>docs</code> - 文档相关的提交</li>\n<li><code>refactor</code> - 技术优化类的代码重构，不影响具体需求和逻辑，也不涉及BUG修复的修改，如：测速优化、性能优化、模块拆分等</li>\n<li><code>chore</code> - 代码维护相关的小改动，如：更新依赖库、构建工具及其配置的改动、代码格式调整等</li>\n</ul>\n<p>较不常用：</p>\n<ul>\n<li><code>workflow</code> - 开发工作流的改动，比如修改<code>package.json</code>中的<code>scripts</code>，比如增加或修改一些发布脚本</li>\n<li><code>test</code> - 测试相关的修改，比如增加测试用例。</li>\n</ul>\n<h3 id=\"Revert\"><a href=\"#Revert\" class=\"headerlink\" title=\"Revert\"></a>Revert</h3><p>在需要回滚某些改动的时候，使用<code>revert: &lt;reverted commit Header&gt;</code>格式，也就是将回滚的那一条提交的<code>Header</code>作为<code>revert</code>后的内容。</p>\n<p>例如，之前进行了某些改动：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fix(礼包页): 修复了礼包页展示不完全的bug</span><br></pre></td></tr></table></figure>\n<p>之后发现这个改动会引起一些其他的bug，不得已需要回滚：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">revert: fix(礼包页): 修复了礼包页展示不完全的bug</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li><code>scope</code>不是必须的，也没有具体的限定，但是有明显范围特征的尽量写上。（比如下面例子中的<code>(详情页)</code>）；</li>\n<li>注意描述要清晰，要针对改动本身，让其他成员在没有任何上下文的情况下，也能看懂改动了什么。</li>\n<li>不写废话（不过可以偶尔卖个萌😉）；</li>\n<li><code>typo</code>修正、代码格式调整之类的，在AngularJS标准里另分到<code>style</code>类别，我们统一放在<code>chore</code>当中。这些很细小的改动，描述可以不用特别详细；</li>\n<li>应保证<code>改动</code>和<code>commit</code>一一对应；</li>\n<li>一个<code>commit</code>只对应一处改动、一个需求或一个BUG，不要把多个改动集中混在一起提交。在同时修改了多个文件时，不要直接<code>git add .</code>，应该挑选相关的文件进行<code>add</code>和<code>commit</code>，再挑选另一部分文件进行<code>add</code>和<code>commit</code>；</li>\n<li>一处改动、一个需求或一个BUG，应尽量集中在同一个<code>commit</code>中，不要开发到中途先提交一次，开发完成再提交一次。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\">fix: bug修复</span><br><span class=\"line\">fix: 修复了测试昨天发现的bug</span><br><span class=\"line\">feat: 完成了今天排期的需求</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OK</span></span><br><span class=\"line\">chore: 修正了几处拼写错误</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\">feat: 在新的主页新增了一个关闭按钮</span><br><span class=\"line\">fix(详情页): 修复展开活动的sid为string的bug</span><br></pre></td></tr></table></figure>\n<!--stackedit_data:\neyJoaXN0b3J5IjpbNTM2Nzc2MTU5XX0=\n-->"}],"PostAsset":[],"PostCategory":[{"post_id":"cjstph3x2000588zbe04fuhgr","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3x8000a88zbmkutlv1b"},{"post_id":"cjstph3wp000088zb5sz6ypv6","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3xb000d88zbqij9i9tw"},{"post_id":"cjstph3x4000688zbe5q4seau","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3xb000f88zbjqm8dojg"},{"post_id":"cjstph3wu000188zb8h5mzl01","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3xd000i88zbkdlmbf1z"},{"post_id":"cjstph3x0000488zb4xox0pty","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3xd000k88zbmds5fqp9"},{"post_id":"cjstph3xl000q88zbktb4b5lp","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3xx000w88zbag2q5pna"},{"post_id":"cjstph3xo000t88zbw718rnfc","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3y0001088zblptmjy6d"},{"post_id":"cjstph3xq000u88zbwmu73g4g","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3y3001388zbz189fuhs"},{"post_id":"cjstph3xk000p88zboq6uxpb1","category_id":"cjstph3xn000r88zb6v8zxr4u","_id":"cjstph3y6001688zb6ts77opy"},{"post_id":"cjstph3xz000z88zbwysjfn6m","category_id":"cjstph3xn000r88zb6v8zxr4u","_id":"cjstph3y7001888zbzv5tnvas"},{"post_id":"cjstph3y1001288zbo0szla5t","category_id":"cjstph3wx000288zb0gopxrjf","_id":"cjstph3y8001c88zbe45x6p5s"},{"post_id":"cjstph3xt000v88zbql7cq5sv","category_id":"cjstph3y1001188zbfyy5cjuh","_id":"cjstph3y8001e88zb9wg4mfr7"},{"post_id":"cjstph3y5001588zblmu0k2xy","category_id":"cjstph3y7001b88zbk6k6akg8","_id":"cjstph3ya001j88zbzf2fd05b"},{"post_id":"cjstph3yc001n88zbyb7gfntb","category_id":"cjstph3yd001o88zb4sbnv5p5","_id":"cjstph3yf001r88zbwufxy5lc"}],"PostTag":[{"post_id":"cjstph3x4000688zbe5q4seau","tag_id":"cjstph3wz000388zbsto9ppsz","_id":"cjstph3x8000988zbtdfqhg13"},{"post_id":"cjstph3wp000088zb5sz6ypv6","tag_id":"cjstph3wz000388zbsto9ppsz","_id":"cjstph3xb000e88zbwunl39h3"},{"post_id":"cjstph3wp000088zb5sz6ypv6","tag_id":"cjstph3x5000888zbhu3z8f84","_id":"cjstph3xc000g88zbc1l561z4"},{"post_id":"cjstph3wu000188zb8h5mzl01","tag_id":"cjstph3wz000388zbsto9ppsz","_id":"cjstph3xd000j88zb8bf9t53x"},{"post_id":"cjstph3x0000488zb4xox0pty","tag_id":"cjstph3wz000388zbsto9ppsz","_id":"cjstph3xf000m88zbo5lqe995"},{"post_id":"cjstph3x2000588zbe04fuhgr","tag_id":"cjstph3wz000388zbsto9ppsz","_id":"cjstph3xf000n88zb9lizv35o"},{"post_id":"cjstph3x2000588zbe04fuhgr","tag_id":"cjstph3xe000l88zbdjdtc6nm","_id":"cjstph3xg000o88zb7wpluzpf"},{"post_id":"cjstph3xk000p88zboq6uxpb1","tag_id":"cjstph3xn000s88zbgjzhp32m","_id":"cjstph3xz000y88zb5fn5s0f2"},{"post_id":"cjstph3xl000q88zbktb4b5lp","tag_id":"cjstph3x5000888zbhu3z8f84","_id":"cjstph3y6001788zbahf9rkha"},{"post_id":"cjstph3xl000q88zbktb4b5lp","tag_id":"cjstph3xx000x88zb8uixxj36","_id":"cjstph3y7001988zb77680fxz"},{"post_id":"cjstph3y1001288zbo0szla5t","tag_id":"cjstph3wz000388zbsto9ppsz","_id":"cjstph3y8001d88zbxreuzak8"},{"post_id":"cjstph3xq000u88zbwmu73g4g","tag_id":"cjstph3x5000888zbhu3z8f84","_id":"cjstph3y9001f88zbnmnxnpqr"},{"post_id":"cjstph3xq000u88zbwmu73g4g","tag_id":"cjstph3y3001488zb8x7r5p84","_id":"cjstph3y9001h88zbcdtrti96"},{"post_id":"cjstph3xt000v88zbql7cq5sv","tag_id":"cjstph3y7001a88zbooqanvya","_id":"cjstph3ya001i88zbin9aw6dn"},{"post_id":"cjstph3xz000z88zbwysjfn6m","tag_id":"cjstph3y9001g88zbmaunmsdv","_id":"cjstph3yb001l88zbe0xeneqw"},{"post_id":"cjstph3y5001588zblmu0k2xy","tag_id":"cjstph3ya001k88zbtqh84lho","_id":"cjstph3yb001m88zbznb6l0fv"},{"post_id":"cjstph3yc001n88zbyb7gfntb","tag_id":"cjstph3ye001p88zb4b02oxl7","_id":"cjstph3yf001t88zb22xz934y"},{"post_id":"cjstph3yc001n88zbyb7gfntb","tag_id":"cjstph3ye001q88zbnixpzkth","_id":"cjstph3yg001u88zbces829qa"},{"post_id":"cjstph3yc001n88zbyb7gfntb","tag_id":"cjstph3yf001s88zbq625k2f0","_id":"cjstph3yg001v88zbpr7wjvzt"}],"Tag":[{"name":"JavaScript","_id":"cjstph3wz000388zbsto9ppsz"},{"name":"前端","_id":"cjstph3x5000888zbhu3z8f84"},{"name":"算法","_id":"cjstph3xe000l88zbdjdtc6nm"},{"name":"学习笔记","_id":"cjstph3xn000s88zbgjzhp32m"},{"name":"安全","_id":"cjstph3xx000x88zb8uixxj36"},{"name":"CSS","_id":"cjstph3y3001488zb8x7r5p84"},{"name":"日志","_id":"cjstph3y7001a88zbooqanvya"},{"name":"指南 笔记 Mac","_id":"cjstph3y9001g88zbmaunmsdv"},{"name":"随笔","_id":"cjstph3ya001k88zbtqh84lho"},{"name":"规范","_id":"cjstph3ye001p88zb4b02oxl7"},{"name":"Git","_id":"cjstph3ye001q88zbnixpzkth"},{"name":"软件工程","_id":"cjstph3yf001s88zbq625k2f0"}]}}